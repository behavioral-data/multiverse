{"target_lineno": 241, "file": "/projects/bdata/jupyter/target/nb_828079.py", "context": "\nget_ipython().system('./build/tools/caffe train -solver examples/hdf5_classification/nonlinear_logreg_solver.prototxt')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "system"}, {"type": "Str", "value": "./build/tools/caffe train -solver examples/hdf5_classification/nonlinear_logreg_solver.prototxt"}], "funcs": ["get_ipython.system", "get_ipython"], "neighbor_cells": [1321771], "id": 1321772, "header": "", "annotation": [" Do the same through the command line interface for detailed output on the model and solving "]}
{"target_lineno": 48, "file": "/projects/bdata/jupyter/target/nb_553879.py", "context": "\nget_ipython().run_line_magic('pushd', 'data/imagenet')\n\nget_ipython().run_line_magic('cd', 'train')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "pushd"}, {"type": "Str", "value": "data/imagenet"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 15, 16]}, {"type": "AttributeLoad", "children": [12, 14]}, {"type": "Call", "children": [13]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "cd"}, {"type": "Str", "value": "train"}], "funcs": ["get_ipython.run_line_magic", "get_ipython", "get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [1191927], "id": 1191928, "header": "", "annotation": [" The problem and the solution", " The problem", " The problem that we faced in the lesson 3 is that when we wanted to add batch normalization we initialized all the dense layers of the model to random weights and then tried to train them with our cats v dogs dataset But that s a lot of weights to initialize to random out of 134m params around 119m are in the dense layers Take a moment to think about why this is and convince yourself that dense layers are where most of the weights will be Also think about whether this implies that most of the time will be spent training these weights What do you think ", " ", " Trying to train 120m params using just 23k images is clearly an unreasonable expectation The reason we haven t had this problem before is that the dense layers were not random but were trained to recognize imagenet categories other than the very last layer which only has 8194 params ", " The solution", " The solution obviously enough is to add batch normalization to the VGG model To do so we have to be careful we can t just insert batchnorm layers since their parameters gamma which is used to multiply by each activation and beta which is used to add to each activation will not be set correctly Without setting these correctly the new batchnorm layers will normalize the previous layer s activations meaning that the next layer will receive totally different activations to what it would have without new batchnorm layer And that means that all the pre trained weights are no longer of any use ", " ", " So instead we need to figure out what beta and gamma to choose when we insert the layers The answer to this turns out to be pretty simple we need to calculate what the mean and standard deviation of that activations for that layer are when calculated on all of imagenet and then set beta and gamma to these values That means that the new batchnorm layer will normalize the data with the mean and standard deviation and then immediately un normalize the data using the beta and gamma parameters we provide So the output of the batchnorm layer will be identical to it s input which means that all the pre trained weights will continue to work just as well as before ", " ", " The benefit of this is that when we wish to fine tune our own networks we will have all the benefits of batch normalization higher learning rates more resiliant training and less need for dropout plus all the benefits of a pre trained network ", " To calculate the mean and standard deviation of the activations on imagenet we need to download imagenet You can download imagenet from http www image net org download images The file you want is the one titled Download links to ILSVRC2013 image data You ll need to request access from the imagenet admins for this although it seems to be an automated system I ve always found that access is provided instantly Once you re logged in and have gone to that page look for the CLS LOC dataset section Both training and validation images are available and you should download both There s not much reason to download the test images however ", " ", " Note that this will not be the entire imagenet archive but just the 1000 categories that are used in the annual competition Since that s what VGG16 was originally trained on that seems like a good choice especially since the full dataset is 1 1 terabytes whereas the 1000 category dataset is 138 gigabytes ", " Adding batchnorm to Imagenet", " Setup", " Sample", " As per usual we create a sample so we can experiment more rapidly "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_68438.py", "target_func": "none_func", "context": "\nfrom spUtils.get_normalized_traces_submodule import epoch_event_generator, findEventsParams\n", "target_lineno": 465, "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "children": [2, 3], "value": "spUtils.get_normalized_traces_submodule"}, {"type": "alias", "value": "epoch_event_generator"}, {"type": "alias", "value": "findEventsParams"}], "stage": null, "id": 1030614, "neighbor_cells": [1030613], "header": " Events", "annotation": [" Events"]}
{"funcs": ["pandas.read_stata"], "file": "/projects/bdata/jupyter/target/nb_771812.py", "target_func": "none_func", "context": "\nimport pandas as pd\n\nimport numpy as np\n\nfrom scipy import stats\n\nimport matplotlib.pyplot as plt\n\nimport matplotlib.mlab as mlab\n\nimport math\n\ndf = pd.read_stata('us_job_market_discrimination.dta')\n", "target_lineno": 41, "nodes": [{"type": "Module", "children": [1, 4, 7, 9, 12, 15, 17]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "children": [8], "value": "scipy"}, {"type": "alias", "value": "stats"}, {"type": "Import", "children": [10]}, {"type": "alias", "children": [11], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [13]}, {"type": "alias", "children": [14], "value": "matplotlib.mlab"}, {"type": "identifier", "value": "mlab"}, {"type": "Import", "children": [16]}, {"type": "alias", "value": "math"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_stata"}, {"type": "Str", "value": "us_job_market_discrimination.dta"}], "stage": null, "id": 988686, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8", " Examining Racial Discrimination in the US Job Market", " ", " Background", " Racial discrimination continues to be pervasive in cultures throughout the world Researchers examined the level of racial discrimination in the United States labor market by randomly assigning identical r sum s to black sounding or white sounding names and observing the impact on requests for interviews from employers ", " ", " Data", " In the dataset provided each row represents a resume The race column has two values b and w indicating black sounding and white sounding The column call has two values 1 and 0 indicating whether the resume received a call from employers or not ", " ", " Note that the b and w values in race are assigned randomly to the resumes when presented to the employer ", " div class span5 alert alert info ", " Exercises", " You will perform a statistical analysis to establish whether race has a significant impact on the rate of callbacks for resumes ", " ", " Answer the following questions in this notebook below and submit to your Github account ", " ", " 1 What test is appropriate for this problem Does CLT apply ", " 2 What are the null and alternate hypotheses ", " 3 Compute margin of error confidence interval and p value ", " 4 Write a story describing the statistical significance in the context or the original problem ", " 5 Does your analysis mean that race name is the most important factor in callback success Why or why not If not how would you amend your analysis ", " ", " You can include written notes in notebook cells using Markdown ", " In the control panel at the top choose Cell Cell Type Markdown", " Markdown syntax http nestacms com docs creating content markdown cheat sheet", " ", " ", " Resources", " Experiment information and data source http www povertyactionlab org evaluation discrimination job market united states", " Scipy statistical methods http docs scipy org doc scipy reference stats html ", " Markdown syntax http nestacms com docs creating content markdown cheat sheet", " div ", " ", " I used a two sample t test for this problem Central Limit Theorem would apply because the data is relatively normal and the sample size is large enough to approximate the population ", " ", " HO The difference in the callback rate for black and white sounding names are not statistically significant HA The difference in the callback rate for black and white sounding names is statistically significant "]}
{"funcs": ["statsmodels.formula.api.ols.fit", "statsmodels.formula.api.ols", "statsmodels.formula.api.ols.fit.summary"], "file": "/projects/bdata/jupyter/target/nb_652760.py", "target_func": "none_func", "context": "\ndata['G0'] = (data['GROUP'] == 0)\n\ndata['G1'] = (data['GROUP'] == 1)\n\ndata['G2'] = (data['GROUP'] == 2)\n\ndata['G3'] = (data['GROUP'] == 3)\n\nmodel_type = ols('VALUE ~ AREA + BED + BATH + AGE + G0 + G1 + G2 + G3', data=data).fit()\n\nprint model_type.summary()\n", "target_lineno": 291, "nodes": [{"type": "Module", "children": [1, 12, 23, 34, 45, 55]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "G0"}, {"type": "CompareEq", "children": [7, 11]}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "GROUP"}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [13, 17]}, {"type": "SubscriptStore", "children": [14, 15]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [16]}, {"type": "Str", "value": "G1"}, {"type": "CompareEq", "children": [18, 22]}, {"type": "SubscriptLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [21]}, {"type": "Str", "value": "GROUP"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [24, 28]}, {"type": "SubscriptStore", "children": [25, 26]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [27]}, {"type": "Str", "value": "G2"}, {"type": "CompareEq", "children": [29, 33]}, {"type": "SubscriptLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [32]}, {"type": "Str", "value": "GROUP"}, {"type": "Num", "value": "2"}, {"type": "Assign", "children": [35, 39]}, {"type": "SubscriptStore", "children": [36, 37]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [38]}, {"type": "Str", "value": "G3"}, {"type": "CompareEq", "children": [40, 44]}, {"type": "SubscriptLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [43]}, {"type": "Str", "value": "GROUP"}, {"type": "Num", "value": "3"}, {"type": "Assign", "children": [46, 47]}, {"type": "NameStore", "value": "model_type"}, {"type": "Call", "children": [48]}, {"type": "AttributeLoad", "children": [49, 54]}, {"type": "Call", "children": [50, 51, 52]}, {"type": "NameLoad", "value": "ols"}, {"type": "Str", "value": "VALUE ~ AREA + BED + BATH + AGE + G0 + G1 + G2 + G3"}, {"type": "keyword", "children": [53], "value": "data"}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "fit"}, {"type": "Print", "children": [56]}, {"type": "Call", "children": [57]}, {"type": "AttributeLoad", "children": [58, 59]}, {"type": "NameLoad", "value": "model_type"}, {"type": "attr", "value": "summary"}], "stage": null, "id": 460919, "neighbor_cells": [460918], "header": "", "annotation": [" The p value for the partial F test statistic is below my alpha of 05 Thus I can reject the null hypothesis that a home s at at the time of its sale has little predictive value for its sale price ", " Including house type in the model", " ", " Finally it s time to test the last independent variable house type Recall that I have used cluster analysis to combine the house type assignments into 4 groups which I will treat as a nominal variable ", " ", " Again I ll use my partialF function to determine if the new variable has any significant predictive value "]}
{"funcs": ["pandas.read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_669821.py", "target_func": "none_func", "context": "\ncompliance_df.head()\n", "target_lineno": 29, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "compliance_df"}, {"type": "attr", "value": "head"}], "stage": null, "id": 792887, "neighbor_cells": [792886], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_392569.py", "target_func": "none_func", "context": "\nprint svm_clf.support_vectors_.shape\n\nprint svm_clf.support_.shape\n\nprint svm_clf.n_support_\n", "target_lineno": 423, "nodes": [{"type": "Module", "children": [1, 7, 13]}, {"type": "Print", "children": [2]}, {"type": "AttributeLoad", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "svm_clf"}, {"type": "attr", "value": "support_vectors_"}, {"type": "attr", "value": "shape"}, {"type": "Print", "children": [8]}, {"type": "AttributeLoad", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "svm_clf"}, {"type": "attr", "value": "support_"}, {"type": "attr", "value": "shape"}, {"type": "Print", "children": [14]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "svm_clf"}, {"type": "attr", "value": "n_support_"}], "stage": null, "id": 350396, "neighbor_cells": [350395], "header": "", "annotation": [" Resubmission Commentary ", " ", " Looking at the above the accuracy is approximately 64 which is about same as what we saw using logicistic regression 65 Above We could do a t test to determine if there is a statistically significant difference in the two numbers but for the accuracy level we re trying to reach we are going to pass on this ", " ", " However we will continue with the SVM to see how it ends up ", " "]}
{"target_lineno": 60, "file": "/projects/bdata/jupyter/target/nb_338376.py", "context": "\ncategorical_variables = ['Sex', 'Cabin', 'Embarked']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "categorical_variables"}, {"type": "ListLoad", "children": [4, 5, 6]}, {"type": "Str", "value": "Sex"}, {"type": "Str", "value": "Cabin"}, {"type": "Str", "value": "Embarked"}], "funcs": [], "neighbor_cells": [791549], "id": 791550, "header": "", "annotation": []}
{"funcs": ["numpy.random.random"], "file": "/projects/bdata/jupyter/target/nb_561676.py", "target_func": "none_func", "context": "\nnp.random.random((2, 3))\n", "target_lineno": 208, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 8]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "random"}, {"type": "attr", "value": "random"}, {"type": "TupleLoad", "children": [9, 10]}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "3"}], "stage": null, "id": 271223, "neighbor_cells": [271222], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv"], "file": "/projects/bdata/jupyter/target/nb_473492.py", "target_func": "none_func", "context": "\ndf_sfmta_stop = pd.read_csv('data_sfmta/stop_times.txt')\n", "target_lineno": 924, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "df_sfmta_stop"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "data_sfmta/stop_times.txt"}], "stage": null, "id": 686291, "neighbor_cells": [686290], "header": "", "annotation": []}
{"target_lineno": 144, "file": "/projects/bdata/jupyter/target/nb_803052.py", "context": "\nimputed_train = np.array(imputed_train)\n\nimputed_train.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "imputed_train"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "NameLoad", "value": "imputed_train"}, {"type": "Expr", "children": [9]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "imputed_train"}, {"type": "attr", "value": "shape"}], "funcs": ["numpy.array"], "neighbor_cells": [413972], "id": 413973, "header": "", "annotation": []}
{"target_lineno": 515, "file": "/projects/bdata/jupyter/target/nb_685870.py", "context": "\nplot_overlay(variations, ordered_features, 'all-variations_bias-quantilebins_sentencerel', 'husl', plot_bias, 'Measured bias for all sentence-relative features', '$\\\\phi_r($disappearing word$)$ (normalised to $[0, 1]$)', '$\\\\nu_{\\\\phi_r} - \\\\nu_{\\\\phi,r}^{00}$\\n(normalised to sentence-relative feature average)', plot_kws={\n    'ci': False,\n    'relative': True,\n    'quantiles': True,\n})\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}, {"type": "NameLoad", "value": "plot_overlay"}, {"type": "NameLoad", "value": "variations"}, {"type": "NameLoad", "value": "ordered_features"}, {"type": "Str", "value": "all-variations_bias-quantilebins_sentencerel"}, {"type": "Str", "value": "husl"}, {"type": "NameLoad", "value": "plot_bias"}, {"type": "Str", "value": "Measured bias for all sentence-relative features"}, {"type": "Str", "value": "$\\phi_r($disappearing word$)$ (normalised to $[0, 1]$)"}, {"type": "Str", "value": "$\\nu_{\\phi_r} - \\nu_{\\phi,r}^{00}$\n(normalised to sentence-relative feature average)"}, {"type": "keyword", "value": "plot_kws", "children": [13]}, {"type": "Dict", "children": [14, 15, 16, 17, 18, 19]}, {"type": "Str", "value": "ci"}, {"type": "Str", "value": "relative"}, {"type": "Str", "value": "quantiles"}, {"type": "NameConstant"}, {"type": "NameConstant"}, {"type": "NameConstant"}], "funcs": ["plot_overlay"], "neighbor_cells": [626894], "id": 626895, "header": "", "annotation": []}
{"target_lineno": 651, "file": "/projects/bdata/jupyter/target/nb_966225.py", "context": "\nmatplotlib.rcParams['figure.figsize'] = (4, 3)\n\nsns.tsplot(train_scores, time='train_size', unit='variable', value='CrossVal score')\n\nsns.tsplot(test_scores, time='train_size', unit='variable', value='CrossVal score', color='g')\n\nplt.ylim(0, 1.1)\n\nplt.legend()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11, 23, 37, 44]}, {"type": "Assign", "children": [2, 8]}, {"type": "SubscriptStore", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "matplotlib"}, {"type": "attr", "value": "rcParams"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "figure.figsize"}, {"type": "TupleLoad", "children": [9, 10]}, {"type": "Num", "value": "4"}, {"type": "Num", "value": "3"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16, 17, 19, 21]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "tsplot"}, {"type": "NameLoad", "value": "train_scores"}, {"type": "keyword", "value": "time", "children": [18]}, {"type": "Str", "value": "train_size"}, {"type": "keyword", "value": "unit", "children": [20]}, {"type": "Str", "value": "variable"}, {"type": "keyword", "value": "value", "children": [22]}, {"type": "Str", "value": "CrossVal score"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 28, 29, 31, 33, 35]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "tsplot"}, {"type": "NameLoad", "value": "test_scores"}, {"type": "keyword", "value": "time", "children": [30]}, {"type": "Str", "value": "train_size"}, {"type": "keyword", "value": "unit", "children": [32]}, {"type": "Str", "value": "variable"}, {"type": "keyword", "value": "value", "children": [34]}, {"type": "Str", "value": "CrossVal score"}, {"type": "keyword", "value": "color", "children": [36]}, {"type": "Str", "value": "g"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 42, 43]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylim"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1.1"}, {"type": "Expr", "children": [45]}, {"type": "Call", "children": [46]}, {"type": "AttributeLoad", "children": [47, 48]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "legend"}], "funcs": ["seaborn.tsplot", "seaborn.tsplot", "matplotlib.pyplot.ylim", "matplotlib.pyplot.legend"], "neighbor_cells": [661218], "id": 661219, "header": "", "annotation": []}
{"target_lineno": 542, "file": "/projects/bdata/jupyter/target/nb_258709.py", "context": "\nprint('Imputed and encoded numeric training data:')\n\ntrain[encoded_nums].describe()\n\nprint('--------------------------------------------------------------------------------')\n\nprint('Imputed and encoded numeric validation data:')\n\nvalid[encoded_nums].describe()\n\nprint('--------------------------------------------------------------------------------')\n\nprint('Imputed and encoded numeric test data:')\n\ntest[encoded_nums].describe()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 5, 13, 17, 21, 29, 33, 37]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Imputed and encoded numeric training data:"}, {"type": "Expr", "children": [6]}, {"type": "Call", "children": [7]}, {"type": "AttributeLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [11]}, {"type": "NameLoad", "value": "encoded_nums"}, {"type": "attr", "value": "describe"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "--------------------------------------------------------------------------------"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Imputed and encoded numeric validation data:"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23]}, {"type": "AttributeLoad", "children": [24, 28]}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "valid"}, {"type": "Index", "children": [27]}, {"type": "NameLoad", "value": "encoded_nums"}, {"type": "attr", "value": "describe"}, {"type": "Expr", "children": [30]}, {"type": "Call", "children": [31, 32]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "--------------------------------------------------------------------------------"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 36]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Imputed and encoded numeric test data:"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39]}, {"type": "AttributeLoad", "children": [40, 44]}, {"type": "SubscriptLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [43]}, {"type": "NameLoad", "value": "encoded_nums"}, {"type": "attr", "value": "describe"}], "funcs": ["print", "describe", "print", "print", "describe", "print", "print", "describe"], "neighbor_cells": [289749], "id": 289750, "header": "", "annotation": []}
{"target_lineno": 221, "file": "/projects/bdata/jupyter/target/nb_239972.py", "context": "\n\ndef get_all_levels_df(left_df, right_df, max_depth=None, return_data=True):\n    data = get_all_levels_data(left_df, right_df, max_depth=max_depth)\n    df = data_to_df(data)\n    if (return_data is True):\n        return (df, data)\n    else:\n        return df\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "get_all_levels_df", "children": [2, 11, 37]}, {"type": "arguments", "children": [3, 8]}, {"type": "args", "children": [4, 5, 6, 7]}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults", "children": [9, 10]}, {"type": "NameConstant"}, {"type": "NameConstant"}, {"type": "body", "children": [12, 20, 25]}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [15, 16, 17, 18]}, {"type": "NameLoad", "value": "get_all_levels_data"}, {"type": "NameLoad", "value": "left_df"}, {"type": "NameLoad", "value": "right_df"}, {"type": "keyword", "value": "max_depth", "children": [19]}, {"type": "NameLoad", "value": "max_depth"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [23, 24]}, {"type": "NameLoad", "value": "data_to_df"}, {"type": "NameLoad", "value": "data"}, {"type": "If", "children": [26, 29, 34]}, {"type": "CompareIs", "children": [27, 28]}, {"type": "NameLoad", "value": "return_data"}, {"type": "NameConstant"}, {"type": "body", "children": [30]}, {"type": "Return", "children": [31]}, {"type": "TupleLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "df"}, {"type": "NameLoad", "value": "data"}, {"type": "orelse", "children": [35]}, {"type": "Return", "children": [36]}, {"type": "NameLoad", "value": "df"}, {"type": "decorator_list"}], "funcs": ["get_all_levels_data", "data_to_df"], "neighbor_cells": [397544], "id": 397545, "header": "", "annotation": []}
{"funcs": ["open", "pickle.dump"], "file": "/projects/bdata/jupyter/target/nb_765701.py", "target_func": "none_func", "context": "\nwith open('spamAssassinData.pickle', 'w') as f:\n    pickle.dump(res, f)\n", "target_lineno": 667, "nodes": [{"type": "Module", "children": [1]}, {"type": "With", "children": [2, 6, 7]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "spamAssassinData.pickle"}, {"type": "Str", "value": "w"}, {"type": "NameStore", "value": "f"}, {"type": "body", "children": [8]}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 13, 14]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "dump"}, {"type": "NameLoad", "value": "res"}, {"type": "NameLoad", "value": "f"}], "stage": null, "id": 758998, "neighbor_cells": [758997], "header": "", "annotation": []}
{"funcs": ["info"], "file": "/projects/bdata/jupyter/target/nb_627355.py", "target_func": "none_func", "context": "\noptions_data.info()\n", "target_lineno": 207, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "options_data"}, {"type": "attr", "value": "info"}], "stage": null, "id": 600946, "neighbor_cells": [600945], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_375531.py", "target_func": "none_func", "context": "\ncamera[(10, 0)]\n\ncamera[(3, 10)] = 0\n", "target_lineno": 67, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "camera"}, {"type": "Index", "children": [5]}, {"type": "TupleLoad", "children": [6, 7]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [9, 15]}, {"type": "SubscriptStore", "children": [10, 11]}, {"type": "NameLoad", "value": "camera"}, {"type": "Index", "children": [12]}, {"type": "TupleLoad", "children": [13, 14]}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "0"}], "stage": null, "id": 648292, "neighbor_cells": [648291], "header": "", "annotation": [" Numpy ", " ", " http scikit image org docs stable user guide data types html data types"]}
{"target_lineno": 757, "file": "/projects/bdata/jupyter/target/nb_330648.py", "context": "\n(fig, ax) = plt.subplots(2, 3)\n\nfig.tight_layout()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "fig"}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [6, 9, 10]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "subplots"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "3"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "fig"}, {"type": "attr", "value": "tight_layout"}], "funcs": ["matplotlib.pyplot.subplots", "matplotlib.pyplot.figure.tight_layout"], "neighbor_cells": [168081], "id": 168082, "header": " subplots", "annotation": [" Figures with multiple subplots and insets", " Axes can be added to a matplotlib Figure canvas manually using fig add axes or using a sub figure layout manager such as subplots subplot2grid or gridspec ", " subplots"]}
{"funcs": ["sum"], "file": "/projects/bdata/jupyter/target/nb_228031.py", "target_func": "none_func", "context": "\nnb = sum((data.race == 'b'))\n\nprint (nb * pb)\n\nprint (nb * (1 - pb))\n", "target_lineno": 87, "nodes": [{"type": "Module", "children": [1, 10, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "nb"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "sum"}, {"type": "CompareEq", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "race"}, {"type": "Str", "value": "b"}, {"type": "Print", "children": [11]}, {"type": "BinOpMult", "children": [12, 13]}, {"type": "NameLoad", "value": "nb"}, {"type": "NameLoad", "value": "pb"}, {"type": "Print", "children": [15]}, {"type": "BinOpMult", "children": [16, 17]}, {"type": "NameLoad", "value": "nb"}, {"type": "BinOpSub", "children": [18, 19]}, {"type": "Num", "value": "1"}, {"type": "NameLoad", "value": "pb"}], "stage": null, "id": 1051566, "neighbor_cells": [1051565], "header": "", "annotation": [" For this test we need to compare two proportions ", " First we need to assess if the sampling distributions of the two proportions are nearly normal ", " 1 Sample observations independent", " 2 Success Failure condition"]}
{"target_lineno": 409, "file": "/projects/bdata/jupyter/target/nb_87182.py", "context": "\nprint('The KNN model has a testing accuracy {} %.'.format((testing_accuracy * 100.0)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "Str", "value": "The KNN model has a testing accuracy {} %."}, {"type": "attr", "value": "format"}, {"type": "BinOpMult", "children": [9, 10]}, {"type": "NameLoad", "value": "testing_accuracy"}, {"type": "Num", "value": "100.0"}], "funcs": ["print", "format"], "neighbor_cells": [815857], "id": 815858, "header": "", "annotation": []}
{"funcs": ["nunique"], "file": "/projects/bdata/jupyter/target/nb_705772.py", "target_func": "none_func", "context": "\nsmall_train['user_id'].nunique()\n", "target_lineno": 119, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "small_train"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "user_id"}, {"type": "attr", "value": "nunique"}], "stage": null, "id": 164234, "neighbor_cells": [164233], "header": "", "annotation": [" I m now down to just under 2 million rows which is still a pretty unwieldy size for my laptop An additional option for sampling the dataset is to only include data from specific user IDs The dataset has data on nearly 600K users "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_834923.py", "target_func": "none_func", "context": "\nprint w\n", "target_lineno": 752, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "w"}], "stage": null, "id": 49317, "neighbor_cells": [49316], "header": "", "annotation": []}
{"target_lineno": 142, "file": "/projects/bdata/jupyter/target/nb_47933.py", "context": "\ncorr = movie.select_dtypes(include=['float64', 'int64']).iloc[:, 1:].corr()\n\nplt.figure(figsize=(16, 16))\n\nsns.heatmap(corr, vmax=1, square=True)\n\nsns.plt\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 21, 30, 40]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "corr"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 20]}, {"type": "SubscriptLoad", "children": [6, 16]}, {"type": "AttributeLoad", "children": [7, 15]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "movie"}, {"type": "attr", "value": "select_dtypes"}, {"type": "keyword", "value": "include", "children": [12]}, {"type": "ListLoad", "children": [13, 14]}, {"type": "Str", "value": "float64"}, {"type": "Str", "value": "int64"}, {"type": "attr", "value": "iloc"}, {"type": "ExtSlice", "children": [17, 18]}, {"type": "Slice"}, {"type": "Slice", "children": [19]}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "corr"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "figure"}, {"type": "keyword", "value": "figsize", "children": [27]}, {"type": "TupleLoad", "children": [28, 29]}, {"type": "Num", "value": "16"}, {"type": "Num", "value": "16"}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32, 35, 36, 38]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "heatmap"}, {"type": "NameLoad", "value": "corr"}, {"type": "keyword", "value": "vmax", "children": [37]}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "square", "children": [39]}, {"type": "NameConstant"}, {"type": "Expr", "children": [41]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "plt"}], "funcs": ["pandas.read_csv.select_dtypes", "pandas.read_csv.select_dtypes", "corr", "pandas.read_csv.select_dtypes", "matplotlib.pyplot.figure", "seaborn.heatmap"], "neighbor_cells": [1074718], "id": 1074719, "header": "", "annotation": []}
{"target_lineno": 368, "file": "/projects/bdata/jupyter/target/nb_900562.py", "context": "\nfeatures_array = imputed_features.values\n\nfeatures_array\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "features_array"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "imputed_features"}, {"type": "attr", "value": "values"}, {"type": "Expr", "children": [7]}, {"type": "NameLoad", "value": "features_array"}], "funcs": [], "neighbor_cells": [1165560], "id": 1165561, "header": "", "annotation": [" Now that the data frame is clean we can convert it into an homogeneous numpy array of floating point values "]}
{"target_lineno": 490, "file": "/projects/bdata/jupyter/target/nb_821954.py", "context": "\nconfusion = metrics.confusion_matrix(train_data.Positive_Result, train_data.predicted)\n\nTP = confusion[(1, 1)]\n\nTN = confusion[(0, 0)]\n\nFP = confusion[(0, 1)]\n\nFN = confusion[(1, 0)]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13, 21, 29, 37]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "confusion"}, {"type": "Call", "children": [4, 7, 10]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "confusion_matrix"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "train_data"}, {"type": "attr", "value": "Positive_Result"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "train_data"}, {"type": "attr", "value": "predicted"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "TP"}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "confusion"}, {"type": "Index", "children": [18]}, {"type": "TupleLoad", "children": [19, 20]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "TN"}, {"type": "SubscriptLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "confusion"}, {"type": "Index", "children": [26]}, {"type": "TupleLoad", "children": [27, 28]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [30, 31]}, {"type": "NameStore", "value": "FP"}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "confusion"}, {"type": "Index", "children": [34]}, {"type": "TupleLoad", "children": [35, 36]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [38, 39]}, {"type": "NameStore", "value": "FN"}, {"type": "SubscriptLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "confusion"}, {"type": "Index", "children": [42]}, {"type": "TupleLoad", "children": [43, 44]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}], "funcs": ["sklearn.metrics.confusion_matrix"], "neighbor_cells": [215859], "id": 215860, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_466688.py", "target_func": "none_func", "context": "\nyears\n", "target_lineno": 67, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "years"}], "stage": null, "id": 605318, "neighbor_cells": [605317], "header": "", "annotation": []}
{"funcs": ["numpy.sqrt"], "file": "/projects/bdata/jupyter/target/nb_71968.py", "target_func": "none_func", "context": "\ny_pred_prob_new = np.sqrt(y_pred_prob)\n", "target_lineno": 375, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y_pred_prob_new"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sqrt"}, {"type": "NameLoad", "value": "y_pred_prob"}], "stage": null, "id": 1036127, "neighbor_cells": [1036126], "header": "", "annotation": [" Predicted probabilites of water points across actual classification value of 0 and 1 are mapped below The side by side histogram indicates that the classifer is not very good as there is much overlap in the predicted probabilities between 0 Functional and 1 Non Functional cases Thus it is probably not worth the time to write code to figure out the optimal threshold Instead a more advanced technique on linear model is explored to get higher test results "]}
{"target_lineno": 95, "file": "/projects/bdata/jupyter/target/nb_422303.py", "context": "\ntrain.info()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "info"}], "funcs": ["pandas.read_csv.info"], "neighbor_cells": [407553], "id": 407554, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_612561.py", "target_func": "none_func", "context": "\nX_test = X_test[X_train.columns]\n", "target_lineno": 352, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X_test"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "X_test"}, {"type": "Index", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "X_train"}, {"type": "attr", "value": "columns"}], "stage": null, "id": 225603, "neighbor_cells": [225602], "header": "", "annotation": []}
{"target_lineno": 112, "file": "/projects/bdata/jupyter/target/nb_847502.py", "context": "\ndf3['Tiempos'].apply((lambda x: ((x ** (1.0 / 1)) if (x >= 0) else (- 1)))).plot()\n\nplt.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 28]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 27]}, {"type": "Call", "children": [5, 11]}, {"type": "AttributeLoad", "children": [6, 10]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "df3"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "Tiempos"}, {"type": "attr", "value": "apply"}, {"type": "Lambda", "children": [12, 16]}, {"type": "arguments", "children": [13, 15]}, {"type": "args", "children": [14]}, {"type": "arg"}, {"type": "defaults"}, {"type": "IfExp", "children": [17, 20, 25]}, {"type": "CompareGtE", "children": [18, 19]}, {"type": "NameLoad", "value": "x"}, {"type": "Num", "value": "0"}, {"type": "BinOpPow", "children": [21, 22]}, {"type": "NameLoad", "value": "x"}, {"type": "BinOpDiv", "children": [23, 24]}, {"type": "Num", "value": "1.0"}, {"type": "Num", "value": "1"}, {"type": "UnaryOpUSub", "children": [26]}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "plot"}, {"type": "Expr", "children": [29]}, {"type": "Call", "children": [30]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "funcs": ["apply.plot", "apply", "matplotlib.pyplot.show"], "neighbor_cells": [334908], "id": 334909, "header": " Otra forma de analizar complejidad", "annotation": [" Otra forma de analizar complejidad"]}
{"funcs": ["mean"], "file": "/projects/bdata/jupyter/target/nb_515428.py", "target_func": "none_func", "context": "\nmean(D)\n", "target_lineno": 149, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "mean"}, {"type": "NameLoad", "value": "D"}], "stage": null, "id": 1028437, "neighbor_cells": [1028436], "header": "", "annotation": []}
{"target_lineno": 276, "file": "/projects/bdata/jupyter/target/nb_299592.py", "context": "\ntrn_features.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "trn_features"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [1036271], "id": 1036272, "header": "", "annotation": []}
{"target_lineno": 199, "file": "/projects/bdata/jupyter/target/nb_421156.py", "context": "\n\ndef TestModel(model=None, data=None):\n    if (model is None):\n        print('Must provide a trained model.')\n        return\n    if (data is None):\n        print('Must provide data.')\n        return\n    (x_test, y_test) = data\n    scores = model.evaluate(x_test, y_test)\n    return scores\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "TestModel", "children": [2, 9, 45]}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults", "children": [7, 8]}, {"type": "NameConstant"}, {"type": "NameConstant"}, {"type": "body", "children": [10, 20, 30, 35, 43]}, {"type": "If", "children": [11, 14]}, {"type": "CompareIs", "children": [12, 13]}, {"type": "NameLoad", "value": "model"}, {"type": "NameConstant"}, {"type": "body", "children": [15, 19]}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Must provide a trained model."}, {"type": "Return"}, {"type": "If", "children": [21, 24]}, {"type": "CompareIs", "children": [22, 23]}, {"type": "NameLoad", "value": "data"}, {"type": "NameConstant"}, {"type": "body", "children": [25, 29]}, {"type": "Expr", "children": [26]}, {"type": "Call", "children": [27, 28]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Must provide data."}, {"type": "Return"}, {"type": "Assign", "children": [31, 34]}, {"type": "TupleStore", "children": [32, 33]}, {"type": "NameStore", "value": "x_test"}, {"type": "NameStore", "value": "y_test"}, {"type": "NameLoad", "value": "data"}, {"type": "Assign", "children": [36, 37]}, {"type": "NameStore", "value": "scores"}, {"type": "Call", "children": [38, 41, 42]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "evaluate"}, {"type": "NameLoad", "value": "x_test"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Return", "children": [44]}, {"type": "NameLoad", "value": "scores"}, {"type": "decorator_list"}], "funcs": ["print", "print", "DefineModel.evaluate"], "neighbor_cells": [323950], "id": 323951, "header": " Testing", "annotation": [" Testing"]}
{"target_lineno": 301, "file": "/projects/bdata/jupyter/target/nb_608288.py", "context": "\ndf.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.head"], "neighbor_cells": [838705], "id": 838706, "header": "", "annotation": [" Requirements for working with data in scikit learn", " ", " 1 Features should not have missing values", " 2 Features and response should be numeric ", " 3 Features and response should be NumPy arrays", " 4 Features and response are separate objects", " 5 Features and response should have specific shapes"]}
{"target_lineno": 334, "file": "/projects/bdata/jupyter/target/nb_167101.py", "context": "\ngs = GridSearchCV(estimator=pipe_svc, param_grid=param_grid, scoring='accuracy', cv=5)\n\nscores = cross_val_score(gs, X_train, y_train, scoring='accuracy', cv=5)\n\nprint(('CV accuracy: %.3f +/- %.3f' % (np.mean(scores), np.std(scores))))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13, 24]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "gs"}, {"type": "Call", "children": [4, 5, 7, 9, 11]}, {"type": "NameLoad", "value": "GridSearchCV"}, {"type": "keyword", "value": "estimator", "children": [6]}, {"type": "NameLoad", "value": "pipe_svc"}, {"type": "keyword", "value": "param_grid", "children": [8]}, {"type": "NameLoad", "value": "param_grid"}, {"type": "keyword", "value": "scoring", "children": [10]}, {"type": "Str", "value": "accuracy"}, {"type": "keyword", "value": "cv", "children": [12]}, {"type": "Num", "value": "5"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "scores"}, {"type": "Call", "children": [16, 17, 18, 19, 20, 22]}, {"type": "NameLoad", "value": "cross_val_score"}, {"type": "NameLoad", "value": "gs"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "keyword", "value": "scoring", "children": [21]}, {"type": "Str", "value": "accuracy"}, {"type": "keyword", "value": "cv", "children": [23]}, {"type": "Num", "value": "5"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 27]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [28, 29]}, {"type": "Str", "value": "CV accuracy: %.3f +/- %.3f"}, {"type": "TupleLoad", "children": [30, 35]}, {"type": "Call", "children": [31, 34]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "NameLoad", "value": "scores"}, {"type": "Call", "children": [36, 39]}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "std"}, {"type": "NameLoad", "value": "scores"}], "funcs": ["sklearn.grid_search.GridSearchCV", "sklearn.cross_validation.cross_val_score", "print", "numpy.mean", "numpy.std"], "neighbor_cells": [290481], "id": 290482, "header": "", "annotation": [" br ", " br ", " Algorithm selection with nested cross validation", " back to top Sections "]}
{"target_lineno": 57, "file": "/projects/bdata/jupyter/target/nb_122867.py", "context": "\n(test_image_set, test_label_set) = helper.get_data_from_file(True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "test_image_set"}, {"type": "NameStore", "value": "test_label_set"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "helper"}, {"type": "attr", "value": "get_data_from_file"}, {"type": "NameConstant"}], "funcs": ["helper.get_data_from_file"], "neighbor_cells": [752710], "id": 752711, "header": "", "annotation": []}
{"funcs": ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "file": "/projects/bdata/jupyter/target/nb_489312.py", "target_func": "none_func", "context": "\ntrain = pd.read_csv('competition_zero/train2.csv')\n\ntest = pd.read_csv('competition_zero/test2.csv')\n\nsample_submission = pd.read_csv('competition_zero/sample_submission.csv')\n", "target_lineno": 26, "nodes": [{"type": "Module", "children": [1, 8, 15]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "train"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "competition_zero/train2.csv"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "test"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "competition_zero/test2.csv"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "sample_submission"}, {"type": "Call", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "competition_zero/sample_submission.csv"}], "stage": null, "id": 1044375, "neighbor_cells": [1044374], "header": " Load data using pandas", "annotation": [" Download data from competition s page", " ", " https inclass kaggle com c data mining in action 2016 competitions 01 data", " Load data using pandas"]}
{"funcs": ["IPython.display.display", "pandas.read_csv.describe"], "file": "/projects/bdata/jupyter/target/nb_236843.py", "target_func": "none_func", "context": "\nprint 'Display statistics about training data:'\n\ndisplay(data.describe())\n", "target_lineno": 52, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Print", "children": [2]}, {"type": "Str", "value": "Display statistics about training data:"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 6]}, {"type": "NameLoad", "value": "display"}, {"type": "Call", "children": [7]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "describe"}], "stage": null, "id": 198498, "neighbor_cells": [198497], "header": "", "annotation": []}
{"target_lineno": 26, "file": "/projects/bdata/jupyter/target/nb_254854.py", "context": "\nnames = ['id', 'id_str', 'screen_name', 'location', 'description', 'url', 'followers_count', 'friends_count', 'listedcount', 'created_at', 'favourites_count', 'verified', 'statuses_count', 'lang', 'status', 'default_profile', 'default_profile_image', 'has_extended_profile', 'name', 'bot']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "names"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]}, {"type": "Str", "value": "id"}, {"type": "Str", "value": "id_str"}, {"type": "Str", "value": "screen_name"}, {"type": "Str", "value": "location"}, {"type": "Str", "value": "description"}, {"type": "Str", "value": "url"}, {"type": "Str", "value": "followers_count"}, {"type": "Str", "value": "friends_count"}, {"type": "Str", "value": "listedcount"}, {"type": "Str", "value": "created_at"}, {"type": "Str", "value": "favourites_count"}, {"type": "Str", "value": "verified"}, {"type": "Str", "value": "statuses_count"}, {"type": "Str", "value": "lang"}, {"type": "Str", "value": "status"}, {"type": "Str", "value": "default_profile"}, {"type": "Str", "value": "default_profile_image"}, {"type": "Str", "value": "has_extended_profile"}, {"type": "Str", "value": "name"}, {"type": "Str", "value": "bot"}], "funcs": [], "neighbor_cells": [824586], "id": 824587, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_539572.py", "target_func": "none_func", "context": "\nfirstFew_user85 = user85\n", "target_lineno": 414, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "firstFew_user85"}, {"type": "NameLoad", "value": "user85"}], "stage": null, "id": 1064012, "neighbor_cells": [1064011], "header": "", "annotation": []}
{"funcs": ["patsy.dmatrices", "statsmodels.api.OLS", "statsmodels.api.OLS.fit", "statsmodels.api.OLS.fit.summary"], "file": "/projects/bdata/jupyter/target/nb_532452.py", "target_func": "none_func", "context": "\n(price, X_MT) = dmatrices('Price ~ mileage_inv + C(Transmission)', data=jimnies, return_type='dataframe')\n\nmod_MT = sm.OLS(price, X_MT)\n\nres_MT = mod_MT.fit()\n\nprint res_MT.summary()\n", "target_lineno": 400, "nodes": [{"type": "Module", "children": [1, 12, 20, 26]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "price"}, {"type": "NameStore", "value": "X_MT"}, {"type": "Call", "children": [6, 7, 8, 10]}, {"type": "NameLoad", "value": "dmatrices"}, {"type": "Str", "value": "Price ~ mileage_inv + C(Transmission)"}, {"type": "keyword", "children": [9], "value": "data"}, {"type": "NameLoad", "value": "jimnies"}, {"type": "keyword", "children": [11], "value": "return_type"}, {"type": "Str", "value": "dataframe"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "mod_MT"}, {"type": "Call", "children": [15, 18, 19]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "sm"}, {"type": "attr", "value": "OLS"}, {"type": "NameLoad", "value": "price"}, {"type": "NameLoad", "value": "X_MT"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "res_MT"}, {"type": "Call", "children": [23]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "mod_MT"}, {"type": "attr", "value": "fit"}, {"type": "Print", "children": [27]}, {"type": "Call", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "res_MT"}, {"type": "attr", "value": "summary"}], "stage": null, "id": 5081, "neighbor_cells": [5080], "header": " Considering only Transmission and Mileage", "annotation": [" So there seems to be quite a strong correlation higher mileage cars are generally older go figure 40 000 50 000 km 200 2 does seem to be a popular mileage to sell a Jimny on though But multicollinearity is a problem for our model because either model year or mileage may be contributing to the high price and we don t really know which it is ", " ", " So we have two options leave both in including as much information as we can at the risk of overfitting or take out either the year or the mileage factor Let s see what happens when we take either one out ", " Considering only Transmission and Mileage"]}
{"target_lineno": 20, "file": "/projects/bdata/jupyter/target/nb_447195.py", "context": "\nfrom sklearn import datasets\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "value": "sklearn", "children": [2]}, {"type": "alias", "value": "datasets"}], "funcs": [], "neighbor_cells": [52687], "id": 52688, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_569493.py", "target_func": "none_func", "context": "\nprint sibling_soup.b.next_sibling\n\nprint sibling_soup.b.previous_sibling\n", "target_lineno": 427, "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Print", "children": [2]}, {"type": "AttributeLoad", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sibling_soup"}, {"type": "attr", "value": "b"}, {"type": "attr", "value": "next_sibling"}, {"type": "Print", "children": [8]}, {"type": "AttributeLoad", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "sibling_soup"}, {"type": "attr", "value": "b"}, {"type": "attr", "value": "previous_sibling"}], "stage": null, "id": 911525, "neighbor_cells": [911524], "header": "", "annotation": []}
{"target_lineno": 11, "file": "/projects/bdata/jupyter/target/nb_665184.py", "context": "\nget_ipython().run_line_magic('load_ext', 'watermark')\n\nget_ipython().run_line_magic('watermark', \"-a 'Sebastian Raschka' -u -d -v -p numpy,scipy,matplotlib,scikit-learn\")\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "load_ext"}, {"type": "Str", "value": "watermark"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 15, 16]}, {"type": "AttributeLoad", "children": [12, 14]}, {"type": "Call", "children": [13]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "watermark"}, {"type": "Str", "value": "-a 'Sebastian Raschka' -u -d -v -p numpy,scipy,matplotlib,scikit-learn"}], "funcs": ["get_ipython.run_line_magic", "get_ipython", "get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 1186160, "header": "", "annotation": [" usr bin env python", " coding utf 8", " Sebastian Raschka 2015", " Python Machine Learning Essentials", " Compressing Data via Dimensionality Reduction", " Note that the optional watermark extension is a small IPython notebook plugin that I developed to make the code reproducible You can just skip the following line s "]}
{"target_lineno": 258, "file": "/projects/bdata/jupyter/target/nb_141572.py", "context": "\npart1\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "part1"}], "funcs": [], "neighbor_cells": [1232224], "id": 1232225, "header": "", "annotation": []}
{"target_lineno": 496, "file": "/projects/bdata/jupyter/target/nb_598463.py", "context": "\nnn.fit([trn.userId, trn.movieId], trn.rating, batch_size=64, epochs=8, validation_data=([val.userId, val.movieId], val.rating))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 13, 16, 18, 20]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "nn"}, {"type": "attr", "value": "fit"}, {"type": "ListLoad", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "trn"}, {"type": "attr", "value": "userId"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "trn"}, {"type": "attr", "value": "movieId"}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "trn"}, {"type": "attr", "value": "rating"}, {"type": "keyword", "value": "batch_size", "children": [17]}, {"type": "Num", "value": "64"}, {"type": "keyword", "value": "epochs", "children": [19]}, {"type": "Num", "value": "8"}, {"type": "keyword", "value": "validation_data", "children": [21]}, {"type": "TupleLoad", "children": [22, 29]}, {"type": "ListLoad", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "val"}, {"type": "attr", "value": "userId"}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "val"}, {"type": "attr", "value": "movieId"}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "val"}, {"type": "attr", "value": "rating"}], "funcs": ["Model.fit"], "neighbor_cells": [531030], "id": 531031, "header": "", "annotation": []}
{"target_lineno": 170, "file": "/projects/bdata/jupyter/target/nb_445799.py", "context": "\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "sklearn.datasets", "children": [2]}, {"type": "alias", "value": "load_iris"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "iris"}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "load_iris"}], "funcs": ["sklearn.datasets.load_iris"], "neighbor_cells": [1763], "id": 1764, "header": "", "annotation": [" Quick Question ", " ", " If we want to design an algorithm to recognize iris species what might the data be ", " ", " Remember we need a 2D array of size n samples x n features ", " ", " What would the n samples refer to ", " ", " What might the n features refer to ", " ", " Remember that there must be a fixed number of features for each sample and feature", " number i must be a similar kind of quantity for each sample ", " Loading the Iris Data with Scikit Learn", " ", " Scikit learn has a very straightforward set of data on these iris species The data consist of", " the following ", " ", " Features in the Iris dataset ", " ", " 1 sepal length in cm", " 2 sepal width in cm", " 3 petal length in cm", " 4 petal width in cm", " ", " Target classes to predict ", " ", " 1 Iris Setosa", " 2 Iris Versicolour", " 3 Iris Virginica", " ", " scikit learn embeds a copy of the iris CSV file along with a helper function to load it into numpy arrays "]}
{"funcs": ["numpy.mean"], "file": "/projects/bdata/jupyter/target/nb_698120.py", "target_func": "none_func", "context": "\nnp.mean(df_job_posting['salary_flag'])\n", "target_lineno": 244, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "df_job_posting"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "salary_flag"}], "stage": null, "id": 238943, "neighbor_cells": [238942], "header": "", "annotation": []}
{"funcs": ["average_cost"], "file": "/projects/bdata/jupyter/target/nb_778478.py", "target_func": "none_func", "context": "\ndsteval = average_cost(testchurners, ypred_dste, cost)\n\ndsteval\n", "target_lineno": 284, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dsteval"}, {"type": "Call", "children": [4, 5, 6, 7]}, {"type": "NameLoad", "value": "average_cost"}, {"type": "NameLoad", "value": "testchurners"}, {"type": "NameLoad", "value": "ypred_dste"}, {"type": "NameLoad", "value": "cost"}, {"type": "Expr", "children": [9]}, {"type": "NameLoad", "value": "dsteval"}], "stage": null, "id": 1117420, "neighbor_cells": [1117419], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_375832.py", "target_func": "none_func", "context": "\nX[:, 1]\n", "target_lineno": 136, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "X"}, {"type": "ExtSlice", "children": [5, 6]}, {"type": "Slice"}, {"type": "Index", "children": [7]}, {"type": "Num", "value": "1"}], "stage": null, "id": 438430, "neighbor_cells": [438429], "header": "", "annotation": []}
{"funcs": ["pandas.DataFrame", "pandas.DataFrame.transpose.transpose", "pandas.DataFrame", "pandas.merge"], "file": "/projects/bdata/jupyter/target/nb_759887.py", "target_func": "none_func", "context": "\nwalandslides_allxy = [walandslides_all.OBJECTID, walandslides_all.POINT_X, walandslides_all.POINT_Y]\n\nwalandslides_allxy = pd.DataFrame(walandslides_allxy)\n\nwalandslides_allxy = walandslides_allxy.transpose()\n\nwalandslides = pd.DataFrame(walandslides)\n\nwalandslides = pd.merge(walandslides_allxy, walandslides, on='OBJECTID', how='outer')\n", "target_lineno": 152, "nodes": [{"type": "Module", "children": [1, 13, 20, 26, 33]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "walandslides_allxy"}, {"type": "ListLoad", "children": [4, 7, 10]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "walandslides_all"}, {"type": "attr", "value": "OBJECTID"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "walandslides_all"}, {"type": "attr", "value": "POINT_X"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "walandslides_all"}, {"type": "attr", "value": "POINT_Y"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "walandslides_allxy"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "NameLoad", "value": "walandslides_allxy"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "walandslides_allxy"}, {"type": "Call", "children": [23]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "walandslides_allxy"}, {"type": "attr", "value": "transpose"}, {"type": "Assign", "children": [27, 28]}, {"type": "NameStore", "value": "walandslides"}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "NameLoad", "value": "walandslides"}, {"type": "Assign", "children": [34, 35]}, {"type": "NameStore", "value": "walandslides"}, {"type": "Call", "children": [36, 39, 40, 41, 43]}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "merge"}, {"type": "NameLoad", "value": "walandslides_allxy"}, {"type": "NameLoad", "value": "walandslides"}, {"type": "keyword", "children": [42], "value": "on"}, {"type": "Str", "value": "OBJECTID"}, {"type": "keyword", "children": [44], "value": "how"}, {"type": "Str", "value": "outer"}], "stage": null, "id": 168753, "neighbor_cells": [168752], "header": " Table of all values for initial landslide dataset", "annotation": [" Table of all values for initial landslide dataset"]}
{"target_lineno": 175, "file": "/projects/bdata/jupyter/target/nb_857642.py", "context": "\nget_ipython().system('./build/tools/caffe train -solver examples/hdf5_classification/nonlinear_solver.prototxt')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "system"}, {"type": "Str", "value": "./build/tools/caffe train -solver examples/hdf5_classification/nonlinear_solver.prototxt"}], "funcs": ["get_ipython.system", "get_ipython"], "neighbor_cells": [1145061], "id": 1145062, "header": "", "annotation": [" Do the same through the command line interface for detailed output on the model and solving "]}
{"target_lineno": 67, "file": "/projects/bdata/jupyter/target/nb_983993.py", "context": "\nstm_feature_name\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "stm_feature_name"}], "funcs": [], "neighbor_cells": [440805], "id": 440806, "header": "", "annotation": []}
{"target_lineno": 27, "file": "/projects/bdata/jupyter/target/nb_428112.py", "context": "\nmodel.similarity('woman', 'woman')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "similarity"}, {"type": "Str", "value": "woman"}, {"type": "Str", "value": "woman"}], "funcs": ["gensim.models.Word2Vec.load_word2vec_format.similarity"], "neighbor_cells": [65963], "id": 65964, "header": "", "annotation": [" First let s just do a few quick tests to see if things are working as we expect "]}
{"funcs": ["pandas.DataFrame", "zip"], "file": "/projects/bdata/jupyter/target/nb_913358.py", "target_func": "none_func", "context": "\npd.DataFrame(zip(X.columns, lm.coef_), columns=['features', 'estimatedCoefficients'])\n", "target_lineno": 444, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 14]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "Call", "children": [7, 8, 11]}, {"type": "NameLoad", "value": "zip"}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "columns"}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "lm"}, {"type": "attr", "value": "coef_"}, {"type": "keyword", "children": [15], "value": "columns"}, {"type": "ListLoad", "children": [16, 17]}, {"type": "Str", "value": "features"}, {"type": "Str", "value": "estimatedCoefficients"}], "stage": null, "id": 526270, "neighbor_cells": [526269], "header": "", "annotation": []}
{"target_lineno": 167, "file": "/projects/bdata/jupyter/target/nb_353118.py", "context": "\nfrom sklearn import manifold\n\nmds = manifold.MDS(n_components=2, n_init=1, max_iter=100, eps=1e-05)\n\nprint('MDS fit_tranform time:')\n\nget_ipython().run_line_magic('time', 'X_mds = mds.fit_transform(X)')\n\nprint('MDS cross_val_score time:')\n\nget_ipython().run_line_magic('time', \"print(cross_val_score(KNeighborsRegressor(n_neighbors=4), X_mds, y, scoring='mean_absolute_error'))\")\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 17, 21, 29, 33]}, {"type": "ImportFrom", "value": "sklearn", "children": [2]}, {"type": "alias", "value": "manifold"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "mds"}, {"type": "Call", "children": [6, 9, 11, 13, 15]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "manifold"}, {"type": "attr", "value": "MDS"}, {"type": "keyword", "value": "n_components", "children": [10]}, {"type": "Num", "value": "2"}, {"type": "keyword", "value": "n_init", "children": [12]}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "max_iter", "children": [14]}, {"type": "Num", "value": "100"}, {"type": "keyword", "value": "eps", "children": [16]}, {"type": "Num", "value": "1e-05"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "MDS fit_tranform time:"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 27, 28]}, {"type": "AttributeLoad", "children": [24, 26]}, {"type": "Call", "children": [25]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "time"}, {"type": "Str", "value": "X_mds = mds.fit_transform(X)"}, {"type": "Expr", "children": [30]}, {"type": "Call", "children": [31, 32]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "MDS cross_val_score time:"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 39, 40]}, {"type": "AttributeLoad", "children": [36, 38]}, {"type": "Call", "children": [37]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "time"}, {"type": "Str", "value": "print(cross_val_score(KNeighborsRegressor(n_neighbors=4), X_mds, y, scoring='mean_absolute_error'))"}], "funcs": ["sklearn.manifold.MDS", "print", "get_ipython.run_line_magic", "get_ipython", "print", "get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [204747], "id": 204748, "header": "", "annotation": [" manifold learning ", " Sammon mapping "]}
{"target_lineno": 134, "file": "/projects/bdata/jupyter/target/nb_96348.py", "context": "\ny.unique()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "y"}, {"type": "attr", "value": "unique"}], "funcs": ["unique"], "neighbor_cells": [1009579], "id": 1009580, "header": "", "annotation": []}
{"target_lineno": 118, "file": "/projects/bdata/jupyter/target/nb_375565.py", "context": "\noutcomes[list(outcomes.columns[2:9])] = outcomes[list(outcomes.columns[2:9])].fillna('f')\n\noutcomes[list(outcomes.columns[9:12])] = outcomes[list(outcomes.columns[9:12])].fillna(0)\n\noutcomes\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 30, 59]}, {"type": "Assign", "children": [2, 14]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "outcomes"}, {"type": "Index", "children": [5]}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "list"}, {"type": "SubscriptLoad", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "outcomes"}, {"type": "attr", "value": "columns"}, {"type": "Slice", "children": [12, 13]}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "9"}, {"type": "Call", "children": [15, 29]}, {"type": "AttributeLoad", "children": [16, 28]}, {"type": "SubscriptLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "outcomes"}, {"type": "Index", "children": [19]}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "list"}, {"type": "SubscriptLoad", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "outcomes"}, {"type": "attr", "value": "columns"}, {"type": "Slice", "children": [26, 27]}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "9"}, {"type": "attr", "value": "fillna"}, {"type": "Str", "value": "f"}, {"type": "Assign", "children": [31, 43]}, {"type": "SubscriptStore", "children": [32, 33]}, {"type": "NameLoad", "value": "outcomes"}, {"type": "Index", "children": [34]}, {"type": "Call", "children": [35, 36]}, {"type": "NameLoad", "value": "list"}, {"type": "SubscriptLoad", "children": [37, 40]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "outcomes"}, {"type": "attr", "value": "columns"}, {"type": "Slice", "children": [41, 42]}, {"type": "Num", "value": "9"}, {"type": "Num", "value": "12"}, {"type": "Call", "children": [44, 58]}, {"type": "AttributeLoad", "children": [45, 57]}, {"type": "SubscriptLoad", "children": [46, 47]}, {"type": "NameLoad", "value": "outcomes"}, {"type": "Index", "children": [48]}, {"type": "Call", "children": [49, 50]}, {"type": "NameLoad", "value": "list"}, {"type": "SubscriptLoad", "children": [51, 54]}, {"type": "AttributeLoad", "children": [52, 53]}, {"type": "NameLoad", "value": "outcomes"}, {"type": "attr", "value": "columns"}, {"type": "Slice", "children": [55, 56]}, {"type": "Num", "value": "9"}, {"type": "Num", "value": "12"}, {"type": "attr", "value": "fillna"}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [60]}, {"type": "NameLoad", "value": "outcomes"}], "funcs": ["list", "list", "fillna", "list", "list", "list", "fillna", "list"], "neighbor_cells": [464304], "id": 464305, "header": "", "annotation": []}
{"funcs": ["IPython.display.Image"], "file": "/projects/bdata/jupyter/target/nb_680248.py", "target_func": "none_func", "context": "\nImage(filename='imgs/bv.png')\n", "target_lineno": 258, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "Image"}, {"type": "keyword", "children": [5], "value": "filename"}, {"type": "Str", "value": "imgs/bv.png"}], "stage": null, "id": 439737, "neighbor_cells": [439736], "header": "", "annotation": [" 3 Statistical Learning Theory", " En un escenario de clasificaci n tenemos un dataset de entrenamiento ", " S left left x i y i right i 1 m right ", " de tama o", " m ", " donde los datos de entrenamiento", " left x i y i right ", " son muestreados iid de una distribuci n de probabilidad", " mathcal D ", " Tenemos una familia de hip tesis", " mathcal H ", " que representa la clase de clasificadores que estamos considerando ", " Por ejemplo la familia de todos los posibles clasificadores lineales", " podr a definirse como", " mathcal H left h theta h theta x 1 left theta T x 0 right theta in mathbb R n 1 right ", " ", " begin split ", " hat varepsilon h frac 1 m sum i 1 m 1 left h x i neq y i right error de entrenamiento error emp rico empirical risk ", " varepsilon h P x y sim mathcal D left h x neq y right error de generalizaci n ", " hat h underset h in mathcal H arg min hat varepsilon h empirical risk minimization ERM ", " varepsilon hat h error de generalizaci n de la hip tesis obtenida mediante ERM ", " h underset h in mathcal H arg min varepsilon h la mejor hip tesis posible en mathcal H ", " varepsilon h error de generalizaci n de la mejor hip tesis posible en mathcal H ", " end split ", " ", " Solo tenemos acceso a S nuestro dataset de entrenamiento No tenemos", " acceso a mathcal D y por tanto no podemos conocer h Es", " este escenario adoptamos la estrategia de empirical risk minimization ", " tratando de encontrar hat h la hip tesis de mathcal H que", " me minimiza el error de entrenamiento respecto a los datos que tengo", " en S esperando que varepsilon hat h se aproxime a varepsilon h ", " Dentro de Statistical Learning Theory tenemos un resultado", " que nos garantiza esta convergencia cuando el n mero de datos m ", " aumenta Este resultado establece que con probabilidad 1 delta ", " ", " varepsilon hat h leq varepsilon h mathcal O left sqrt frac d m log frac m d frac 1 m log frac 1 delta right ", " ", " donde d VC mathcal H es la dimensi n Vapnik Chervonenkis de", " la familia de de hip tesis en cuesti n Esta dimensi F3 n da una medida", " de la complejidad de las hip tesis en mathcal H y en la mayor ED a", " de las ocasiones es aproximadamente linear en el n mero de par E1 metros", " de las hip tesis en mathcal H ", " Bias Variance", " ", " Dada una hip tesis concreta h como por las que obtenemos despu s", " de aplicar un m E9 todo de optimizaci n gradiente descendiente etc ", " en un escenario de regresi n o clasificaci n El error medio cuadrado", " viene dado por", " ", " MSE frac 1 m sum i 1 m left y i h theta x i right 2 ", " ", " ", " Asumimos un escenario en el que los y i que medimos est E1 n modelados", " por una funci F3 n determinista y desconocida por nosotros f x y", " que las mediciones est E1 n afectadas por ruido de forma que y i f x i varepsilon ", " En promedio entre todos los elementos de S el ruido es 0 es decir", " E left varepsilon right 0 pero cada elemento tiene su componente", " de ruido neq0 Idealmente nos gustar ED a que descubrir un h theta tal", " que h theta f Denotamos por brevedad y i f x i ", " e h theta x i por y i f i y h i respectivamente ", " El valor esperado del MSE es ", " ", " E left MSE right frac 1 m sum i 1 m E left left y i h i right 2 right ", " ", " ", " La expresi n E left left y i h i right 2 right puede decomponerse", " de la siguiente manera ver Bias Variance Wikipedia http en wikipedia org wiki Bias variance dilemma para m s detalles ", " begin eqnarray ", " E left left y i h i right 2 right E left varepsilon 2 right E left left f i E left h i right right 2 right E left left E left h i right h i right 2 right ", " Var varepsilon bias 2 Var left h i right ", " end eqnarray ", " ", " ", " Es decir el error de nuestra hip tesis h tiene tres componentes ", " un componente irreducible y asociado al ruido de medida el sesgo", " bias en ingl s debido a la desviaci n sistem tica de h ", " respecto a f y la varianza propia de h La siguiente figura", " ilustra los conceptos de sesgo y varianza ref http scott fortmann roe com docs BiasVariance html ", " ", " ", " "]}
{"target_lineno": 143, "file": "/projects/bdata/jupyter/target/nb_696460.py", "context": "\nmi = mutual_info_regression(a, recipes['cholesterol'])\n\nmi /= np.max(mi)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mi"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "mutual_info_regression"}, {"type": "NameLoad", "value": "a"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "recipes"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "cholesterol"}, {"type": "AugAssignDiv", "children": [11, 12]}, {"type": "NameStore", "value": "mi"}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "max"}, {"type": "NameLoad", "value": "mi"}], "funcs": ["sklearn.feature_selection.mutual_info_regression", "numpy.max"], "neighbor_cells": [864884], "id": 864885, "header": "", "annotation": []}
{"funcs": ["len", "pandas.read_excel.MRN.unique"], "file": "/projects/bdata/jupyter/target/nb_324961.py", "target_func": "none_func", "context": "\nlen(link.MRN.unique())\n", "target_lineno": 1023, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "len"}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "link"}, {"type": "attr", "value": "MRN"}, {"type": "attr", "value": "unique"}], "stage": null, "id": 2739, "neighbor_cells": [2738], "header": "", "annotation": []}
{"target_lineno": 330, "file": "/projects/bdata/jupyter/target/nb_352030.py", "context": "\nn\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "n"}], "funcs": [], "neighbor_cells": [266483], "id": 266484, "header": "", "annotation": []}
{"funcs": ["sklearn.tree.DecisionTreeClassifier", "sklearn.tree.DecisionTreeClassifier.fit", "sklearn.tree.DecisionTreeClassifier.score", "sklearn.tree.DecisionTreeClassifier.score"], "file": "/projects/bdata/jupyter/target/nb_244412.py", "target_func": "none_func", "context": "\nfrom sklearn import tree\n\ndecision = tree.DecisionTreeClassifier()\n\ndecision.fit(X_train, y_train)\n\ndecision_score_train = decision.score(X_train, y_train)\n\nprint 'Train score : ', decision_score_train\n\ndecision_score_test = decision.score(X_test, y_test)\n\nprint ('-' * 40)\n\nprint 'Test score : ', decision_score_test\n", "target_lineno": 219, "nodes": [{"type": "Module", "children": [1, 3, 9, 16, 24, 27, 35, 39]}, {"type": "ImportFrom", "children": [2], "value": "sklearn"}, {"type": "alias", "value": "tree"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "decision"}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "tree"}, {"type": "attr", "value": "DecisionTreeClassifier"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14, 15]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "decision"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "decision_score_train"}, {"type": "Call", "children": [19, 22, 23]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "decision"}, {"type": "attr", "value": "score"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Print", "children": [25, 26]}, {"type": "Str", "value": "Train score : "}, {"type": "NameLoad", "value": "decision_score_train"}, {"type": "Assign", "children": [28, 29]}, {"type": "NameStore", "value": "decision_score_test"}, {"type": "Call", "children": [30, 33, 34]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "decision"}, {"type": "attr", "value": "score"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Print", "children": [36]}, {"type": "BinOpMult", "children": [37, 38]}, {"type": "Str", "value": "-"}, {"type": "Num", "value": "40"}, {"type": "Print", "children": [40, 41]}, {"type": "Str", "value": "Test score : "}, {"type": "NameLoad", "value": "decision_score_test"}], "stage": null, "id": 17223, "neighbor_cells": [17222], "header": "", "annotation": [" Decision tree"]}
{"funcs": ["random.choice", "numpy.array", "random_guess", "range", "len", "calculate_ratio"], "file": "/projects/bdata/jupyter/target/nb_507757.py", "target_func": "none_func", "context": "\n\ndef random_guess():\n    return rn.choice(districts)\n\nY = df_tree['PdDistrict']\n\npred = np.array([random_guess() for _ in range(len(df_tree))])\n\nprint '--- Random guess ---'\n\ncalculate_ratio(Y, pred, 'PdDistrict')\n", "target_lineno": 171, "nodes": [{"type": "Module", "children": [1, 13, 19, 35, 37]}, {"type": "FunctionDef", "children": [2, 5, 12], "value": "random_guess"}, {"type": "arguments", "children": [3, 4]}, {"type": "args"}, {"type": "defaults"}, {"type": "body", "children": [6]}, {"type": "Return", "children": [7]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "rn"}, {"type": "attr", "value": "choice"}, {"type": "NameLoad", "value": "districts"}, {"type": "decorator_list"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "Y"}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "df_tree"}, {"type": "Index", "children": [18]}, {"type": "Str", "value": "PdDistrict"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "pred"}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListComp", "children": [26, 28]}, {"type": "Call", "children": [27]}, {"type": "NameLoad", "value": "random_guess"}, {"type": "comprehension", "children": [29, 30]}, {"type": "NameStore", "value": "_"}, {"type": "Call", "children": [31, 32]}, {"type": "NameLoad", "value": "range"}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "df_tree"}, {"type": "Print", "children": [36]}, {"type": "Str", "value": "--- Random guess ---"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 40, 41, 42]}, {"type": "NameLoad", "value": "calculate_ratio"}, {"type": "NameLoad", "value": "Y"}, {"type": "NameLoad", "value": "pred"}, {"type": "Str", "value": "PdDistrict"}], "stage": null, "id": 558986, "neighbor_cells": [558985], "header": "", "annotation": [" In light of the above results we could definitely say that reducing the problem to a binary classification problem makes more sense in terms of correct predictions ", " Compare it to the random guess what would you get if you d guess a district randomly "]}
{"funcs": ["numpy.unique", "matplotlib.pyplot.hist", "numpy.arange", "pandas.read_csv.sound.min", "pandas.read_csv.sound.max", "matplotlib.pyplot.legend", "remove_border"], "file": "/projects/bdata/jupyter/target/nb_399748.py", "target_func": "none_func", "context": "\nfor i in np.unique(df.cluster):\n    plt.hist(df.sound[(df.cluster == i)], bins=np.arange(df.sound.min(), (df.sound.max() + 1), 1), log=True, label=l[i])\n\nplt.legend()\n\nremove_border()\n", "target_lineno": 111, "nodes": [{"type": "Module", "children": [1, 53, 58]}, {"type": "For", "children": [2, 3, 10]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "unique"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "cluster"}, {"type": "body", "children": [11]}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16, 26, 46, 48]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "hist"}, {"type": "SubscriptLoad", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "sound"}, {"type": "Index", "children": [21]}, {"type": "CompareEq", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "cluster"}, {"type": "NameLoad", "value": "i"}, {"type": "keyword", "children": [27], "value": "bins"}, {"type": "Call", "children": [28, 31, 37, 45]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "Call", "children": [32]}, {"type": "AttributeLoad", "children": [33, 36]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "sound"}, {"type": "attr", "value": "min"}, {"type": "BinOpAdd", "children": [38, 44]}, {"type": "Call", "children": [39]}, {"type": "AttributeLoad", "children": [40, 43]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "sound"}, {"type": "attr", "value": "max"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [47], "value": "log"}, {"type": "NameLoad", "value": "True"}, {"type": "keyword", "children": [49], "value": "label"}, {"type": "SubscriptLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "l"}, {"type": "Index", "children": [52]}, {"type": "NameLoad", "value": "i"}, {"type": "Expr", "children": [54]}, {"type": "Call", "children": [55]}, {"type": "AttributeLoad", "children": [56, 57]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "legend"}, {"type": "Expr", "children": [59]}, {"type": "Call", "children": [60]}, {"type": "NameLoad", "value": "remove_border"}], "stage": null, "id": 909274, "neighbor_cells": [909273], "header": "", "annotation": []}
{"funcs": ["matplotlib.pyplot.figure", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.title", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.legend"], "file": "/projects/bdata/jupyter/target/nb_982773.py", "target_func": "none_func", "context": "\nplt.figure()\n\nplt.plot(lasso_alpha, label='Lasso')\n\nplt.plot(ridge_alpha, label='Ridge')\n\nplt.plot(lin_reg, label='Linear Regression')\n\nplt.title('Ridge and Lasso for Different Alpha Values')\n\nplt.xlabel('alpha')\n\nplt.ylabel('$R^2$')\n\nplt.legend(loc='best')\n", "target_lineno": 541, "nodes": [{"type": "Module", "children": [1, 6, 14, 22, 30, 36, 42, 48]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "figure"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8, 11, 12]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "lasso_alpha"}, {"type": "keyword", "children": [13], "value": "label"}, {"type": "Str", "value": "Lasso"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 19, 20]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "ridge_alpha"}, {"type": "keyword", "children": [21], "value": "label"}, {"type": "Str", "value": "Ridge"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 27, 28]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "lin_reg"}, {"type": "keyword", "children": [29], "value": "label"}, {"type": "Str", "value": "Linear Regression"}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Ridge and Lasso for Different Alpha Values"}, {"type": "Expr", "children": [37]}, {"type": "Call", "children": [38, 41]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "alpha"}, {"type": "Expr", "children": [43]}, {"type": "Call", "children": [44, 47]}, {"type": "AttributeLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "$R^2$"}, {"type": "Expr", "children": [49]}, {"type": "Call", "children": [50, 53]}, {"type": "AttributeLoad", "children": [51, 52]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "legend"}, {"type": "keyword", "children": [54], "value": "loc"}, {"type": "Str", "value": "best"}], "stage": null, "id": 345619, "neighbor_cells": [345618], "header": "", "annotation": []}
{"funcs": ["pstats.Stats.sort_stats.print_stats", "pstats.Stats.sort_stats"], "file": "/projects/bdata/jupyter/target/nb_737224.py", "target_func": "none_func", "context": "\nstats.sort_stats('tottime').print_stats(5)\n", "target_lineno": 791, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 10]}, {"type": "AttributeLoad", "children": [4, 9]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "stats"}, {"type": "attr", "value": "sort_stats"}, {"type": "Str", "value": "tottime"}, {"type": "attr", "value": "print_stats"}, {"type": "Num", "value": "5"}], "stage": null, "id": 1114448, "neighbor_cells": [1114447], "header": "", "annotation": []}
{"target_lineno": 164, "file": "/projects/bdata/jupyter/target/nb_238336.py", "context": "\nimport numpy as np\n\nimport pandas as pd\n\nfrom IPython.display import display, HTML\n\nloss = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.5, 2, 2.5, 3, 3.5, 4]\n\ndf = pd.DataFrame({\n    'logloss': loss,\n    'pred': np.exp(np.negative(loss)),\n}, columns=['logloss', 'pred'])\n\ndisplay(df)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 29, 52]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "pandas", "children": [6]}, {"type": "identifier", "value": "pd"}, {"type": "ImportFrom", "value": "IPython.display", "children": [8, 9]}, {"type": "alias", "value": "display"}, {"type": "alias", "value": "HTML"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "loss"}, {"type": "ListLoad", "children": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]}, {"type": "Num", "value": "0.1"}, {"type": "Num", "value": "0.2"}, {"type": "Num", "value": "0.3"}, {"type": "Num", "value": "0.4"}, {"type": "Num", "value": "0.5"}, {"type": "Num", "value": "0.6"}, {"type": "Num", "value": "0.7"}, {"type": "Num", "value": "0.8"}, {"type": "Num", "value": "0.9"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1.5"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "2.5"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "3.5"}, {"type": "Num", "value": "4"}, {"type": "Assign", "children": [30, 31]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [32, 35, 48]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "Dict", "children": [36, 37, 38, 39]}, {"type": "Str", "value": "logloss"}, {"type": "Str", "value": "pred"}, {"type": "NameLoad", "value": "loss"}, {"type": "Call", "children": [40, 43]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "exp"}, {"type": "Call", "children": [44, 47]}, {"type": "AttributeLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "negative"}, {"type": "NameLoad", "value": "loss"}, {"type": "keyword", "value": "columns", "children": [49]}, {"type": "ListLoad", "children": [50, 51]}, {"type": "Str", "value": "logloss"}, {"type": "Str", "value": "pred"}, {"type": "Expr", "children": [53]}, {"type": "Call", "children": [54, 55]}, {"type": "NameLoad", "value": "display"}, {"type": "NameLoad", "value": "df"}], "funcs": ["pandas.DataFrame", "numpy.exp", "numpy.negative", "IPython.display.display"], "neighbor_cells": [88622], "id": 88623, "header": "", "annotation": [" The table below shows the opposit For a given logloss what is the average probability for the correct class "]}
{"funcs": ["word_algebra"], "file": "/projects/bdata/jupyter/target/nb_420662.py", "target_func": "none_func", "context": "\nword_algebra(add=[u'taco', u'chinese'], subtract=[u'mexican'])\n", "target_lineno": 1078, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 8]}, {"type": "NameLoad", "value": "word_algebra"}, {"type": "keyword", "children": [5], "value": "add"}, {"type": "ListLoad", "children": [6, 7]}, {"type": "Str", "value": "taco"}, {"type": "Str", "value": "chinese"}, {"type": "keyword", "children": [9], "value": "subtract"}, {"type": "ListLoad", "children": [10]}, {"type": "Str", "value": "mexican"}], "stage": null, "id": 828757, "neighbor_cells": [828756], "header": " taco mexican chinese ", "annotation": [" Now we re getting a bit more nuanced The model has discovered that ", " Both lunch and dinner are meals", " The main difference between them is time of day", " Day and night are times of day", " Lunch is associated with day and dinner is associated with night", " ", " What else ", " taco mexican chinese "]}
{"target_lineno": 531, "file": "/projects/bdata/jupyter/target/nb_737907.py", "context": "\nfrom sklearn.naive_bayes import BernoulliNB, GaussianNB\n\nnb = BernoulliNB(alpha=2)\n\nnb.fit(X_train, y_train)\n\ny_pred = nb.predict(X_test)\n\nprint('accuracy: {}'.format(accuracy_score(y_test, y_pred)))\n\nprint('f1: {}'.format(f1_score(y_test, y_pred)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 10, 17, 24, 35]}, {"type": "ImportFrom", "value": "sklearn.naive_bayes", "children": [2, 3]}, {"type": "alias", "value": "BernoulliNB"}, {"type": "alias", "value": "GaussianNB"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "nb"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "BernoulliNB"}, {"type": "keyword", "value": "alpha", "children": [9]}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15, 16]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "nb"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "y_pred"}, {"type": "Call", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "nb"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 27]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "Str", "value": "accuracy: {}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [32, 33, 34]}, {"type": "NameLoad", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred"}, {"type": "Expr", "children": [36]}, {"type": "Call", "children": [37, 38]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [39, 42]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "Str", "value": "f1: {}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [43, 44, 45]}, {"type": "NameLoad", "value": "f1_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred"}], "funcs": ["sklearn.naive_bayes.BernoulliNB", "sklearn.naive_bayes.BernoulliNB.fit", "sklearn.naive_bayes.BernoulliNB.predict", "print", "format", "sklearn.metrics.accuracy_score", "print", "format", "sklearn.metrics.f1_score"], "neighbor_cells": [61235], "id": 61236, "header": "", "annotation": [" The above code that uses Random Forest to perform embedding before training LR does not work well", " "]}
{"funcs": ["get_ipython.system", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_903929.py", "target_func": "none_func", "context": "\nget_ipython().system(u'ls')\n", "target_lineno": 48, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "system"}, {"type": "Str", "value": "ls"}], "stage": null, "id": 365842, "neighbor_cells": [-1], "header": "", "annotation": []}
{"funcs": ["MemSys.MemSys"], "file": "/projects/bdata/jupyter/target/nb_634692.py", "target_func": "none_func", "context": "\nmem_sys_b = com_traj.MemSys(u.trajectory, bilayer, plane='xy', frame_path='./test_system/test_output/')\n", "target_lineno": 60, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mem_sys_b"}, {"type": "Call", "children": [4, 7, 10, 11, 13]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "com_traj"}, {"type": "attr", "value": "MemSys"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "u"}, {"type": "attr", "value": "trajectory"}, {"type": "NameLoad", "value": "bilayer"}, {"type": "keyword", "children": [12], "value": "plane"}, {"type": "Str", "value": "xy"}, {"type": "keyword", "children": [14], "value": "frame_path"}, {"type": "Str", "value": "./test_system/test_output/"}], "stage": null, "id": 251054, "neighbor_cells": [251053], "header": "", "annotation": [" The MemSys initializer reqiures the MDAnalysis trajectory object and an atom selection object We suggest also setting the optional frame path variable which is where the COM trajectory data will be stored on disk The com trajectory can be left saved on disk after the session by also setting the frame save flag to True ", " By default the the xy plane is assumed to be the lateral dimension of the bilayer and the z direction is assumed to be along the bilayer normal However these can be specified at initialization via the plane input variable string if your bilayer has a different orientation "]}
{"target_lineno": 296, "file": "/projects/bdata/jupyter/target/nb_206748.py", "context": "\nhide_code\n\nnew_images1 = np.array([get_image('new', x)[0] for x in new_filenames])\n\nnew_images2 = np.array([get_image('new', x)[1] for x in new_filenames])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 20]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "hide_code"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "new_images1"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListComp", "children": [10, 17]}, {"type": "SubscriptLoad", "children": [11, 15]}, {"type": "Call", "children": [12, 13, 14]}, {"type": "NameLoad", "value": "get_image"}, {"type": "Str", "value": "new"}, {"type": "NameLoad", "value": "x"}, {"type": "Index", "children": [16]}, {"type": "Num", "value": "0"}, {"type": "comprehension", "children": [18, 19]}, {"type": "NameStore", "value": "x"}, {"type": "NameLoad", "value": "new_filenames"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "new_images2"}, {"type": "Call", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListComp", "children": [27, 34]}, {"type": "SubscriptLoad", "children": [28, 32]}, {"type": "Call", "children": [29, 30, 31]}, {"type": "NameLoad", "value": "get_image"}, {"type": "Str", "value": "new"}, {"type": "NameLoad", "value": "x"}, {"type": "Index", "children": [33]}, {"type": "Num", "value": "1"}, {"type": "comprehension", "children": [35, 36]}, {"type": "NameStore", "value": "x"}, {"type": "NameLoad", "value": "new_filenames"}], "funcs": ["numpy.array", "get_image", "numpy.array", "get_image"], "neighbor_cells": [113692], "id": 113693, "header": "", "annotation": []}
{"target_lineno": 102, "file": "/projects/bdata/jupyter/target/nb_304578.py", "context": "\np_value = (stats.norm.sf(abs(Zscore)) * 2)\n\np_value\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "p_value"}, {"type": "BinOpMult", "children": [4, 13]}, {"type": "Call", "children": [5, 10]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "stats"}, {"type": "attr", "value": "norm"}, {"type": "attr", "value": "sf"}, {"type": "Call", "children": [11, 12]}, {"type": "NameLoad", "value": "abs"}, {"type": "NameLoad", "value": "Zscore"}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [15]}, {"type": "NameLoad", "value": "p_value"}], "funcs": ["scipy.stats.norm.sf", "abs"], "neighbor_cells": [87699], "id": 87700, "header": "", "annotation": []}
{"target_lineno": 164, "file": "/projects/bdata/jupyter/target/nb_522131.py", "context": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ncategories = ['alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space']\n\nnewsgroups_train = fetch_20newsgroups(subset='train', categories=categories)\n\nvectorizer = TfidfVectorizer()\n\nvectors = vectorizer.fit_transform(newsgroups_train.data)\n\npprint(vectors.shape)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 10, 18, 22, 31]}, {"type": "ImportFrom", "value": "sklearn.feature_extraction.text", "children": [2]}, {"type": "alias", "value": "TfidfVectorizer"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "categories"}, {"type": "ListLoad", "children": [6, 7, 8, 9]}, {"type": "Str", "value": "alt.atheism"}, {"type": "Str", "value": "talk.religion.misc"}, {"type": "Str", "value": "comp.graphics"}, {"type": "Str", "value": "sci.space"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "newsgroups_train"}, {"type": "Call", "children": [13, 14, 16]}, {"type": "NameLoad", "value": "fetch_20newsgroups"}, {"type": "keyword", "value": "subset", "children": [15]}, {"type": "Str", "value": "train"}, {"type": "keyword", "value": "categories", "children": [17]}, {"type": "NameLoad", "value": "categories"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "vectorizer"}, {"type": "Call", "children": [21]}, {"type": "NameLoad", "value": "TfidfVectorizer"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "vectors"}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "vectorizer"}, {"type": "attr", "value": "fit_transform"}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "newsgroups_train"}, {"type": "attr", "value": "data"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "pprint"}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "vectors"}, {"type": "attr", "value": "shape"}], "funcs": ["sklearn.datasets.fetch_20newsgroups", "sklearn.feature_extraction.text.TfidfVectorizer", "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", "pprint.pprint"], "neighbor_cells": [285272], "id": 285273, "header": "", "annotation": []}
{"target_lineno": 46, "file": "/projects/bdata/jupyter/target/nb_626110.py", "context": "\ntrain = pd.read_csv('train.csv')\n\ntrain.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "train"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "train.csv"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv", "pandas.read_csv.head"], "neighbor_cells": [944335], "id": 944336, "header": "", "annotation": []}
{"funcs": ["head"], "file": "/projects/bdata/jupyter/target/nb_399093.py", "target_func": "none_func", "context": "\ndf_categorical.head()\n", "target_lineno": 528, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df_categorical"}, {"type": "attr", "value": "head"}], "stage": null, "id": 595346, "neighbor_cells": [595345], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_77464.py", "target_func": "none_func", "context": "\nfeatures = data[:, 0:(-1)]\n\ntarget = data[:, (-1)]\n", "target_lineno": 93, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "features"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "data"}, {"type": "ExtSlice", "children": [6, 7]}, {"type": "Slice"}, {"type": "Slice", "children": [8, 9]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "-1"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "target"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "data"}, {"type": "ExtSlice", "children": [15, 16]}, {"type": "Slice"}, {"type": "Index", "children": [17]}, {"type": "Num", "value": "-1"}], "stage": null, "id": 888698, "neighbor_cells": [888697], "header": " Split the data", "annotation": [" Preprocessing the data", " Split the data"]}
{"target_lineno": 134, "file": "/projects/bdata/jupyter/target/nb_289000.py", "context": "\nbest_max_depth = gsearch1.best_params_['max_depth']\n\nbest_min_child_weight = gsearch1.best_params_['min_child_weight']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "best_max_depth"}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "gsearch1"}, {"type": "attr", "value": "best_params_"}, {"type": "Index", "children": [8]}, {"type": "Str", "value": "max_depth"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "best_min_child_weight"}, {"type": "SubscriptLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "gsearch1"}, {"type": "attr", "value": "best_params_"}, {"type": "Index", "children": [16]}, {"type": "Str", "value": "min_child_weight"}], "funcs": [], "neighbor_cells": [472095], "id": 472096, "header": "", "annotation": []}
{"target_lineno": 98, "file": "/projects/bdata/jupyter/target/nb_333947.py", "context": "\nX = np.array(df1.drop('class_recurrence-events', axis=1))\n\ny = np.array(df1['class_recurrence-events'])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "Call", "children": [8, 11, 12]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "df1"}, {"type": "attr", "value": "drop"}, {"type": "Str", "value": "class_recurrence-events"}, {"type": "keyword", "value": "axis", "children": [13]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "y"}, {"type": "Call", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "SubscriptLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "df1"}, {"type": "Index", "children": [23]}, {"type": "Str", "value": "class_recurrence-events"}], "funcs": ["numpy.array", "pandas.get_dummies.drop", "numpy.array"], "neighbor_cells": [537243], "id": 537244, "header": "", "annotation": []}
{"target_lineno": 49, "file": "/projects/bdata/jupyter/target/nb_938284.py", "context": "\ny = train.open_account_flg\n\ndel train['_ID_']\n\ndel train['open_account_flg']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "open_account_flg"}, {"type": "Delete", "children": [7]}, {"type": "SubscriptDel", "children": [8, 9]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "_ID_"}, {"type": "Delete", "children": [12]}, {"type": "SubscriptDel", "children": [13, 14]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [15]}, {"type": "Str", "value": "open_account_flg"}], "funcs": [], "neighbor_cells": [432834], "id": 432835, "header": "", "annotation": []}
{"target_lineno": 175, "file": "/projects/bdata/jupyter/target/nb_892714.py", "context": "\n(y_predict - y_test).sum()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "BinOpSub", "children": [5, 6]}, {"type": "NameLoad", "value": "y_predict"}, {"type": "NameLoad", "value": "y_test"}, {"type": "attr", "value": "sum"}], "funcs": ["sum"], "neighbor_cells": [255888], "id": 255889, "header": "", "annotation": []}
{"target_lineno": 122, "file": "/projects/bdata/jupyter/target/nb_793524.py", "context": "\nplt.figure(figsize=(18, 6))\n\nplt.scatter(train_data.ID, train_data.y)\n\nplt.title('ID v/s Testing times', fontsize=20)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10, 21]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "figure"}, {"type": "keyword", "value": "figsize", "children": [7]}, {"type": "TupleLoad", "children": [8, 9]}, {"type": "Num", "value": "18"}, {"type": "Num", "value": "6"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15, 18]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "train_data"}, {"type": "attr", "value": "ID"}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "train_data"}, {"type": "attr", "value": "y"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26, 27]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "ID v/s Testing times"}, {"type": "keyword", "value": "fontsize", "children": [28]}, {"type": "Num", "value": "20"}], "funcs": ["matplotlib.pyplot.figure", "matplotlib.pyplot.scatter", "matplotlib.pyplot.title"], "neighbor_cells": [827365], "id": 827366, "header": "", "annotation": []}
{"target_lineno": 404, "file": "/projects/bdata/jupyter/target/nb_328375.py", "context": "\nprint(classification_report(y_test, eclf1.predict(X_test)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 6, 7]}, {"type": "NameLoad", "value": "classification_report"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "eclf1"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}], "funcs": ["print", "sklearn.metrics.classification_report", "sklearn.ensemble.VotingClassifier.predict"], "neighbor_cells": [562193], "id": 562194, "header": "", "annotation": []}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_963517.py", "target_func": "none_func", "context": "\nget_ipython().magic(u'matplotlib inline')\n\nimport numpy as np\n\nimport scipy\n\nimport matplotlib.pyplot as plt\n\nimport random\n\nimport fileutils\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 8, 11, 13, 16, 18]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "Import", "children": [9]}, {"type": "alias", "children": [10], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [12]}, {"type": "alias", "value": "scipy"}, {"type": "Import", "children": [14]}, {"type": "alias", "children": [15], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "random"}, {"type": "Import", "children": [19]}, {"type": "alias", "value": "fileutils"}], "stage": null, "id": 276711, "neighbor_cells": [-1], "header": "", "annotation": []}
{"target_lineno": 60, "file": "/projects/bdata/jupyter/target/nb_616891.py", "context": "\nkm.cluster_centers_\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "km"}, {"type": "attr", "value": "cluster_centers_"}], "funcs": [], "neighbor_cells": [388725], "id": 388726, "header": "", "annotation": [" What do the clusters seem to be based on Why "]}
{"target_lineno": 68, "file": "/projects/bdata/jupyter/target/nb_672701.py", "context": "\ncol_drop = list(pd.DataFrame(train.isnull().sum(), columns=['missingVal']).query('missingVal>0').sort_values(by='missingVal', ascending=False).index[:4])\n\nprint(('Drop columns: %s because they contain too many missing values' % col_drop))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 35]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "col_drop"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "list"}, {"type": "SubscriptLoad", "children": [6, 33]}, {"type": "AttributeLoad", "children": [7, 32]}, {"type": "Call", "children": [8, 28, 30]}, {"type": "AttributeLoad", "children": [9, 27]}, {"type": "Call", "children": [10, 26]}, {"type": "AttributeLoad", "children": [11, 25]}, {"type": "Call", "children": [12, 15, 22]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "Call", "children": [16]}, {"type": "AttributeLoad", "children": [17, 21]}, {"type": "Call", "children": [18]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "isnull"}, {"type": "attr", "value": "sum"}, {"type": "keyword", "value": "columns", "children": [23]}, {"type": "ListLoad", "children": [24]}, {"type": "Str", "value": "missingVal"}, {"type": "attr", "value": "query"}, {"type": "Str", "value": "missingVal>0"}, {"type": "attr", "value": "sort_values"}, {"type": "keyword", "value": "by", "children": [29]}, {"type": "Str", "value": "missingVal"}, {"type": "keyword", "value": "ascending", "children": [31]}, {"type": "NameConstant"}, {"type": "attr", "value": "index"}, {"type": "Slice", "children": [34]}, {"type": "Num", "value": "4"}, {"type": "Expr", "children": [36]}, {"type": "Call", "children": [37, 38]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [39, 40]}, {"type": "Str", "value": "Drop columns: %s because they contain too many missing values"}, {"type": "NameLoad", "value": "col_drop"}], "funcs": ["list", "pandas.DataFrame.query.sort_values", "pandas.DataFrame.query", "pandas.DataFrame", "pandas.read_csv.isnull.sum", "pandas.read_csv.isnull", "print"], "neighbor_cells": [313941], "id": 313942, "header": "", "annotation": []}
{"funcs": ["xgboost.XGBRegressor"], "file": "/projects/bdata/jupyter/target/nb_802956.py", "target_func": "none_func", "context": "\nxgb5 = xgb.XGBRegressor(learning_rate=0.1, n_estimators=num_rounds, max_depth=6)\n", "target_lineno": 551, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "xgb5"}, {"type": "Call", "children": [4, 7, 9, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "xgb"}, {"type": "attr", "value": "XGBRegressor"}, {"type": "keyword", "children": [8], "value": "learning_rate"}, {"type": "Num", "value": "0.1"}, {"type": "keyword", "children": [10], "value": "n_estimators"}, {"type": "NameLoad", "value": "num_rounds"}, {"type": "keyword", "children": [12], "value": "max_depth"}, {"type": "Num", "value": "6"}], "stage": null, "id": 703557, "neighbor_cells": [703556], "header": " 5 Replicate previous XGBoost results using sklrearn API", "annotation": [" General Parameters ", " booster default gbtree ", " silent default 0 ", " nthread default to maximum number of threads available if not set ", " num pbuffer set automatically by xgboost no need to be set by user ", " num feature set automatically by xgboost no need to be set by user ", " ", " Parameters for Tree Booster ", " eta 0 1 default 0 3 range 0 1 ", " gamma default 0 range 0 ", " max depth default 6 range 1 ", " min child weight default 1 range 0 ", " max delta step default 0 range 0 ", " subsample default 1 range 0 1 ", " colsample bytree default 1 range 0 1 ", " colsample bylevel default 1 range 0 1 ", " lambda default 1 ", " alpha default 0 ", " tree method string default auto Choices auto exact approx ", " sketch eps default 0 03 range 0 1 ", " scale pos weight default 1 ", " updater seq default grow colmaker prune ", " ", " Learning Task Parameters ", " objective reg linear default reg linear ", " base score default 0 5 ", " eval metric mae default according to objective ", " seed default 0 ", " ", " XGBClassifier max depth 3 learning rate 0 1 n estimators 100 silent True objective binary logistic nthread 1 gamma 0 min child weight 1 max delta step 0 subsample 1 colsample bytree 1 colsample bylevel 1 reg alpha 0 reg lambda 1 scale pos weight 1 base score 0 5 seed 0 missing None ", " 5 Replicate previous XGBoost results using sklrearn API"]}
{"funcs": ["pandas.DataFrame.mean.sort_values.plot", "matplotlib.pyplot.xticks", "range", "len", "range", "len"], "file": "/projects/bdata/jupyter/target/nb_834824.py", "target_func": "none_func", "context": "\nax = final_imp.plot(kind='bar', color=colors, width=1, figsize=(10, 7))\n\nplt.xticks(range(0, len(final_imp), 10), range(0, len(final_imp), 10), rotation='horizontal')\n", "target_lineno": 630, "nodes": [{"type": "Module", "children": [1, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [4, 7, 9, 11, 13]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "final_imp"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "children": [8], "value": "kind"}, {"type": "Str", "value": "bar"}, {"type": "keyword", "children": [10], "value": "color"}, {"type": "NameLoad", "value": "colors"}, {"type": "keyword", "children": [12], "value": "width"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [14], "value": "figsize"}, {"type": "TupleLoad", "children": [15, 16]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "7"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22, 29, 36]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xticks"}, {"type": "Call", "children": [23, 24, 25, 28]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "0"}, {"type": "Call", "children": [26, 27]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "final_imp"}, {"type": "Num", "value": "10"}, {"type": "Call", "children": [30, 31, 32, 35]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "0"}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "final_imp"}, {"type": "Num", "value": "10"}, {"type": "keyword", "children": [37], "value": "rotation"}, {"type": "Str", "value": "horizontal"}], "stage": null, "id": 481885, "neighbor_cells": [481884], "header": "", "annotation": []}
{"target_lineno": 80, "file": "/projects/bdata/jupyter/target/nb_790627.py", "context": "\npitchab = pabD[2016].copy()\n\nprint(pitchab['pitch_type'].unique())\n\nptypes = ['FF', 'FS', 'SL', 'FT']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10, 20]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "pitchab"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 9]}, {"type": "SubscriptLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "pabD"}, {"type": "Index", "children": [8]}, {"type": "Num", "value": "2016"}, {"type": "attr", "value": "copy"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [14]}, {"type": "AttributeLoad", "children": [15, 19]}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "pitchab"}, {"type": "Index", "children": [18]}, {"type": "Str", "value": "pitch_type"}, {"type": "attr", "value": "unique"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "ptypes"}, {"type": "ListLoad", "children": [23, 24, 25, 26]}, {"type": "Str", "value": "FF"}, {"type": "Str", "value": "FS"}, {"type": "Str", "value": "SL"}, {"type": "Str", "value": "FT"}], "funcs": ["copy", "print", "unique"], "neighbor_cells": [657458], "id": 657459, "header": " Recategorize 2016 pitches", "annotation": [" Recategorize 2016 pitches"]}
{"funcs": ["pandas.notnull"], "file": "/projects/bdata/jupyter/target/nb_643088.py", "target_func": "none_func", "context": "\ntrn_mean = trn_mean[pd.notnull(trn_mean.Ref_mean)]\n", "target_lineno": 63, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "trn_mean"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "trn_mean"}, {"type": "Index", "children": [6]}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "notnull"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "trn_mean"}, {"type": "attr", "value": "Ref_mean"}], "stage": null, "id": 597919, "neighbor_cells": [597918], "header": "", "annotation": []}
{"funcs": ["type"], "file": "/projects/bdata/jupyter/target/nb_767244.py", "target_func": "none_func", "context": "\ntype(X)\n", "target_lineno": 152, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "type"}, {"type": "NameLoad", "value": "X"}], "stage": null, "id": 92251, "neighbor_cells": [92250], "header": "", "annotation": []}
{"funcs": ["sklearn.svm.SVC", "sklearn.svm.SVC.fit", "sklearn.svm.SVC.predict", "sklearn.svm.SVC.predict", "calculate_accuracy2", "calculate_accuracy2", "mean_square_error", "mean_square_error"], "file": "/projects/bdata/jupyter/target/nb_461049.py", "target_func": "none_func", "context": "\nfrom sklearn.svm import SVC\n\nclf8 = SVC()\n\nclf8.fit(xtrain1, ytrain1)\n\ntrain_result = clf8.predict(xtrain1)\n\ntest_result = clf8.predict(xtest1)\n\nprint 'Support Vector Machine part2'\n\nprint '\\ttraining set accuracy:', calculate_accuracy2(train_result, ytrain1)\n\nprint '\\ttest set accuracy:    ', calculate_accuracy2(test_result, ytest1)\n\nprint '\\ttraining set mean squared error:', mean_square_error(train_result, ytrain1)\n\nprint '\\ttest set mean squared error:    ', mean_square_error(test_result, ytest1)\n", "target_lineno": 1494, "nodes": [{"type": "Module", "children": [1, 3, 7, 14, 21, 28, 30, 36, 42, 48]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.svm"}, {"type": "alias", "value": "SVC"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "clf8"}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "SVC"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12, 13]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "clf8"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "xtrain1"}, {"type": "NameLoad", "value": "ytrain1"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "train_result"}, {"type": "Call", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "clf8"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "xtrain1"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "test_result"}, {"type": "Call", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "clf8"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "xtest1"}, {"type": "Print", "children": [29]}, {"type": "Str", "value": "Support Vector Machine part2"}, {"type": "Print", "children": [31, 32]}, {"type": "Str", "value": "\ttraining set accuracy:"}, {"type": "Call", "children": [33, 34, 35]}, {"type": "NameLoad", "value": "calculate_accuracy2"}, {"type": "NameLoad", "value": "train_result"}, {"type": "NameLoad", "value": "ytrain1"}, {"type": "Print", "children": [37, 38]}, {"type": "Str", "value": "\ttest set accuracy:    "}, {"type": "Call", "children": [39, 40, 41]}, {"type": "NameLoad", "value": "calculate_accuracy2"}, {"type": "NameLoad", "value": "test_result"}, {"type": "NameLoad", "value": "ytest1"}, {"type": "Print", "children": [43, 44]}, {"type": "Str", "value": "\ttraining set mean squared error:"}, {"type": "Call", "children": [45, 46, 47]}, {"type": "NameLoad", "value": "mean_square_error"}, {"type": "NameLoad", "value": "train_result"}, {"type": "NameLoad", "value": "ytrain1"}, {"type": "Print", "children": [49, 50]}, {"type": "Str", "value": "\ttest set mean squared error:    "}, {"type": "Call", "children": [51, 52, 53]}, {"type": "NameLoad", "value": "mean_square_error"}, {"type": "NameLoad", "value": "test_result"}, {"type": "NameLoad", "value": "ytest1"}], "stage": null, "id": 949903, "neighbor_cells": [949902], "header": "", "annotation": []}
{"target_lineno": 253, "file": "/projects/bdata/jupyter/target/nb_440113.py", "context": "\n\ndef doc_to_sentences(txt, tokenizer, remove_stopwords=False):\n    paragraph = tokenizer.tokenize(txt.strip())\n    sentences = []\n    for sentence in paragraph:\n        processed_sentence = txt_to_words(sentence, remove_stopwords)\n        if (len(processed_sentence) > 0):\n            sentences.append(processed_sentence)\n    return sentences\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "doc_to_sentences", "children": [2, 9, 48]}, {"type": "arguments", "children": [3, 7]}, {"type": "args", "children": [4, 5, 6]}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults", "children": [8]}, {"type": "NameConstant"}, {"type": "body", "children": [10, 20, 23, 46]}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "paragraph"}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "tokenizer"}, {"type": "attr", "value": "tokenize"}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "txt"}, {"type": "attr", "value": "strip"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "sentences"}, {"type": "ListLoad"}, {"type": "For", "children": [24, 25, 26]}, {"type": "NameStore", "value": "sentence"}, {"type": "NameLoad", "value": "paragraph"}, {"type": "body", "children": [27, 33]}, {"type": "Assign", "children": [28, 29]}, {"type": "NameStore", "value": "processed_sentence"}, {"type": "Call", "children": [30, 31, 32]}, {"type": "NameLoad", "value": "txt_to_words"}, {"type": "NameLoad", "value": "sentence"}, {"type": "NameLoad", "value": "remove_stopwords"}, {"type": "If", "children": [34, 39]}, {"type": "CompareGt", "children": [35, 38]}, {"type": "Call", "children": [36, 37]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "processed_sentence"}, {"type": "Num", "value": "0"}, {"type": "body", "children": [40]}, {"type": "Expr", "children": [41]}, {"type": "Call", "children": [42, 45]}, {"type": "AttributeLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "sentences"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "processed_sentence"}, {"type": "Return", "children": [47]}, {"type": "NameLoad", "value": "sentences"}, {"type": "decorator_list"}], "funcs": ["tokenizer.tokenize", "txt.strip", "txt_to_words", "len", "append"], "neighbor_cells": [1326621], "id": 1326622, "header": " word2vec prep", "annotation": [" word2vec prep"]}
{"target_lineno": 328, "file": "/projects/bdata/jupyter/target/nb_607387.py", "context": "\nget_most_similar('dft')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "get_most_similar"}, {"type": "Str", "value": "dft"}], "funcs": ["get_most_similar"], "neighbor_cells": [217218], "id": 217219, "header": "", "annotation": []}
{"funcs": ["zip"], "file": "/projects/bdata/jupyter/target/nb_812592.py", "target_func": "none_func", "context": "\nzip(features, gs_log.best_estimator_.coef_[0])\n", "target_lineno": 163, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "zip"}, {"type": "NameLoad", "value": "features"}, {"type": "SubscriptLoad", "children": [6, 11]}, {"type": "AttributeLoad", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "gs_log"}, {"type": "attr", "value": "best_estimator_"}, {"type": "attr", "value": "coef_"}, {"type": "Index", "children": [12]}, {"type": "Num", "value": "0"}], "stage": null, "id": 392660, "neighbor_cells": [392659], "header": " What is the most important feature that contributes to the students probability of admission ", "annotation": [" What is the most important feature that contributes to the students probability of admission "]}
{"funcs": ["numpy.median", "std", "numpy.median", "std"], "file": "/projects/bdata/jupyter/target/nb_342605.py", "target_func": "none_func", "context": "\nppl = (np.median(dfpo_piv[('mean', 'State Bottle Retail')]) - (0.25 * dfpo_piv[('mean', 'State Bottle Retail')].std()))\n\nppu = (np.median(dfpo_piv[('mean', 'State Bottle Retail')]) + (0.25 * dfpo_piv[('mean', 'State Bottle Retail')].std()))\n", "target_lineno": 1449, "nodes": [{"type": "Module", "children": [1, 25]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ppl"}, {"type": "BinOpSub", "children": [4, 14]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "median"}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "dfpo_piv"}, {"type": "Index", "children": [11]}, {"type": "TupleLoad", "children": [12, 13]}, {"type": "Str", "value": "mean"}, {"type": "Str", "value": "State Bottle Retail"}, {"type": "BinOpMult", "children": [15, 16]}, {"type": "Num", "value": "0.25"}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 24]}, {"type": "SubscriptLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "dfpo_piv"}, {"type": "Index", "children": [21]}, {"type": "TupleLoad", "children": [22, 23]}, {"type": "Str", "value": "mean"}, {"type": "Str", "value": "State Bottle Retail"}, {"type": "attr", "value": "std"}, {"type": "Assign", "children": [26, 27]}, {"type": "NameStore", "value": "ppu"}, {"type": "BinOpAdd", "children": [28, 38]}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "median"}, {"type": "SubscriptLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "dfpo_piv"}, {"type": "Index", "children": [35]}, {"type": "TupleLoad", "children": [36, 37]}, {"type": "Str", "value": "mean"}, {"type": "Str", "value": "State Bottle Retail"}, {"type": "BinOpMult", "children": [39, 40]}, {"type": "Num", "value": "0.25"}, {"type": "Call", "children": [41]}, {"type": "AttributeLoad", "children": [42, 48]}, {"type": "SubscriptLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "dfpo_piv"}, {"type": "Index", "children": [45]}, {"type": "TupleLoad", "children": [46, 47]}, {"type": "Str", "value": "mean"}, {"type": "Str", "value": "State Bottle Retail"}, {"type": "attr", "value": "std"}], "stage": null, "id": 487080, "neighbor_cells": [487079], "header": "", "annotation": []}
{"target_lineno": 270, "file": "/projects/bdata/jupyter/target/nb_783126.py", "context": "\nfor c in num_data3.columns:\n    plt.scatter(x=num_data3[c], y=fantasy_points(df_outcome))\n    plt.xlabel(c)\n    plt.ylabel('Fantasy Output')\n    plt.title('Feature Correlation with Output')\n    plt.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 6]}, {"type": "NameStore", "value": "c"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "num_data3"}, {"type": "attr", "value": "columns"}, {"type": "body", "children": [7, 21, 27, 33, 39]}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12, 17]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "keyword", "value": "x", "children": [13]}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "num_data3"}, {"type": "Index", "children": [16]}, {"type": "NameLoad", "value": "c"}, {"type": "keyword", "value": "y", "children": [18]}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "fantasy_points"}, {"type": "NameLoad", "value": "df_outcome"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "NameLoad", "value": "c"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Fantasy Output"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 38]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Feature Correlation with Output"}, {"type": "Expr", "children": [40]}, {"type": "Call", "children": [41]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "funcs": ["matplotlib.pyplot.scatter", "fantasy_points", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.title", "matplotlib.pyplot.show"], "neighbor_cells": [544207], "id": 544208, "header": "", "annotation": [" Correlation Analysis Scatterplots", " Note Standardized Data Displayed"]}
{"target_lineno": 367, "file": "/projects/bdata/jupyter/target/nb_875024.py", "context": "\nsplit_streets[0]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "split_streets"}, {"type": "Index", "children": [5]}, {"type": "Num", "value": "0"}], "funcs": [], "neighbor_cells": [634977], "id": 634978, "header": "", "annotation": []}
{"funcs": ["nltk.tokenize.RegexpTokenizer", "nltk.tokenize.RegexpTokenizer.tokenize", "doc.lower"], "file": "/projects/bdata/jupyter/target/nb_428217.py", "target_func": "none_func", "context": "\ntokenizer = RegexpTokenizer('\\\\w+')\n\ndocuments = [tokenizer.tokenize(doc.lower()) for doc in documents]\n\ndocuments[:2]\n", "target_lineno": 163, "nodes": [{"type": "Module", "children": [1, 6, 20]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "tokenizer"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "RegexpTokenizer"}, {"type": "Str", "value": "\\w+"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "documents"}, {"type": "ListComp", "children": [9, 17]}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "tokenizer"}, {"type": "attr", "value": "tokenize"}, {"type": "Call", "children": [14]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "doc"}, {"type": "attr", "value": "lower"}, {"type": "comprehension", "children": [18, 19]}, {"type": "NameStore", "value": "doc"}, {"type": "NameLoad", "value": "documents"}, {"type": "Expr", "children": [21]}, {"type": "SubscriptLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "documents"}, {"type": "Slice", "children": [24]}, {"type": "Num", "value": "2"}], "stage": null, "id": 72736, "neighbor_cells": [72735], "header": "", "annotation": []}
{"funcs": ["pandas.pivot_table", "pandas.pivot_table.reset_index", "pandas.pivot_table.drop", "pandas.pivot_table.head"], "file": "/projects/bdata/jupyter/target/nb_113590.py", "target_func": "none_func", "context": "\nstore_profit = pd.pivot_table(Iowa, values=['city'], index=['store', 'profit', 'year'], aggfunc=np.sum)\n\nstore_profit.reset_index(inplace=True)\n\nstore_profit.drop('city', axis=1, inplace=True)\n\nstore_profit.head()\n", "target_lineno": 274, "nodes": [{"type": "Module", "children": [1, 20, 27, 37]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "store_profit"}, {"type": "Call", "children": [4, 7, 8, 11, 16]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "pivot_table"}, {"type": "NameLoad", "value": "Iowa"}, {"type": "keyword", "children": [9], "value": "values"}, {"type": "ListLoad", "children": [10]}, {"type": "Str", "value": "city"}, {"type": "keyword", "children": [12], "value": "index"}, {"type": "ListLoad", "children": [13, 14, 15]}, {"type": "Str", "value": "store"}, {"type": "Str", "value": "profit"}, {"type": "Str", "value": "year"}, {"type": "keyword", "children": [17], "value": "aggfunc"}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sum"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "store_profit"}, {"type": "attr", "value": "reset_index"}, {"type": "keyword", "children": [26], "value": "inplace"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 32, 33, 35]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "store_profit"}, {"type": "attr", "value": "drop"}, {"type": "Str", "value": "city"}, {"type": "keyword", "children": [34], "value": "axis"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [36], "value": "inplace"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "store_profit"}, {"type": "attr", "value": "head"}], "stage": null, "id": 271790, "neighbor_cells": [271789], "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.predict", "sklearn.metrics.accuracy_score"], "file": "/projects/bdata/jupyter/target/nb_724832.py", "target_func": "none_func", "context": "\nfrom sklearn import linear_model, datasets\n\nlogreg = linear_model.LogisticRegression(C=100000.0)\n\nlogreg.fit(X_train, y_train)\n\ny_pred_class = logreg.predict(X_test)\n\nfrom sklearn import metrics\n\nprint metrics.accuracy_score(y_test, y_pred_class)\n", "target_lineno": 283, "nodes": [{"type": "Module", "children": [1, 4, 12, 19, 26, 28]}, {"type": "ImportFrom", "children": [2, 3], "value": "sklearn"}, {"type": "alias", "value": "linear_model"}, {"type": "alias", "value": "datasets"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "logreg"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "linear_model"}, {"type": "attr", "value": "LogisticRegression"}, {"type": "keyword", "children": [11], "value": "C"}, {"type": "Num", "value": "100000.0"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 17, 18]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "logreg"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "y_pred_class"}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "logreg"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}, {"type": "ImportFrom", "children": [27], "value": "sklearn"}, {"type": "alias", "value": "metrics"}, {"type": "Print", "children": [29]}, {"type": "Call", "children": [30, 33, 34]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred_class"}], "stage": null, "id": 1042999, "neighbor_cells": [1042998], "header": "", "annotation": []}
{"funcs": ["len", "pickle.dump", "open"], "file": "/projects/bdata/jupyter/target/nb_924979.py", "target_func": "none_func", "context": "\nleaf_station_count = {\n    \n}\n\nfor leaf in leaf_list:\n    leaf_station_count[leaf.id] = len(leaf.stationList)\n\npickle.dump(leaf_station_count, open('leaf_station_count.pkl', 'wb'))\n", "target_lineno": 594, "nodes": [{"type": "Module", "children": [1, 4, 20]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "leaf_station_count"}, {"type": "Dict"}, {"type": "For", "children": [5, 6, 7]}, {"type": "NameStore", "value": "leaf"}, {"type": "NameLoad", "value": "leaf_list"}, {"type": "body", "children": [8]}, {"type": "Assign", "children": [9, 15]}, {"type": "SubscriptStore", "children": [10, 11]}, {"type": "NameLoad", "value": "leaf_station_count"}, {"type": "Index", "children": [12]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "leaf"}, {"type": "attr", "value": "id"}, {"type": "Call", "children": [16, 17]}, {"type": "NameLoad", "value": "len"}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "leaf"}, {"type": "attr", "value": "stationList"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 25, 26]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "dump"}, {"type": "NameLoad", "value": "leaf_station_count"}, {"type": "Call", "children": [27, 28, 29]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "leaf_station_count.pkl"}, {"type": "Str", "value": "wb"}], "stage": null, "id": 155183, "neighbor_cells": [155182], "header": "", "annotation": []}
{"target_lineno": 244, "file": "/projects/bdata/jupyter/target/nb_776616.py", "context": "\nprint(rmse_scores.mean())\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "rmse_scores"}, {"type": "attr", "value": "mean"}], "funcs": ["print", "numpy.sqrt.mean"], "neighbor_cells": [1007390], "id": 1007391, "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_636893.py", "target_func": "none_func", "context": "\nget_ipython().run_line_magic('matplotlib', 'inline')\n", "target_lineno": 9, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}], "stage": null, "id": 23587, "neighbor_cells": [23586], "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_594775.py", "target_func": "none_func", "context": "\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nimport matplotlib.pyplot as plt\n", "target_lineno": 398, "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Import", "children": [10]}, {"type": "alias", "children": [11], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}], "stage": null, "id": 141470, "neighbor_cells": [141469], "header": "", "annotation": []}
{"target_lineno": 114, "file": "/projects/bdata/jupyter/target/nb_854290.py", "context": "\nsns.heatmap(df_rnd.corr(), vmin=(- 1), vmax=1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 10, 13]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "heatmap"}, {"type": "Call", "children": [7]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "df_rnd"}, {"type": "attr", "value": "corr"}, {"type": "keyword", "value": "vmin", "children": [11]}, {"type": "UnaryOpUSub", "children": [12]}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "vmax", "children": [14]}, {"type": "Num", "value": "1"}], "funcs": ["seaborn.heatmap", "corr"], "neighbor_cells": [637417], "id": 637418, "header": "", "annotation": [" By construction there is no correlation between medication and any other covariate "]}
{"funcs": ["matplotlib.pyplot.plot"], "file": "/projects/bdata/jupyter/target/nb_530130.py", "target_func": "none_func", "context": "\nprint s10, s11, s7, s12\n\nplt.plot(amount10)\n", "target_lineno": 427, "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Print", "children": [2, 3, 4, 5]}, {"type": "NameLoad", "value": "s10"}, {"type": "NameLoad", "value": "s11"}, {"type": "NameLoad", "value": "s7"}, {"type": "NameLoad", "value": "s12"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "amount10"}], "stage": null, "id": 517946, "neighbor_cells": [517945], "header": "", "annotation": []}
{"target_lineno": 557, "file": "/projects/bdata/jupyter/target/nb_601203.py", "context": "\nmodel_svm.fit(X_train, y_train)\n\nprint(model_svm.best_score_)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "model_svm"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "model_svm"}, {"type": "attr", "value": "best_score_"}], "funcs": ["sklearn.grid_search.GridSearchCV.fit", "print"], "neighbor_cells": [879114], "id": 879115, "header": "", "annotation": []}
{"target_lineno": 336, "file": "/projects/bdata/jupyter/target/nb_970950.py", "context": "\nlayout = g.layout_lgl()\n\nig.plot(g, layout=layout, vertex_size=5)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "layout"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "g"}, {"type": "attr", "value": "layout_lgl"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12, 13, 15]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "ig"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "g"}, {"type": "keyword", "value": "layout", "children": [14]}, {"type": "NameLoad", "value": "layout"}, {"type": "keyword", "value": "vertex_size", "children": [16]}, {"type": "Num", "value": "5"}], "funcs": ["igraph.Graph.Incidence.layout_lgl", "igraph.plot"], "neighbor_cells": [738973], "id": 738974, "header": "", "annotation": [" A faster algorithm for large networks is the Large Graph Layout algorithm If we want even faster computation and tunable visualizations check out Pajek http mrvar fdv uni lj si pajek or gephi https gephi org "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_574457.py", "target_func": "none_func", "context": "\nprint gs.best_estimator_\n", "target_lineno": 189, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "gs"}, {"type": "attr", "value": "best_estimator_"}], "stage": null, "id": 618812, "neighbor_cells": [618811], "header": " explains which grid search setup worked best", "annotation": [" explains which grid search setup worked best"]}
{"target_lineno": 515, "file": "/projects/bdata/jupyter/target/nb_617128.py", "context": "\ndf_article[(df_article['word_count'] == None)]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "df_article"}, {"type": "Index", "children": [5]}, {"type": "CompareEq", "children": [6, 10]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "df_article"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "word_count"}, {"type": "NameConstant"}], "funcs": [], "neighbor_cells": [506005], "id": 506006, "header": " Visualize Data", "annotation": [" Visualize Data"]}
{"target_lineno": 189, "file": "/projects/bdata/jupyter/target/nb_244081.py", "context": "\neuclidean(ABC[1], ABC[2])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 8]}, {"type": "NameLoad", "value": "euclidean"}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "ABC"}, {"type": "Index", "children": [7]}, {"type": "Num", "value": "1"}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "ABC"}, {"type": "Index", "children": [11]}, {"type": "Num", "value": "2"}], "funcs": ["euclidean"], "neighbor_cells": [1240867], "id": 1240868, "header": "", "annotation": []}
{"target_lineno": 512, "file": "/projects/bdata/jupyter/target/nb_565675.py", "context": "\n(hats.c != c).sum()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 9]}, {"type": "CompareNotEq", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "hats"}, {"type": "attr", "value": "c"}, {"type": "NameLoad", "value": "c"}, {"type": "attr", "value": "sum"}], "funcs": ["sum"], "neighbor_cells": [960722], "id": 960723, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_342562.py", "target_func": "none_func", "context": "\n(jobs_sum_df.shape, title_cols_df.shape)\n", "target_lineno": 832, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "TupleLoad", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "jobs_sum_df"}, {"type": "attr", "value": "shape"}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "title_cols_df"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 907895, "neighbor_cells": [907894], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.dtFC_diff.astype"], "file": "/projects/bdata/jupyter/target/nb_726796.py", "target_func": "none_func", "context": "\ndonors['dtFC_diff'] = donors.dtFC_diff.astype(int)\n", "target_lineno": 127, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "donors"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "dtFC_diff"}, {"type": "Call", "children": [7, 12]}, {"type": "AttributeLoad", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "donors"}, {"type": "attr", "value": "dtFC_diff"}, {"type": "attr", "value": "astype"}, {"type": "NameLoad", "value": "int"}], "stage": null, "id": 677879, "neighbor_cells": [677878], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_366750.py", "target_func": "none_func", "context": "\nsorted_files = filelist_fitsimages[sorted_indexes]\n", "target_lineno": 348, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "sorted_files"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "filelist_fitsimages"}, {"type": "Index", "children": [6]}, {"type": "NameLoad", "value": "sorted_indexes"}], "stage": null, "id": 987724, "neighbor_cells": [987723], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_244321.py", "target_func": "none_func", "context": "\nfor day in days_of_the_week:\n    statement = ('Today is ' + day)\n    print statement\n", "target_lineno": 252, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 4]}, {"type": "NameStore", "value": "day"}, {"type": "NameLoad", "value": "days_of_the_week"}, {"type": "body", "children": [5, 10]}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "statement"}, {"type": "BinOpAdd", "children": [8, 9]}, {"type": "Str", "value": "Today is "}, {"type": "NameLoad", "value": "day"}, {"type": "Print", "children": [11]}, {"type": "NameLoad", "value": "statement"}], "stage": null, "id": 389058, "neighbor_cells": [389057], "header": "", "annotation": [" This code snippet goes through each element of the list called days of the week and assigns it to the variable day It then executes everything in the indented block in this case only one line of code the print statement using those variable assignments When the program has gone through every element of the list it exists the block ", " ", " Python uses a colon followed by indentation level to define code blocks Everything at a higher level of indentation is taken to be in the same block In the above example the block was only a single line but we could have had longer blocks as well "]}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_917499.py", "target_func": "none_func", "context": "\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nimport math\n\nfrom sklearn import mixture\n\nfrom sklearn import metrics\n\nimport sys\n\nfrom scipy import stats\n\nfrom pdb import set_trace\n\nget_ipython().magic(u'matplotlib inline')\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 12, 14, 16, 18, 20, 22]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [8]}, {"type": "alias", "children": [9], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "math"}, {"type": "ImportFrom", "children": [13], "value": "sklearn"}, {"type": "alias", "value": "mixture"}, {"type": "ImportFrom", "children": [15], "value": "sklearn"}, {"type": "alias", "value": "metrics"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "sys"}, {"type": "ImportFrom", "children": [19], "value": "scipy"}, {"type": "alias", "value": "stats"}, {"type": "ImportFrom", "children": [21], "value": "pdb"}, {"type": "alias", "value": "set_trace"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 28]}, {"type": "AttributeLoad", "children": [25, 27]}, {"type": "Call", "children": [26]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "stage": null, "id": 1075783, "neighbor_cells": [-1], "header": "", "annotation": []}
{"target_lineno": 37, "file": "/projects/bdata/jupyter/target/nb_36012.py", "context": "\nclean_data = pd.read_pickle('./clean_data/clean_data.pkl')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "clean_data"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_pickle"}, {"type": "Str", "value": "./clean_data/clean_data.pkl"}], "funcs": ["pandas.read_pickle"], "neighbor_cells": [929095], "id": 929096, "header": "", "annotation": []}
{"target_lineno": 562, "file": "/projects/bdata/jupyter/target/nb_789382.py", "context": "\nimportances = final_gb.get_fscore()\n\nimportances\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "importances"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "final_gb"}, {"type": "attr", "value": "get_fscore"}, {"type": "Expr", "children": [8]}, {"type": "NameLoad", "value": "importances"}], "funcs": ["final_gb.get_fscore"], "neighbor_cells": [1275617], "id": 1275618, "header": "", "annotation": []}
{"funcs": ["sklearn.preprocessing.StandardScaler", "pandas.DataFrame", "sklearn.preprocessing.StandardScaler.fit_transform", "list", "pandas.DataFrame", "sklearn.preprocessing.StandardScaler.transform", "list"], "file": "/projects/bdata/jupyter/target/nb_618531.py", "target_func": "none_func", "context": "\nscaler = StandardScaler()\n\ntrain_scaled = pd.DataFrame(scaler.fit_transform(train_ns), columns=list(train_ns.columns))\n\ntest_scaled = pd.DataFrame(scaler.transform(test_ns), columns=list(test_ns.columns))\n", "target_lineno": 220, "nodes": [{"type": "Module", "children": [1, 5, 22]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "scaler"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "StandardScaler"}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "train_scaled"}, {"type": "Call", "children": [8, 11, 16]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "scaler"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "train_ns"}, {"type": "keyword", "children": [17], "value": "columns"}, {"type": "Call", "children": [18, 19]}, {"type": "NameLoad", "value": "list"}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "train_ns"}, {"type": "attr", "value": "columns"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "test_scaled"}, {"type": "Call", "children": [25, 28, 33]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "scaler"}, {"type": "attr", "value": "transform"}, {"type": "NameLoad", "value": "test_ns"}, {"type": "keyword", "children": [34], "value": "columns"}, {"type": "Call", "children": [35, 36]}, {"type": "NameLoad", "value": "list"}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "test_ns"}, {"type": "attr", "value": "columns"}], "stage": null, "id": 776178, "neighbor_cells": [776177], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_43839.py", "target_func": "none_func", "context": "\ntrain\n", "target_lineno": 190, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "train"}], "stage": null, "id": 1158641, "neighbor_cells": [1158640], "header": "", "annotation": []}
{"target_lineno": 95, "file": "/projects/bdata/jupyter/target/nb_433754.py", "context": "\nimport xgboost as xgb\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "xgboost", "children": [3]}, {"type": "identifier", "value": "xgb"}], "funcs": [], "neighbor_cells": [401074], "id": 401075, "header": " xgboost model ", "annotation": [" ", " ", " xgboost model "]}
{"funcs": ["sklearn.feature_extraction.text.CountVectorizer.get_feature_names", "dict", "sklearn.feature_extraction.text.CountVectorizer.vocabulary_.iteritems", "gensim.matutils.Sparse2Corpus"], "file": "/projects/bdata/jupyter/target/nb_919537.py", "target_func": "none_func", "context": "\ncorpus = vectorizer.get_feature_names()\n\nid2words = dict(((v, k) for (k, v) in vectorizer.vocabulary_.iteritems()))\n\ncorpus_gensim = gensim.matutils.Sparse2Corpus(X, documents_columns=False)\n", "target_lineno": 545, "nodes": [{"type": "Module", "children": [1, 7, 25]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "corpus"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "vectorizer"}, {"type": "attr", "value": "get_feature_names"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "id2words"}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "dict"}, {"type": "GeneratorExp", "children": [12, 15]}, {"type": "TupleLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "v"}, {"type": "NameLoad", "value": "k"}, {"type": "comprehension", "children": [16, 19]}, {"type": "TupleStore", "children": [17, 18]}, {"type": "NameStore", "value": "k"}, {"type": "NameStore", "value": "v"}, {"type": "Call", "children": [20]}, {"type": "AttributeLoad", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "vectorizer"}, {"type": "attr", "value": "vocabulary_"}, {"type": "attr", "value": "iteritems"}, {"type": "Assign", "children": [26, 27]}, {"type": "NameStore", "value": "corpus_gensim"}, {"type": "Call", "children": [28, 33, 34]}, {"type": "AttributeLoad", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "gensim"}, {"type": "attr", "value": "matutils"}, {"type": "attr", "value": "Sparse2Corpus"}, {"type": "NameLoad", "value": "X"}, {"type": "keyword", "children": [35], "value": "documents_columns"}, {"type": "NameLoad", "value": "False"}], "stage": null, "id": 493088, "neighbor_cells": [493087], "header": "", "annotation": []}
{"target_lineno": 240, "file": "/projects/bdata/jupyter/target/nb_824534.py", "context": "\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ndist = (1 - cosine_similarity(tfidf_matrix))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "sklearn.metrics.pairwise", "children": [2]}, {"type": "alias", "value": "cosine_similarity"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "dist"}, {"type": "BinOpSub", "children": [6, 7]}, {"type": "Num", "value": "1"}, {"type": "Call", "children": [8, 9]}, {"type": "NameLoad", "value": "cosine_similarity"}, {"type": "NameLoad", "value": "tfidf_matrix"}], "funcs": ["sklearn.metrics.pairwise.cosine_similarity"], "neighbor_cells": [1216287], "id": 1216288, "header": "", "annotation": []}
{"target_lineno": 98, "file": "/projects/bdata/jupyter/target/nb_806694.py", "context": "\nprint('Training data: ', X_train.shape, y_train.shape)\n\nprint('Test data: ', X_train.shape, y_train.shape)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 8]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Training data: "}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "X_train"}, {"type": "attr", "value": "shape"}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "y_train"}, {"type": "attr", "value": "shape"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 14, 15, 18]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Test data: "}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "X_train"}, {"type": "attr", "value": "shape"}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "y_train"}, {"type": "attr", "value": "shape"}], "funcs": ["print", "print"], "neighbor_cells": [1058887], "id": 1058888, "header": "", "annotation": []}
{"funcs": ["sklearn.neighbors.KNeighborsClassifier", "sklearn.neighbors.KNeighborsClassifier.fit", "sklearn.neighbors.KNeighborsClassifier.predict", "sklearn.metrics.accuracy_score"], "file": "/projects/bdata/jupyter/target/nb_377174.py", "target_func": "none_func", "context": "\nknn = KNeighborsClassifier(n_neighbors=1)\n\nknn.fit(X, y)\n\ny_pred_class = knn.predict(X)\n\nprint metrics.accuracy_score(y, y_pred_class)\n", "target_lineno": 111, "nodes": [{"type": "Module", "children": [1, 7, 14, 21]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "knn"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "KNeighborsClassifier"}, {"type": "keyword", "children": [6], "value": "n_neighbors"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12, 13]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "knn"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "y_pred_class"}, {"type": "Call", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "knn"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X"}, {"type": "Print", "children": [22]}, {"type": "Call", "children": [23, 26, 27]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "y_pred_class"}], "stage": null, "id": 695531, "neighbor_cells": [695530], "header": " KNN K 1 ", "annotation": [" This is known as training accuracy because we are evaluating the model on the same data we used to train the model ", " KNN K 1 "]}
{"target_lineno": 169, "file": "/projects/bdata/jupyter/target/nb_224579.py", "context": "\ncomputeCost(X, y, g)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 6]}, {"type": "NameLoad", "value": "computeCost"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "g"}], "funcs": ["computeCost"], "neighbor_cells": [410016], "id": 410017, "header": "", "annotation": [" Finally we can compute the cost error of the trained model using our fitted parameters "]}
{"target_lineno": 263, "file": "/projects/bdata/jupyter/target/nb_267615.py", "context": "\npredictionsTrain = model.transform(train)\n\npredictionsTest = model.transform(test)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "predictionsTrain"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "transform"}, {"type": "NameLoad", "value": "train"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "predictionsTest"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "transform"}, {"type": "NameLoad", "value": "test"}], "funcs": ["pyspark.ml.Pipeline.fit.transform", "pyspark.ml.Pipeline.fit.transform"], "neighbor_cells": [34264], "id": 34265, "header": "", "annotation": []}
{"target_lineno": 27, "file": "/projects/bdata/jupyter/target/nb_18078.py", "context": "\ndf.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_hdf.head"], "neighbor_cells": [434436], "id": 434437, "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.client_ranking.value_counts.plot", "pandas.read_csv.client_ranking.value_counts", "seaborn.despine"], "file": "/projects/bdata/jupyter/target/nb_342654.py", "target_func": "none_func", "context": "\ndata.client_ranking.value_counts(dropna=False).plot(kind='bar', color='#FD5C64')\n\nsns.despine()\n", "target_lineno": 148, "nodes": [{"type": "Module", "children": [1, 17]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 13, 15]}, {"type": "AttributeLoad", "children": [4, 12]}, {"type": "Call", "children": [5, 10]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "client_ranking"}, {"type": "attr", "value": "value_counts"}, {"type": "keyword", "children": [11], "value": "dropna"}, {"type": "NameLoad", "value": "False"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "children": [14], "value": "kind"}, {"type": "Str", "value": "bar"}, {"type": "keyword", "children": [16], "value": "color"}, {"type": "Str", "value": "#FD5C64"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "despine"}], "stage": null, "id": 14176, "neighbor_cells": [14175], "header": "", "annotation": []}
{"funcs": ["get_ipython.system", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_593971.py", "target_func": "none_func", "context": "\nget_ipython().system('pip install seaborn')\n", "target_lineno": 333, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "system"}, {"type": "Str", "value": "pip install seaborn"}], "stage": null, "id": 1007129, "neighbor_cells": [1007128], "header": "", "annotation": []}
{"funcs": ["range", "len", "class1.append", "class2.append", "class3.append"], "file": "/projects/bdata/jupyter/target/nb_305023.py", "target_func": "none_func", "context": "\n(class1, class2, class3) = ([], [], [])\n\nfor i in range(len(test_freqs)):\n    if (mbk_means_labels[i] == 0):\n        class1.append(i)\n    elif (mbk_means_labels[i] == 1):\n        class2.append(i)\n    else:\n        class3.append(i)\n", "target_lineno": 337, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 6]}, {"type": "TupleStore", "children": [3, 4, 5]}, {"type": "NameStore", "value": "class1"}, {"type": "NameStore", "value": "class2"}, {"type": "NameStore", "value": "class3"}, {"type": "TupleLoad", "children": [7, 8, 9]}, {"type": "ListLoad"}, {"type": "ListLoad"}, {"type": "ListLoad"}, {"type": "For", "children": [11, 12, 17]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "range"}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "test_freqs"}, {"type": "body", "children": [18]}, {"type": "If", "children": [19, 25, 32]}, {"type": "CompareEq", "children": [20, 24]}, {"type": "SubscriptLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "mbk_means_labels"}, {"type": "Index", "children": [23]}, {"type": "NameLoad", "value": "i"}, {"type": "Num", "value": "0"}, {"type": "body", "children": [26]}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "class1"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "i"}, {"type": "orelse", "children": [33]}, {"type": "If", "children": [34, 40, 47]}, {"type": "CompareEq", "children": [35, 39]}, {"type": "SubscriptLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "mbk_means_labels"}, {"type": "Index", "children": [38]}, {"type": "NameLoad", "value": "i"}, {"type": "Num", "value": "1"}, {"type": "body", "children": [41]}, {"type": "Expr", "children": [42]}, {"type": "Call", "children": [43, 46]}, {"type": "AttributeLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "class2"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "i"}, {"type": "orelse", "children": [48]}, {"type": "Expr", "children": [49]}, {"type": "Call", "children": [50, 53]}, {"type": "AttributeLoad", "children": [51, 52]}, {"type": "NameLoad", "value": "class3"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "i"}], "stage": null, "id": 143022, "neighbor_cells": [143021], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_538987.py", "target_func": "none_func", "context": "\nind = [3, 7, 4]\n\nx[ind]\n", "target_lineno": 1696, "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ind"}, {"type": "ListLoad", "children": [4, 5, 6]}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "7"}, {"type": "Num", "value": "4"}, {"type": "Expr", "children": [8]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "x"}, {"type": "Index", "children": [11]}, {"type": "NameLoad", "value": "ind"}], "stage": null, "id": 879410, "neighbor_cells": [879409], "header": "", "annotation": []}
{"target_lineno": 23, "file": "/projects/bdata/jupyter/target/nb_861485.py", "context": "\n\ndef max_pool_2x2(tensor_in):\n    return tf.nn.max_pool(tensor_in, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "max_pool_2x2", "children": [2, 6, 29]}, {"type": "arguments", "children": [3, 5]}, {"type": "args", "children": [4]}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [7]}, {"type": "Return", "children": [8]}, {"type": "Call", "children": [9, 14, 15, 21, 27]}, {"type": "AttributeLoad", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "tf"}, {"type": "attr", "value": "nn"}, {"type": "attr", "value": "max_pool"}, {"type": "NameLoad", "value": "tensor_in"}, {"type": "keyword", "value": "ksize", "children": [16]}, {"type": "ListLoad", "children": [17, 18, 19, 20]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "strides", "children": [22]}, {"type": "ListLoad", "children": [23, 24, 25, 26]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "padding", "children": [28]}, {"type": "Str", "value": "SAME"}, {"type": "decorator_list"}], "funcs": ["tensorflow.nn.max_pool"], "neighbor_cells": [1091670], "id": 1091671, "header": "", "annotation": []}
{"target_lineno": 226, "file": "/projects/bdata/jupyter/target/nb_890493.py", "context": "\ndata_test = pd.DataFrame(ca.iloc[0:12][1])\n\ndata_test.reindex(index=data_test.index[::(- 1)])\n\ndata_test[0] = test\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 17, 30]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data_test"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "SubscriptLoad", "children": [8, 15]}, {"type": "SubscriptLoad", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "ca"}, {"type": "attr", "value": "iloc"}, {"type": "Slice", "children": [13, 14]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "12"}, {"type": "Index", "children": [16]}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "data_test"}, {"type": "attr", "value": "reindex"}, {"type": "keyword", "value": "index", "children": [23]}, {"type": "SubscriptLoad", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "data_test"}, {"type": "attr", "value": "index"}, {"type": "Slice", "children": [28]}, {"type": "UnaryOpUSub", "children": [29]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [31, 35]}, {"type": "SubscriptStore", "children": [32, 33]}, {"type": "NameLoad", "value": "data_test"}, {"type": "Index", "children": [34]}, {"type": "Num", "value": "0"}, {"type": "NameLoad", "value": "test"}], "funcs": ["pandas.DataFrame", "pandas.DataFrame.reindex"], "neighbor_cells": [1103502], "id": 1103503, "header": "", "annotation": []}
{"target_lineno": 23, "file": "/projects/bdata/jupyter/target/nb_672239.py", "context": "\nexecfile('core.py')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "execfile"}, {"type": "Str", "value": "core.py"}], "funcs": ["execfile"], "neighbor_cells": [343965], "id": 343966, "header": "", "annotation": []}
{"funcs": ["replace"], "file": "/projects/bdata/jupyter/target/nb_297202.py", "target_func": "none_func", "context": "\ndata['Graduated'].replace(to_replace=('N', 'Y'), value=(0, 1), inplace=True)\n", "target_lineno": 25, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 9, 13, 17]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "Graduated"}, {"type": "attr", "value": "replace"}, {"type": "keyword", "children": [10], "value": "to_replace"}, {"type": "TupleLoad", "children": [11, 12]}, {"type": "Str", "value": "N"}, {"type": "Str", "value": "Y"}, {"type": "keyword", "children": [14], "value": "value"}, {"type": "TupleLoad", "children": [15, 16]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [18], "value": "inplace"}, {"type": "NameLoad", "value": "True"}], "stage": null, "id": 504701, "neighbor_cells": [504700], "header": "", "annotation": []}
{"funcs": ["timeseries_model.TimeseriesModel.visualize_loss"], "file": "/projects/bdata/jupyter/target/nb_94611.py", "target_func": "none_func", "context": "\nmy_lstm.visualize_loss(result=result, epoch=50)\n", "target_lineno": 431, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 8]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "my_lstm"}, {"type": "attr", "value": "visualize_loss"}, {"type": "keyword", "children": [7], "value": "result"}, {"type": "NameLoad", "value": "result"}, {"type": "keyword", "children": [9], "value": "epoch"}, {"type": "Num", "value": "50"}], "stage": null, "id": 888422, "neighbor_cells": [888421], "header": "", "annotation": []}
{"target_lineno": 378, "file": "/projects/bdata/jupyter/target/nb_20172.py", "context": "\nday.cat.ordered\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "day"}, {"type": "attr", "value": "cat"}, {"type": "attr", "value": "ordered"}], "funcs": [], "neighbor_cells": [829534], "id": 829535, "header": "", "annotation": []}
{"target_lineno": 913, "file": "/projects/bdata/jupyter/target/nb_180846.py", "context": "\ninfluence2 = influence.cooks_distance\n\ninfluence2\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "influence2"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "influence"}, {"type": "attr", "value": "cooks_distance"}, {"type": "Expr", "children": [7]}, {"type": "NameLoad", "value": "influence2"}], "funcs": [], "neighbor_cells": [1127245], "id": 1127246, "header": "", "annotation": []}
{"target_lineno": 102, "file": "/projects/bdata/jupyter/target/nb_920310.py", "context": "\ndf1.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df1"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.DataFrame.rename.reset_index.query.rename.head"], "neighbor_cells": [84420], "id": 84421, "header": "", "annotation": []}
{"target_lineno": 44, "file": "/projects/bdata/jupyter/target/nb_301509.py", "context": "\nplt.scatter(boston.data[:, 5], boston.target)\n\nplt.ylabel('Prices in $1000s')\n\nplt.xlabel('Number of rooms')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 17, 23]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 14]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "SubscriptLoad", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "boston"}, {"type": "attr", "value": "data"}, {"type": "ExtSlice", "children": [11, 12]}, {"type": "Slice"}, {"type": "Index", "children": [13]}, {"type": "Num", "value": "5"}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "boston"}, {"type": "attr", "value": "target"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Prices in $1000s"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "Number of rooms"}], "funcs": ["matplotlib.pyplot.scatter", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel"], "neighbor_cells": [852187], "id": 852188, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_212451.py", "target_func": "none_func", "context": "\nlog_reg = 2\n\nlda = 3\n\nqda = 4\n\nknn = 5\n\nrf = 6\n\nboost = 7\n\nsvm = 8\n", "target_lineno": 686, "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 13, 16, 19]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "log_reg"}, {"type": "Num", "value": "2"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "lda"}, {"type": "Num", "value": "3"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "qda"}, {"type": "Num", "value": "4"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "knn"}, {"type": "Num", "value": "5"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "rf"}, {"type": "Num", "value": "6"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "boost"}, {"type": "Num", "value": "7"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "svm"}, {"type": "Num", "value": "8"}], "stage": null, "id": 1147444, "neighbor_cells": [1147443], "header": " Other Models", "annotation": [" Other Models"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_154988.py", "target_func": "none_func", "context": "\nfor col in HEADER[24:]:\n    del test[('old_1_' + col)], test[('old_2_' + col)], test[('old_3_' + col)]\n    del train[('old_1_' + col)], train[('old_2_' + col)], train[('old_3_' + col)]\n", "target_lineno": 124, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 7]}, {"type": "NameStore", "value": "col"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "HEADER"}, {"type": "Slice", "children": [6]}, {"type": "Num", "value": "24"}, {"type": "body", "children": [8, 27]}, {"type": "Delete", "children": [9, 15, 21]}, {"type": "SubscriptDel", "children": [10, 11]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [12]}, {"type": "BinOpAdd", "children": [13, 14]}, {"type": "Str", "value": "old_1_"}, {"type": "NameLoad", "value": "col"}, {"type": "SubscriptDel", "children": [16, 17]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [18]}, {"type": "BinOpAdd", "children": [19, 20]}, {"type": "Str", "value": "old_2_"}, {"type": "NameLoad", "value": "col"}, {"type": "SubscriptDel", "children": [22, 23]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [24]}, {"type": "BinOpAdd", "children": [25, 26]}, {"type": "Str", "value": "old_3_"}, {"type": "NameLoad", "value": "col"}, {"type": "Delete", "children": [28, 34, 40]}, {"type": "SubscriptDel", "children": [29, 30]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [31]}, {"type": "BinOpAdd", "children": [32, 33]}, {"type": "Str", "value": "old_1_"}, {"type": "NameLoad", "value": "col"}, {"type": "SubscriptDel", "children": [35, 36]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [37]}, {"type": "BinOpAdd", "children": [38, 39]}, {"type": "Str", "value": "old_2_"}, {"type": "NameLoad", "value": "col"}, {"type": "SubscriptDel", "children": [41, 42]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [43]}, {"type": "BinOpAdd", "children": [44, 45]}, {"type": "Str", "value": "old_3_"}, {"type": "NameLoad", "value": "col"}], "stage": null, "id": 766977, "neighbor_cells": [766976], "header": "", "annotation": []}
{"target_lineno": 749, "file": "/projects/bdata/jupyter/target/nb_775551.py", "context": "\nget_ipython().run_line_magic('time', '')\n\nclf.predict(X_test[0])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "time"}, {"type": "Str", "value": ""}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "predict"}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "X_test"}, {"type": "Index", "children": [17]}, {"type": "Num", "value": "0"}], "funcs": ["get_ipython.run_line_magic", "get_ipython", "sklearn.tree.DecisionTreeClassifier.predict"], "neighbor_cells": [1062560], "id": 1062561, "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.rename"], "file": "/projects/bdata/jupyter/target/nb_901165.py", "target_func": "none_func", "context": "\nbikes.rename(columns={\n    'count': 'total',\n}, inplace=True)\n\nbikes.columns\n", "target_lineno": 61, "nodes": [{"type": "Module", "children": [1, 12]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 10]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "bikes"}, {"type": "attr", "value": "rename"}, {"type": "keyword", "children": [7], "value": "columns"}, {"type": "Dict", "children": [8, 9]}, {"type": "Str", "value": "count"}, {"type": "Str", "value": "total"}, {"type": "keyword", "children": [11], "value": "inplace"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [13]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "bikes"}, {"type": "attr", "value": "columns"}], "stage": null, "id": 171318, "neighbor_cells": [171317], "header": "", "annotation": [" Questions ", " ", " What does each observation represent ", " What is the response variable as defined by Kaggle ", " How many features are there "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_780411.py", "target_func": "none_func", "context": "\nridge_classifier.intercept_\n", "target_lineno": 110, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "ridge_classifier"}, {"type": "attr", "value": "intercept_"}], "stage": null, "id": 715899, "neighbor_cells": [715898], "header": "", "annotation": []}
{"target_lineno": 238, "file": "/projects/bdata/jupyter/target/nb_272491.py", "context": "\nfinal_model_loso = all_results_loso['Exp_4096_0.5_8']\n\nplot_confusion_matrix(final_model_loso['Confusion_Matrix'], labels, title_text='Leave one subject out - Confusion_Matrix ')\n\nplot_per_class_user(final_model_loso)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "final_model_loso"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "all_results_loso"}, {"type": "Index", "children": [6]}, {"type": "Str", "value": "Exp_4096_0.5_8"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 10, 14, 15]}, {"type": "NameLoad", "value": "plot_confusion_matrix"}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "final_model_loso"}, {"type": "Index", "children": [13]}, {"type": "Str", "value": "Confusion_Matrix"}, {"type": "NameLoad", "value": "labels"}, {"type": "keyword", "value": "title_text", "children": [16]}, {"type": "Str", "value": "Leave one subject out - Confusion_Matrix "}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "plot_per_class_user"}, {"type": "NameLoad", "value": "final_model_loso"}], "funcs": ["plot_confusion_matrix", "plot_per_class_user"], "neighbor_cells": [793931], "id": 793932, "header": " Final Model", "annotation": [" Final Model"]}
{"target_lineno": 273, "file": "/projects/bdata/jupyter/target/nb_789309.py", "context": "\ninputevents_cv = pd.merge(inputevents_cv, d_items, on='ITEMID')\n\ninputevents_mv = pd.merge(inputevents_mv, d_items, on='ITEMID')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "inputevents_cv"}, {"type": "Call", "children": [4, 7, 8, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "merge"}, {"type": "NameLoad", "value": "inputevents_cv"}, {"type": "NameLoad", "value": "d_items"}, {"type": "keyword", "value": "on", "children": [10]}, {"type": "Str", "value": "ITEMID"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "inputevents_mv"}, {"type": "Call", "children": [14, 17, 18, 19]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "merge"}, {"type": "NameLoad", "value": "inputevents_mv"}, {"type": "NameLoad", "value": "d_items"}, {"type": "keyword", "value": "on", "children": [20]}, {"type": "Str", "value": "ITEMID"}], "funcs": ["pandas.merge", "pandas.merge"], "neighbor_cells": [574142], "id": 574143, "header": "", "annotation": [" INPUTEVENTS CV AND MV "]}
{"target_lineno": 480, "file": "/projects/bdata/jupyter/target/nb_814462.py", "context": "\nfreq\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "freq"}], "funcs": [], "neighbor_cells": [716849], "id": 716850, "header": "", "annotation": []}
{"funcs": ["IPython.display.Image"], "file": "/projects/bdata/jupyter/target/nb_920306.py", "target_func": "none_func", "context": "\nImage(filename='V3_struct.png', width=800)\n", "target_lineno": 96, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 6]}, {"type": "NameLoad", "value": "Image"}, {"type": "keyword", "children": [5], "value": "filename"}, {"type": "Str", "value": "V3_struct.png"}, {"type": "keyword", "children": [7], "value": "width"}, {"type": "Num", "value": "800"}], "stage": null, "id": 220857, "neighbor_cells": [220856], "header": "", "annotation": [" and two trajectories of the V3 loop of HIV 1 35 amino acids closed by a disulfide bridge simulated with Gromacs v4 6 5", " ", " V3 Gromacs1 stripped xtc", " V3 Gromacs2 stripped xtc", " V3 Gromacs1 stripped pdb", " V3 Gromacs2 stripped pdb", " ", " are stored in ", " ", " Trajectories "]}
{"funcs": ["sklearn.naive_bayes.MultinomialNB", "sklearn.naive_bayes.MultinomialNB.fit", "sklearn.naive_bayes.MultinomialNB.score"], "file": "/projects/bdata/jupyter/target/nb_488656.py", "target_func": "none_func", "context": "\nfrom sklearn.naive_bayes import MultinomialNB\n\nclf = MultinomialNB()\n\nclf.fit(train_tf_sol2, train_sol2['label'])\n\nprint clf.score(test_tf_sol2, test_sol2['label'])\n", "target_lineno": 155, "nodes": [{"type": "Module", "children": [1, 3, 7, 17]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.naive_bayes"}, {"type": "alias", "value": "MultinomialNB"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "clf"}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "MultinomialNB"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12, 13]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "train_tf_sol2"}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "train_sol2"}, {"type": "Index", "children": [16]}, {"type": "Str", "value": "label"}, {"type": "Print", "children": [18]}, {"type": "Call", "children": [19, 22, 23]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "score"}, {"type": "NameLoad", "value": "test_tf_sol2"}, {"type": "SubscriptLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "test_sol2"}, {"type": "Index", "children": [26]}, {"type": "Str", "value": "label"}], "stage": null, "id": 690399, "neighbor_cells": [690398], "header": "", "annotation": []}
{"target_lineno": 207, "file": "/projects/bdata/jupyter/target/nb_698302.py", "context": "\nmodel = sm.tsa.arima_model.ARIMA(df.Sales, (1, 0, 1)).fit()\n\nmodel.summary()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 21]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 20]}, {"type": "Call", "children": [6, 13, 16]}, {"type": "AttributeLoad", "children": [7, 12]}, {"type": "AttributeLoad", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "sm"}, {"type": "attr", "value": "tsa"}, {"type": "attr", "value": "arima_model"}, {"type": "attr", "value": "ARIMA"}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "Sales"}, {"type": "TupleLoad", "children": [17, 18, 19]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "fit"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "summary"}], "funcs": ["statsmodels.tsa.arima_model.ARIMA.fit", "statsmodels.tsa.arima_model.ARIMA", "statsmodels.tsa.arima_model.ARIMA.fit.summary"], "neighbor_cells": [295112], "id": 295113, "header": "", "annotation": [" Now we learn two coefficients one for the AR 1 component and one for the MA 1 component ", " Activity", " ", " 1 Take a moment to look at the coefficients of our new model", " 1 Offer an interpretation of this model", " Answer ", " ", " Remember that this is an AR 1 MA 1 model The AR coefficient represents dependency on the last value and the MA component represents any spikes independent of the last value", " The coefficients here are 0 69 for the AR component and 0 03 for the MA component", " The AR coefficient is the same as before decreasing values ", " The MA component is fairly small which we should have expected from the autocorrelation plots ", " We can also use statsmodels to fit ARIMA models Let s start by using ARIMA 1 0 1 to fit an ARMA 1 1 model "]}
{"funcs": ["est.predict_proba"], "file": "/projects/bdata/jupyter/target/nb_718847.py", "target_func": "none_func", "context": "\n\ndef t_repredict(est, t, xtest):\n    output = []\n    probs = est.predict_proba(xtest)\n    p0 = probs[:, 0]\n    p1 = probs[:, 1]\n    ypred = ((p1 > t) * 1)\n    return (ypred, p1)\n", "target_lineno": 995, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 8, 46], "value": "t_repredict"}, {"type": "arguments", "children": [3, 7]}, {"type": "args", "children": [4, 5, 6]}, {"type": "NameParam", "value": "est"}, {"type": "NameParam", "value": "t"}, {"type": "NameParam", "value": "xtest"}, {"type": "defaults"}, {"type": "body", "children": [9, 12, 19, 27, 35, 42]}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "output"}, {"type": "ListLoad"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "probs"}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "est"}, {"type": "attr", "value": "predict_proba"}, {"type": "NameLoad", "value": "xtest"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "p0"}, {"type": "SubscriptLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "probs"}, {"type": "ExtSlice", "children": [24, 25]}, {"type": "Slice"}, {"type": "Index", "children": [26]}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [28, 29]}, {"type": "NameStore", "value": "p1"}, {"type": "SubscriptLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "probs"}, {"type": "ExtSlice", "children": [32, 33]}, {"type": "Slice"}, {"type": "Index", "children": [34]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [36, 37]}, {"type": "NameStore", "value": "ypred"}, {"type": "BinOpMult", "children": [38, 41]}, {"type": "CompareGt", "children": [39, 40]}, {"type": "NameLoad", "value": "p1"}, {"type": "NameLoad", "value": "t"}, {"type": "Num", "value": "1"}, {"type": "Return", "children": [43]}, {"type": "TupleLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "ypred"}, {"type": "NameLoad", "value": "p1"}, {"type": "decorator_list"}], "stage": null, "id": 1106775, "neighbor_cells": [1106774], "header": "", "annotation": []}
{"target_lineno": 796, "file": "/projects/bdata/jupyter/target/nb_344617.py", "context": "\nnp.save('test.npy', arr2)\n\narr2n = np.load('test.npy')\n\nprint('Any differences?', np.any((arr2 - arr2n)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 15]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "save"}, {"type": "Str", "value": "test.npy"}, {"type": "NameLoad", "value": "arr2"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "arr2n"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "load"}, {"type": "Str", "value": "test.npy"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 18, 19]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Any differences?"}, {"type": "Call", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "any"}, {"type": "BinOpSub", "children": [24, 25]}, {"type": "NameLoad", "value": "arr2"}, {"type": "NameLoad", "value": "arr2n"}], "funcs": ["numpy.save", "numpy.load", "print", "numpy.any"], "neighbor_cells": [134277], "id": 134278, "header": "", "annotation": [" Binary Data", " ", " For binary data Numpy provides the np save and np savez routines The first saves a single array to a file with npy extension while the latter can be used to save a group of arrays into a single file with npz extension The files created with these routines can then be read with the np load function ", " ", " Let us first see how to use the simpler np save function to save a single array "]}
{"target_lineno": 173, "file": "/projects/bdata/jupyter/target/nb_77848.py", "context": "\nplt.plot(pp, y_test, 'b.', alpha=0.1)\n\nplt.xlabel('predicted')\n\nplt.ylabel('observed')\n\nplt.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11, 17, 23]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7, 8, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "pp"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Str", "value": "b."}, {"type": "keyword", "value": "alpha", "children": [10]}, {"type": "Num", "value": "0.1"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "predicted"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "observed"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "funcs": ["matplotlib.pylab.plot", "matplotlib.pylab.xlabel", "matplotlib.pylab.ylabel", "matplotlib.pylab.show"], "neighbor_cells": [838059], "id": 838060, "header": "", "annotation": []}
{"target_lineno": 18, "file": "/projects/bdata/jupyter/target/nb_187759.py", "context": "\nimport glob\n\nimport numpy as np\n\nimport cv2\n\nimport matplotlib.pyplot as plt\n\nimport matplotlib.image as mpimg\n\nimport time\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfrom skimage.feature import hog\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn import tree\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom sklearn.neural_network import MLPClassifier\n\nfrom scipy.ndimage.measurements import label\n\nget_ipython().magic('matplotlib inline')\n\nfrom moviepy.editor import VideoFileClip\n\nfrom IPython.display import HTML\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 6, 8, 11, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 45, 47]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "glob"}, {"type": "Import", "children": [4]}, {"type": "alias", "value": "numpy", "children": [5]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [7]}, {"type": "alias", "value": "cv2"}, {"type": "Import", "children": [9]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [10]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [12]}, {"type": "alias", "value": "matplotlib.image", "children": [13]}, {"type": "identifier", "value": "mpimg"}, {"type": "Import", "children": [15]}, {"type": "alias", "value": "time"}, {"type": "ImportFrom", "value": "mpl_toolkits.mplot3d", "children": [17]}, {"type": "alias", "value": "Axes3D"}, {"type": "ImportFrom", "value": "skimage.feature", "children": [19]}, {"type": "alias", "value": "hog"}, {"type": "ImportFrom", "value": "sklearn.preprocessing", "children": [21]}, {"type": "alias", "value": "StandardScaler"}, {"type": "ImportFrom", "value": "sklearn.model_selection", "children": [23]}, {"type": "alias", "value": "train_test_split"}, {"type": "ImportFrom", "value": "sklearn.svm", "children": [25]}, {"type": "alias", "value": "LinearSVC"}, {"type": "ImportFrom", "value": "sklearn", "children": [27]}, {"type": "alias", "value": "tree"}, {"type": "ImportFrom", "value": "sklearn.ensemble", "children": [29]}, {"type": "alias", "value": "RandomForestClassifier"}, {"type": "ImportFrom", "value": "sklearn.neighbors", "children": [31]}, {"type": "alias", "value": "KNeighborsClassifier"}, {"type": "ImportFrom", "value": "sklearn.naive_bayes", "children": [33]}, {"type": "alias", "value": "GaussianNB"}, {"type": "ImportFrom", "value": "sklearn.neural_network", "children": [35]}, {"type": "alias", "value": "MLPClassifier"}, {"type": "ImportFrom", "value": "scipy.ndimage.measurements", "children": [37]}, {"type": "alias", "value": "label"}, {"type": "Expr", "children": [39]}, {"type": "Call", "children": [40, 44]}, {"type": "AttributeLoad", "children": [41, 43]}, {"type": "Call", "children": [42]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "ImportFrom", "value": "moviepy.editor", "children": [46]}, {"type": "alias", "value": "VideoFileClip"}, {"type": "ImportFrom", "value": "IPython.display", "children": [48]}, {"type": "alias", "value": "HTML"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [-1], "id": 370387, "header": " Initial Imports", "annotation": [" coding utf 8", " Project 5 Vehicle Detection and Tracking", " Vehicle Detection Project", " ", " The goals steps of this project are the following ", " ", " 1 Perform a Histogram of Oriented Gradients HOG feature extraction on a labeled training set of images and train a classifier Linear SVM classifier", " 2 Optionally you can also apply a color transform and append binned color features as well as histograms of color to your HOG feature vector ", " Note for those first two steps don t forget to normalize your features and randomize a selection for training and testing ", " 3 Implement a sliding window technique and use your trained classifier to search for vehicles in images ", " 4 Run your pipeline on a video stream start with the test video mp4 and later implement on full project video mp4 and create a heat map of recurring detections frame by frame to reject outliers and follow detected vehicles ", " Estimate a bounding box for vehicles detected ", " Initial Imports"]}
{"target_lineno": 407, "file": "/projects/bdata/jupyter/target/nb_652400.py", "context": "\nprint(res[:1000, :].sum(axis=0), res[1000:, :].sum(axis=0))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 15]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 13]}, {"type": "AttributeLoad", "children": [6, 12]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "res"}, {"type": "ExtSlice", "children": [9, 11]}, {"type": "Slice", "children": [10]}, {"type": "Num", "value": "1000"}, {"type": "Slice"}, {"type": "attr", "value": "sum"}, {"type": "keyword", "value": "axis", "children": [14]}, {"type": "Num", "value": "0"}, {"type": "Call", "children": [16, 24]}, {"type": "AttributeLoad", "children": [17, 23]}, {"type": "SubscriptLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "res"}, {"type": "ExtSlice", "children": [20, 22]}, {"type": "Slice", "children": [21]}, {"type": "Num", "value": "1000"}, {"type": "Slice"}, {"type": "attr", "value": "sum"}, {"type": "keyword", "value": "axis", "children": [25]}, {"type": "Num", "value": "0"}], "funcs": ["print", "sum", "sum"], "neighbor_cells": [863651], "id": 863652, "header": "", "annotation": []}
{"target_lineno": 119, "file": "/projects/bdata/jupyter/target/nb_551525.py", "context": "\n\ndef infer_z(smoothing):\n    with model:\n        smoothing_param.set_value(smoothing)\n        res = pm.find_MAP(vars=[z], fmin=optimize.fmin_l_bfgs_b)\n        return res['z']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "infer_z", "children": [2, 6, 36]}, {"type": "arguments", "children": [3, 5]}, {"type": "args", "children": [4]}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [7]}, {"type": "With", "children": [8, 11]}, {"type": "items", "children": [9]}, {"type": "withitem", "children": [10]}, {"type": "NameLoad", "value": "model"}, {"type": "body", "children": [12, 18, 31]}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "smoothing_param"}, {"type": "attr", "value": "set_value"}, {"type": "NameLoad", "value": "smoothing"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "res"}, {"type": "Call", "children": [21, 24, 27]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "pm"}, {"type": "attr", "value": "find_MAP"}, {"type": "keyword", "value": "vars", "children": [25]}, {"type": "ListLoad", "children": [26]}, {"type": "NameLoad", "value": "z"}, {"type": "keyword", "value": "fmin", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "optimize"}, {"type": "attr", "value": "fmin_l_bfgs_b"}, {"type": "Return", "children": [32]}, {"type": "SubscriptLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "res"}, {"type": "Index", "children": [35]}, {"type": "Str", "value": "z"}, {"type": "decorator_list"}], "funcs": ["theano.shared.set_value", "pymc3.find_MAP"], "neighbor_cells": [1158467], "id": 1158468, "header": "", "annotation": [" Let s also make a helper function for inferring the most likely values of z "]}
{"target_lineno": 459, "file": "/projects/bdata/jupyter/target/nb_564073.py", "context": "\ndf = load_and_prepare_data()\n\nX = df.drop('CLASS', axis=1).as_matrix()\n\ny = df.CLASS\n\n(X_train, X_test, y_train, y_test) = train_test_split(X, y, stratify=y, test_size=0.4, random_state=RANDOM_STATE)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 5, 17, 22]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "load_and_prepare_data"}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [8]}, {"type": "AttributeLoad", "children": [9, 16]}, {"type": "Call", "children": [10, 13, 14]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "drop"}, {"type": "Str", "value": "CLASS"}, {"type": "keyword", "value": "axis", "children": [15]}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "as_matrix"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "y"}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "CLASS"}, {"type": "Assign", "children": [23, 28]}, {"type": "TupleStore", "children": [24, 25, 26, 27]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [29, 30, 31, 32, 34, 36]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "value": "stratify", "children": [33]}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "value": "test_size", "children": [35]}, {"type": "Num", "value": "0.4"}, {"type": "keyword", "value": "random_state", "children": [37]}, {"type": "NameLoad", "value": "RANDOM_STATE"}], "funcs": ["load_and_prepare_data", "load_and_prepare_data.drop.as_matrix", "load_and_prepare_data.drop", "sklearn.model_selection.train_test_split"], "neighbor_cells": [80862], "id": 80863, "header": "", "annotation": [" recall Blagging Classifier ", " imbalanced learn", " http contrib scikit learn org imbalanced learn install html imbalanced learn over under ", " ", " ", " ", " Under sampling methods ", " http contrib scikit learn org imbalanced learn generated imblearn under sampling ClusterCentroids html ", " http contrib scikit learn org imbalanced learn api html module imblearn under sampling prototype selection ", " ", " ", " Over sampling methods http contrib scikit learn org imbalanced learn generated imblearn over sampling RandomOverSampler html SMOTE http contrib scikit learn org imbalanced learn generated imblearn over sampling SMOTE html https www cs cmu edu afs cs project jair pub volume16 chawla02a html node6 html SECTION00042000000000000000 ", " "]}
{"target_lineno": 1117, "file": "/projects/bdata/jupyter/target/nb_557531.py", "context": "\nmetrics.f1_score(iris.target, predictions, average=None)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 9, 10]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "f1_score"}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "iris"}, {"type": "attr", "value": "target"}, {"type": "NameLoad", "value": "predictions"}, {"type": "keyword", "value": "average", "children": [11]}, {"type": "NameConstant"}], "funcs": ["sklearn.metrics.f1_score"], "neighbor_cells": [298692], "id": 298693, "header": "", "annotation": []}
{"target_lineno": 452, "file": "/projects/bdata/jupyter/target/nb_557726.py", "context": "\nX.head(10)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "10"}], "funcs": ["pandas.concat.head"], "neighbor_cells": [1302375], "id": 1302376, "header": " What do things look like now ", "annotation": [" What do things look like now "]}
{"funcs": ["FeatureUnion", "new_anova", "sklearn.pipeline.Pipeline", "sklearn.svm.SVC", "sklearn.grid_search.GridSearchCV", "sklearn.grid_search.RandomizedSearchCV", "sklearn.grid_search.RandomizedSearchCV.fit"], "file": "/projects/bdata/jupyter/target/nb_783115.py", "target_func": "none_func", "context": "\nanovas_450 = FeatureUnion([(m, new_anova(m, k=150)) for m in index_map])\n\nfeature_selection_svc_450 = Pipeline([('feature_selection', anovas_450), ('svc', SVC())])\n\ngrid_450 = GridSearchCV(feature_selection_svc_450, param_grid=param_grid, cv=cv, scoring=scorer)\n\nfrom sklearn.grid_search import RandomizedSearchCV\n\nrandom_450 = RandomizedSearchCV(feature_selection_svc_450, param_distributions=param_grid, cv=cv, scoring=scorer)\n\nrandom_450.fit(mat, labels)\n", "target_lineno": 644, "nodes": [{"type": "Module", "children": [1, 16, 28, 39, 41, 52]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "anovas_450"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "FeatureUnion"}, {"type": "ListComp", "children": [6, 13]}, {"type": "TupleLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "m"}, {"type": "Call", "children": [9, 10, 11]}, {"type": "NameLoad", "value": "new_anova"}, {"type": "NameLoad", "value": "m"}, {"type": "keyword", "children": [12], "value": "k"}, {"type": "Num", "value": "150"}, {"type": "comprehension", "children": [14, 15]}, {"type": "NameStore", "value": "m"}, {"type": "NameLoad", "value": "index_map"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "feature_selection_svc_450"}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "Pipeline"}, {"type": "ListLoad", "children": [21, 24]}, {"type": "TupleLoad", "children": [22, 23]}, {"type": "Str", "value": "feature_selection"}, {"type": "NameLoad", "value": "anovas_450"}, {"type": "TupleLoad", "children": [25, 26]}, {"type": "Str", "value": "svc"}, {"type": "Call", "children": [27]}, {"type": "NameLoad", "value": "SVC"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "grid_450"}, {"type": "Call", "children": [31, 32, 33, 35, 37]}, {"type": "NameLoad", "value": "GridSearchCV"}, {"type": "NameLoad", "value": "feature_selection_svc_450"}, {"type": "keyword", "children": [34], "value": "param_grid"}, {"type": "NameLoad", "value": "param_grid"}, {"type": "keyword", "children": [36], "value": "cv"}, {"type": "NameLoad", "value": "cv"}, {"type": "keyword", "children": [38], "value": "scoring"}, {"type": "NameLoad", "value": "scorer"}, {"type": "ImportFrom", "children": [40], "value": "sklearn.grid_search"}, {"type": "alias", "value": "RandomizedSearchCV"}, {"type": "Assign", "children": [42, 43]}, {"type": "NameStore", "value": "random_450"}, {"type": "Call", "children": [44, 45, 46, 48, 50]}, {"type": "NameLoad", "value": "RandomizedSearchCV"}, {"type": "NameLoad", "value": "feature_selection_svc_450"}, {"type": "keyword", "children": [47], "value": "param_distributions"}, {"type": "NameLoad", "value": "param_grid"}, {"type": "keyword", "children": [49], "value": "cv"}, {"type": "NameLoad", "value": "cv"}, {"type": "keyword", "children": [51], "value": "scoring"}, {"type": "NameLoad", "value": "scorer"}, {"type": "Expr", "children": [53]}, {"type": "Call", "children": [54, 57, 58]}, {"type": "AttributeLoad", "children": [55, 56]}, {"type": "NameLoad", "value": "random_450"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "mat"}, {"type": "NameLoad", "value": "labels"}], "stage": null, "id": 370176, "neighbor_cells": [370175], "header": " Here C gamma are found through cv", "annotation": [" Here C gamma are found through cv"]}
{"funcs": ["readData", "readData.head"], "file": "/projects/bdata/jupyter/target/nb_650487.py", "target_func": "none_func", "context": "\nfull_train_data = readData('C:\\\\Users\\\\Tim\\\\Documents\\\\KU Leuven\\\\Master digital humanities\\\\Introduction to data mining\\\\Project\\\\dm-project\\\\train')\n\nprint full_train_data.shape\n\nfull_train_data.head()\n", "target_lineno": 37, "nodes": [{"type": "Module", "children": [1, 6, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "full_train_data"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "readData"}, {"type": "Str", "value": "C:\\Users\\Tim\\Documents\\KU Leuven\\Master digital humanities\\Introduction to data mining\\Project\\dm-project\\train"}, {"type": "Print", "children": [7]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "full_train_data"}, {"type": "attr", "value": "shape"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "full_train_data"}, {"type": "attr", "value": "head"}], "stage": null, "id": 579213, "neighbor_cells": [579212], "header": "", "annotation": []}
{"target_lineno": 146, "file": "/projects/bdata/jupyter/target/nb_426785.py", "context": "\nimport matplotlib.ticker as ticker\n\nplt.gca().get_xaxis().set_major_locator(ticker.MaxNLocator(integer=True))\n\nplt.plot(([0] + list(np.cumsum(pca.explained_variance_ratio_))), '-o')\n\nplt.xlabel('Number of principal components')\n\nplt.ylabel('Cumulative contribution ratio')\n\nplt.grid()\n\nplt.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 21, 39, 45, 51, 56]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "matplotlib.ticker", "children": [3]}, {"type": "identifier", "value": "ticker"}, {"type": "Expr", "children": [5]}, {"type": "Call", "children": [6, 15]}, {"type": "AttributeLoad", "children": [7, 14]}, {"type": "Call", "children": [8]}, {"type": "AttributeLoad", "children": [9, 13]}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "gca"}, {"type": "attr", "value": "get_xaxis"}, {"type": "attr", "value": "set_major_locator"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "ticker"}, {"type": "attr", "value": "MaxNLocator"}, {"type": "keyword", "value": "integer", "children": [20]}, {"type": "NameConstant"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26, 38]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "BinOpAdd", "children": [27, 29]}, {"type": "ListLoad", "children": [28]}, {"type": "Num", "value": "0"}, {"type": "Call", "children": [30, 31]}, {"type": "NameLoad", "value": "list"}, {"type": "Call", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "cumsum"}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "explained_variance_ratio_"}, {"type": "Str", "value": "-o"}, {"type": "Expr", "children": [40]}, {"type": "Call", "children": [41, 44]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "Number of principal components"}, {"type": "Expr", "children": [46]}, {"type": "Call", "children": [47, 50]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Cumulative contribution ratio"}, {"type": "Expr", "children": [52]}, {"type": "Call", "children": [53]}, {"type": "AttributeLoad", "children": [54, 55]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "grid"}, {"type": "Expr", "children": [57]}, {"type": "Call", "children": [58]}, {"type": "AttributeLoad", "children": [59, 60]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "funcs": ["matplotlib.pyplot.gca.get_xaxis.set_major_locator", "matplotlib.pyplot.gca.get_xaxis", "matplotlib.pyplot.gca", "matplotlib.ticker.MaxNLocator", "matplotlib.pyplot.plot", "list", "numpy.cumsum", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.grid", "matplotlib.pyplot.show"], "neighbor_cells": [1070155], "id": 1070156, "header": "", "annotation": [" a href HierarchicalClustering2017 ipynb target blank a "]}
{"funcs": ["head"], "file": "/projects/bdata/jupyter/target/nb_22598.py", "target_func": "none_func", "context": "\ndfsub = df[((df.DATE > '1971') & (df.DATE < '1998'))]\n\ndfsub.head()\n", "target_lineno": 1038, "nodes": [{"type": "Module", "children": [1, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dfsub"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [6]}, {"type": "BinOpBitAnd", "children": [7, 12]}, {"type": "CompareGt", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "DATE"}, {"type": "Str", "value": "1971"}, {"type": "CompareLt", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "DATE"}, {"type": "Str", "value": "1998"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "dfsub"}, {"type": "attr", "value": "head"}], "stage": null, "id": 349508, "neighbor_cells": [349507], "header": "", "annotation": []}
{"funcs": ["numpy.reshape", "len", "len", "matplotlib.pyplot.subplots", "ax.imshow"], "file": "/projects/bdata/jupyter/target/nb_398849.py", "target_func": "none_func", "context": "\nBmag = np.reshape(Bf['Blocal'], [len(lons), len(lats)])\n\n(fig, ax) = plt.subplots(1, 1)\n\nax.imshow(Bmag.T, origin='lower', interpolation='None')\n", "target_lineno": 231, "nodes": [{"type": "Module", "children": [1, 18, 28]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "Bmag"}, {"type": "Call", "children": [4, 7, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "reshape"}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "Bf"}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "Blocal"}, {"type": "ListLoad", "children": [12, 15]}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "lons"}, {"type": "Call", "children": [16, 17]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "lats"}, {"type": "Assign", "children": [19, 22]}, {"type": "TupleStore", "children": [20, 21]}, {"type": "NameStore", "value": "fig"}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [23, 26, 27]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "subplots"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [29]}, {"type": "Call", "children": [30, 33, 36, 38]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "ax"}, {"type": "attr", "value": "imshow"}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "Bmag"}, {"type": "attr", "value": "T"}, {"type": "keyword", "children": [37], "value": "origin"}, {"type": "Str", "value": "lower"}, {"type": "keyword", "children": [39], "value": "interpolation"}, {"type": "Str", "value": "None"}], "stage": null, "id": 928301, "neighbor_cells": [-1], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_616297.py", "target_func": "none_func", "context": "\nfrom PIL import Image\n", "target_lineno": 599, "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "children": [2], "value": "PIL"}, {"type": "alias", "value": "Image"}], "stage": null, "id": 510711, "neighbor_cells": [510710], "header": " Part 3 PCA", "annotation": [" files data chall damage png ", " Part 3 PCA"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_747871.py", "target_func": "none_func", "context": "\nprint (2 in a)\n\nprint (0 in a)\n", "target_lineno": 65, "nodes": [{"type": "Module", "children": [1, 5]}, {"type": "Print", "children": [2]}, {"type": "CompareIn", "children": [3, 4]}, {"type": "Num", "value": "2"}, {"type": "NameLoad", "value": "a"}, {"type": "Print", "children": [6]}, {"type": "CompareIn", "children": [7, 8]}, {"type": "Num", "value": "0"}, {"type": "NameLoad", "value": "a"}], "stage": null, "id": 802480, "neighbor_cells": [802479], "header": "", "annotation": []}
{"target_lineno": 84, "file": "/projects/bdata/jupyter/target/nb_911020.py", "context": "\ny = df['logprice']\n\nx = df.loc[:, (df.columns != 'logprice')]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [6]}, {"type": "Str", "value": "logprice"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "x"}, {"type": "SubscriptLoad", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "loc"}, {"type": "ExtSlice", "children": [14, 15]}, {"type": "Slice"}, {"type": "Index", "children": [16]}, {"type": "CompareNotEq", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "columns"}, {"type": "Str", "value": "logprice"}], "funcs": [], "neighbor_cells": [718135], "id": 718136, "header": "", "annotation": []}
{"target_lineno": 29, "file": "/projects/bdata/jupyter/target/nb_551539.py", "context": "\ntips.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "tips"}, {"type": "attr", "value": "head"}], "funcs": ["seaborn.load_dataset.head"], "neighbor_cells": [125358], "id": 125359, "header": "", "annotation": []}
{"target_lineno": 436, "file": "/projects/bdata/jupyter/target/nb_657416.py", "context": "\nfrom IPython.display import Javascript\n\nimport os\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "IPython.display", "children": [2]}, {"type": "alias", "value": "Javascript"}, {"type": "Import", "children": [4]}, {"type": "alias", "value": "os"}], "funcs": [], "neighbor_cells": [153247], "id": 153248, "header": "", "annotation": []}
{"target_lineno": 418, "file": "/projects/bdata/jupyter/target/nb_884085.py", "context": "\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\nprint('MAE: {0}'.format(mean_absolute_error(y_test, y_pred)))\n\nprint('RMSE: {0}'.format(mean_squared_error(y_test, y_pred)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 15]}, {"type": "ImportFrom", "value": "sklearn.metrics", "children": [2, 3]}, {"type": "alias", "value": "mean_absolute_error"}, {"type": "alias", "value": "mean_squared_error"}, {"type": "Expr", "children": [5]}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "Str", "value": "MAE: {0}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [12, 13, 14]}, {"type": "NameLoad", "value": "mean_absolute_error"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "Str", "value": "RMSE: {0}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [23, 24, 25]}, {"type": "NameLoad", "value": "mean_squared_error"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred"}], "funcs": ["print", "format", "sklearn.metrics.mean_absolute_error", "print", "format", "sklearn.metrics.mean_squared_error"], "neighbor_cells": [691872], "id": 691873, "header": "", "annotation": []}
{"target_lineno": 189, "file": "/projects/bdata/jupyter/target/nb_843885.py", "context": "\nImage(filename='relationship_diagram.png')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "Image"}, {"type": "keyword", "value": "filename", "children": [5]}, {"type": "Str", "value": "relationship_diagram.png"}], "funcs": ["IPython.display.Image"], "neighbor_cells": [757041], "id": 757042, "header": "", "annotation": [" The same user can be shown multiple different displays but this happens rarely and display id is unique per user id document id A display id is associated with multiple documents which we interpret as a document can be pointed to by multiple displays But since an ad does the actual pointing an ad can appear in different displays and point to the same document This is all pretty confusing so here s a diagram to help "]}
{"funcs": ["sklearn.externals.joblib.load.predict"], "file": "/projects/bdata/jupyter/target/nb_394198.py", "target_func": "none_func", "context": "\nprint 'Point of training data before normalization\\n', new_data[55]\n\nprint '\\nThe read target of the data = ', Y[55]\n\nNewPred = anova_DecisionTreeRegressorTest.predict([new_data[55]])\n\nprint '\\nThe Predicted target of the data = ', NewPred\n", "target_lineno": 469, "nodes": [{"type": "Module", "children": [1, 7, 13, 24]}, {"type": "Print", "children": [2, 3]}, {"type": "Str", "value": "Point of training data before normalization\n"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "new_data"}, {"type": "Index", "children": [6]}, {"type": "Num", "value": "55"}, {"type": "Print", "children": [8, 9]}, {"type": "Str", "value": "\nThe read target of the data = "}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "Y"}, {"type": "Index", "children": [12]}, {"type": "Num", "value": "55"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "NewPred"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "anova_DecisionTreeRegressorTest"}, {"type": "attr", "value": "predict"}, {"type": "ListLoad", "children": [20]}, {"type": "SubscriptLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "new_data"}, {"type": "Index", "children": [23]}, {"type": "Num", "value": "55"}, {"type": "Print", "children": [25, 26]}, {"type": "Str", "value": "\nThe Predicted target of the data = "}, {"type": "NameLoad", "value": "NewPred"}], "stage": null, "id": 1031752, "neighbor_cells": [1031751], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_266028.py", "target_func": "none_func", "context": "\ndf1\n", "target_lineno": 169, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "df1"}], "stage": null, "id": 1126975, "neighbor_cells": [1126974], "header": "", "annotation": []}
{"target_lineno": 403, "file": "/projects/bdata/jupyter/target/nb_744964.py", "context": "\nimg_lhb = read_png('/Users/iayork/Downloads/lefty_trace_d.png')\n\nimg_rhb = read_png('/Users/iayork/Downloads/righty_trace_d.png')\n\ncmap = Baseball.cmapGyRd()\n\nsb.set_style('darkgrid')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 11, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "img_lhb"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "read_png"}, {"type": "Str", "value": "/Users/iayork/Downloads/lefty_trace_d.png"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "img_rhb"}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "read_png"}, {"type": "Str", "value": "/Users/iayork/Downloads/righty_trace_d.png"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "cmap"}, {"type": "Call", "children": [14]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "Baseball"}, {"type": "attr", "value": "cmapGyRd"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "sb"}, {"type": "attr", "value": "set_style"}, {"type": "Str", "value": "darkgrid"}], "funcs": ["matplotlib._png.read_png", "matplotlib._png.read_png", "Baseball.cmapGyRd", "seaborn.set_style"], "neighbor_cells": [867581], "id": 867582, "header": " KDE locations", "annotation": [" KDE locations"]}
{"target_lineno": 97, "file": "/projects/bdata/jupyter/target/nb_895446.py", "context": "\nrbm.fit(X_train)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "rbm"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}], "funcs": ["sklearn.neural_network.BernoulliRBM.fit"], "neighbor_cells": [1318073], "id": 1318074, "header": "", "annotation": []}
{"target_lineno": 551, "file": "/projects/bdata/jupyter/target/nb_602200.py", "context": "\nimport prettyplotlib as ppl\n\nimport matplotlib as mpl\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "prettyplotlib", "children": [3]}, {"type": "identifier", "value": "ppl"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "matplotlib", "children": [6]}, {"type": "identifier", "value": "mpl"}], "funcs": [], "neighbor_cells": [1211107], "id": 1211108, "header": " PrettyPlot Example", "annotation": [" Styling", " ", " To change your matplotlib figures styling you have one several options ", " ", " Use prettyplotlib package https github com olgabot prettyplotlib ", " ", " ", " Use MPLTools package http tonysyu github io mpltools auto examples index html ", " ", " ", " Change matplotlib rcParams values ", " ", " ", " Change matplotlibrc default values Here is my personalized configuration file https raw githubusercontent com aboSamoor ipython custom master matplotlibrc ", " ", " ", " ", " PrettyPlot Example"]}
{"target_lineno": 336, "file": "/projects/bdata/jupyter/target/nb_691557.py", "context": "\nplt.imshow((image == 191), cmap='gray')\n\nplt.title('White Matter')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "CompareEq", "children": [7, 8]}, {"type": "NameLoad", "value": "image"}, {"type": "Num", "value": "191"}, {"type": "keyword", "value": "cmap", "children": [10]}, {"type": "Str", "value": "gray"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "White Matter"}], "funcs": ["matplotlib.pyplot.imshow", "matplotlib.pyplot.title"], "neighbor_cells": [818617], "id": 818618, "header": "", "annotation": []}
{"funcs": ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv.append.append", "pandas.read_csv.append"], "file": "/projects/bdata/jupyter/target/nb_724017.py", "target_func": "none_func", "context": "\nnyse = pd.read_csv('Data/NYSE.csv')\n\nnasdaq = pd.read_csv('Data/NASDAQ.csv')\n\namex = pd.read_csv('Data/AMEX.csv')\n\nstocks = nyse.append(nasdaq, ignore_index=True).append(amex, ignore_index=True)\n\ndel stocks['Summary Quote']\n\ni = 0\n", "target_lineno": 112, "nodes": [{"type": "Module", "children": [1, 8, 15, 22, 37, 42]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "nyse"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "Data/NYSE.csv"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "nasdaq"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "Data/NASDAQ.csv"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "amex"}, {"type": "Call", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "Data/AMEX.csv"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "stocks"}, {"type": "Call", "children": [25, 34, 35]}, {"type": "AttributeLoad", "children": [26, 33]}, {"type": "Call", "children": [27, 30, 31]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "nyse"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "nasdaq"}, {"type": "keyword", "children": [32], "value": "ignore_index"}, {"type": "NameLoad", "value": "True"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "amex"}, {"type": "keyword", "children": [36], "value": "ignore_index"}, {"type": "NameLoad", "value": "True"}, {"type": "Delete", "children": [38]}, {"type": "SubscriptDel", "children": [39, 40]}, {"type": "NameLoad", "value": "stocks"}, {"type": "Index", "children": [41]}, {"type": "Str", "value": "Summary Quote"}, {"type": "Assign", "children": [43, 44]}, {"type": "NameStore", "value": "i"}, {"type": "Num", "value": "0"}], "stage": null, "id": 703149, "neighbor_cells": [703148], "header": "", "annotation": [" Uploads the non Glass Door data ", " The stock data is cleaned for ", " Certain terms in the name Things like inc or corp are deleted This helps the matching process ", " The market cap information is converted from strings to millions of dollars ", " ", " The city data is cleaned for ", " ", " Cities containing ", " Cities containing county ", " Removing from city names"]}
{"target_lineno": 648, "file": "/projects/bdata/jupyter/target/nb_744941.py", "context": "\ntrain_sizes = np.logspace(2, 3, 5).astype(np.int)\n\ntrain_sizes\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 16]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "train_sizes"}, {"type": "Call", "children": [4, 13]}, {"type": "AttributeLoad", "children": [5, 12]}, {"type": "Call", "children": [6, 9, 10, 11]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "logspace"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "5"}, {"type": "attr", "value": "astype"}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "int"}, {"type": "Expr", "children": [17]}, {"type": "NameLoad", "value": "train_sizes"}], "funcs": ["numpy.logspace.astype", "numpy.logspace"], "neighbor_cells": [622528], "id": 622529, "header": "", "annotation": [" Plotting Learning Curves for Bias Variance analysis", " In order to better understand the behavior of model model class contructor parameters is it possible to run several cross validation steps for various random sub samples of the training set and then plot the mean training and test errors ", " ", " These plots are called the learning curves ", " ", " sklearn does not yet provide turn key utilities to plot such learning curves but is not very complicated to compute them by leveraging the ShuffleSplit class First let s define a range of data set sizes for subsampling the training set "]}
{"funcs": ["sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit"], "file": "/projects/bdata/jupyter/target/nb_169246.py", "target_func": "none_func", "context": "\nreg_H = LogisticRegression()\n\nreg_H.fit(mandante_forte[base], mandante_forte['Output'])\n\nreg_A = LogisticRegression()\n\nreg_A.fit(visitante_forte[base], visitante_forte['Output'])\n\nreg_I = LogisticRegression()\n\nreg_I.fit(iguais[base], iguais['Output'])\n", "target_lineno": 628, "nodes": [{"type": "Module", "children": [1, 5, 18, 22, 35, 39]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "reg_H"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "LogisticRegression"}, {"type": "Expr", "children": [6]}, {"type": "Call", "children": [7, 10, 14]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "reg_H"}, {"type": "attr", "value": "fit"}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "mandante_forte"}, {"type": "Index", "children": [13]}, {"type": "NameLoad", "value": "base"}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "mandante_forte"}, {"type": "Index", "children": [17]}, {"type": "Str", "value": "Output"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "reg_A"}, {"type": "Call", "children": [21]}, {"type": "NameLoad", "value": "LogisticRegression"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 27, 31]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "reg_A"}, {"type": "attr", "value": "fit"}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "visitante_forte"}, {"type": "Index", "children": [30]}, {"type": "NameLoad", "value": "base"}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "visitante_forte"}, {"type": "Index", "children": [34]}, {"type": "Str", "value": "Output"}, {"type": "Assign", "children": [36, 37]}, {"type": "NameStore", "value": "reg_I"}, {"type": "Call", "children": [38]}, {"type": "NameLoad", "value": "LogisticRegression"}, {"type": "Expr", "children": [40]}, {"type": "Call", "children": [41, 44, 48]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "reg_I"}, {"type": "attr", "value": "fit"}, {"type": "SubscriptLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "iguais"}, {"type": "Index", "children": [47]}, {"type": "NameLoad", "value": "base"}, {"type": "SubscriptLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "iguais"}, {"type": "Index", "children": [51]}, {"type": "Str", "value": "Output"}], "stage": null, "id": 727713, "neighbor_cells": [727712], "header": "", "annotation": []}
{"target_lineno": 6, "file": "/projects/bdata/jupyter/target/nb_170066.py", "context": "\nget_ipython().magic('matplotlib inline')\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport sklearn as skl\n\nfrom sklearn.linear_model import LogisticRegression\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 11, 14, 17]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "Import", "children": [9]}, {"type": "alias", "value": "pandas", "children": [10]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [12]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [13]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [15]}, {"type": "alias", "value": "sklearn", "children": [16]}, {"type": "identifier", "value": "skl"}, {"type": "ImportFrom", "value": "sklearn.linear_model", "children": [18]}, {"type": "alias", "value": "LogisticRegression"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [-1], "id": 562642, "header": "", "annotation": [" coding utf 8", " 1 How to plot decision boundary ", " 2 understand L1 and L2 regulization "]}
{"target_lineno": 130, "file": "/projects/bdata/jupyter/target/nb_956413.py", "context": "\nX\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "X"}], "funcs": [], "neighbor_cells": [1325529], "id": 1325530, "header": "", "annotation": []}
{"target_lineno": 49, "file": "/projects/bdata/jupyter/target/nb_619871.py", "context": "\nt0 = time.time()\n\ndatapot_imdb.detect(data_imdb)\n\nprint('detect time:', (time.time() - t0))\n\ndatapot_imdb\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 13, 23]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "t0"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "time"}, {"type": "attr", "value": "time"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "datapot_imdb"}, {"type": "attr", "value": "detect"}, {"type": "NameLoad", "value": "data_imdb"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16, 17]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "detect time:"}, {"type": "BinOpSub", "children": [18, 22]}, {"type": "Call", "children": [19]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "time"}, {"type": "attr", "value": "time"}, {"type": "NameLoad", "value": "t0"}, {"type": "Expr", "children": [24]}, {"type": "NameLoad", "value": "datapot_imdb"}], "funcs": ["time.time", "datapot.DataPot.detect", "print", "time.time"], "neighbor_cells": [249909], "id": 249910, "header": "", "annotation": []}
{"target_lineno": 144, "file": "/projects/bdata/jupyter/target/nb_497443.py", "context": "\nfrom sklearn.metrics import mean_squared_error\n\nimport math\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "sklearn.metrics", "children": [2]}, {"type": "alias", "value": "mean_squared_error"}, {"type": "Import", "children": [4]}, {"type": "alias", "value": "math"}], "funcs": [], "neighbor_cells": [1096368], "id": 1096369, "header": "", "annotation": [" g Compute el root mean square error RMSE sobre los conjuntos de entrenamiento y test "]}
{"funcs": ["pandas.read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_837374.py", "target_func": "none_func", "context": "\nweather_df.head()\n", "target_lineno": 999, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "weather_df"}, {"type": "attr", "value": "head"}], "stage": null, "id": 750922, "neighbor_cells": [750921], "header": "", "annotation": []}
{"funcs": ["predict", "predict"], "file": "/projects/bdata/jupyter/target/nb_492490.py", "target_func": "none_func", "context": "\nitem_prediction = predict(train_data_matrix, item_similarity, type='item')\n\nuser_prediction = predict(train_data_matrix, user_similarity, type='user')\n", "target_lineno": 508, "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "item_prediction"}, {"type": "Call", "children": [4, 5, 6, 7]}, {"type": "NameLoad", "value": "predict"}, {"type": "NameLoad", "value": "train_data_matrix"}, {"type": "NameLoad", "value": "item_similarity"}, {"type": "keyword", "children": [8], "value": "type"}, {"type": "Str", "value": "item"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "user_prediction"}, {"type": "Call", "children": [12, 13, 14, 15]}, {"type": "NameLoad", "value": "predict"}, {"type": "NameLoad", "value": "train_data_matrix"}, {"type": "NameLoad", "value": "user_similarity"}, {"type": "keyword", "children": [16], "value": "type"}, {"type": "Str", "value": "user"}], "stage": null, "id": 53444, "neighbor_cells": [53443], "header": "", "annotation": []}
{"target_lineno": 18, "file": "/projects/bdata/jupyter/target/nb_149292.py", "context": "\nimport IPython\n\nassert (IPython.version_info[0] >= 3), 'Your version of IPython is too old, please update it.'\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "IPython"}, {"type": "Assert", "children": [4, 12]}, {"type": "CompareGtE", "children": [5, 11]}, {"type": "SubscriptLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "IPython"}, {"type": "attr", "value": "version_info"}, {"type": "Index", "children": [10]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "3"}, {"type": "Str", "value": "Your version of IPython is too old, please update it."}], "funcs": [], "neighbor_cells": [-1], "id": 1120308, "header": "", "annotation": [" coding utf 8", " COGS 108 Assignment 1 Setting Up", " IMPORTANT", " Rename this file to A1 A ipynb filled in with your student ID before you submit it ", " In the markdown cell below write in your Student ID and Github username ", " My Student ID number is A13162715", " ", " My Github username is nbezrook", " Part 1", " ", " Follow along on the instructions in the assignment description to do Part 1 on Github "]}
{"target_lineno": 149, "file": "/projects/bdata/jupyter/target/nb_441680.py", "context": "\nall_preds = np.vstack([all_preds_xg, all_preds_elastic, all_preds_ridge, all_preds_rf, all_preds_ada, all_preds_extra, all_preds_knn]).T\n\nprint(all_preds.shape)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "all_preds"}, {"type": "AttributeLoad", "children": [4, 16]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "vstack"}, {"type": "ListLoad", "children": [9, 10, 11, 12, 13, 14, 15]}, {"type": "NameLoad", "value": "all_preds_xg"}, {"type": "NameLoad", "value": "all_preds_elastic"}, {"type": "NameLoad", "value": "all_preds_ridge"}, {"type": "NameLoad", "value": "all_preds_rf"}, {"type": "NameLoad", "value": "all_preds_ada"}, {"type": "NameLoad", "value": "all_preds_extra"}, {"type": "NameLoad", "value": "all_preds_knn"}, {"type": "attr", "value": "T"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "all_preds"}, {"type": "attr", "value": "shape"}], "funcs": ["numpy.vstack", "print"], "neighbor_cells": [358163], "id": 358164, "header": "", "annotation": []}
{"target_lineno": 285, "file": "/projects/bdata/jupyter/target/nb_59134.py", "context": "\ntemp.groupby('counts').count()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 9]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "temp"}, {"type": "attr", "value": "groupby"}, {"type": "Str", "value": "counts"}, {"type": "attr", "value": "count"}], "funcs": ["pandas.DataFrame.groupby.count", "pandas.DataFrame.groupby"], "neighbor_cells": [192298], "id": 192299, "header": "", "annotation": []}
{"funcs": ["float"], "file": "/projects/bdata/jupyter/target/nb_71715.py", "target_func": "none_func", "context": "\nprint (TP / float((TP + FN)))\n", "target_lineno": 332, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "BinOpDiv", "children": [3, 4]}, {"type": "NameLoad", "value": "TP"}, {"type": "Call", "children": [5, 6]}, {"type": "NameLoad", "value": "float"}, {"type": "BinOpAdd", "children": [7, 8]}, {"type": "NameLoad", "value": "TP"}, {"type": "NameLoad", "value": "FN"}], "stage": null, "id": 669457, "neighbor_cells": [669456], "header": "", "annotation": [" Sensitivity Measures "]}
{"target_lineno": 604, "file": "/projects/bdata/jupyter/target/nb_360329.py", "context": "\nsampler1 = emcee.EnsembleSampler(nwalkers, ndim, lnprob_jn, args=(ligset, bindset_n, rtots, err, bnds))\n\ncProfile.run('sampler1.run_mcmc(pos, 2000)')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "sampler1"}, {"type": "Call", "children": [4, 7, 8, 9, 10]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "emcee"}, {"type": "attr", "value": "EnsembleSampler"}, {"type": "NameLoad", "value": "nwalkers"}, {"type": "NameLoad", "value": "ndim"}, {"type": "NameLoad", "value": "lnprob_jn"}, {"type": "keyword", "value": "args", "children": [11]}, {"type": "TupleLoad", "children": [12, 13, 14, 15, 16]}, {"type": "NameLoad", "value": "ligset"}, {"type": "NameLoad", "value": "bindset_n"}, {"type": "NameLoad", "value": "rtots"}, {"type": "NameLoad", "value": "err"}, {"type": "NameLoad", "value": "bnds"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "cProfile"}, {"type": "attr", "value": "run"}, {"type": "Str", "value": "sampler1.run_mcmc(pos, 2000)"}], "funcs": ["emcee.EnsembleSampler", "cProfile.run"], "neighbor_cells": [709945], "id": 709946, "header": "", "annotation": []}
{"funcs": ["pandas.to_datetime", "pandas.DatetimeIndex", "pandas.concat.head"], "file": "/projects/bdata/jupyter/target/nb_70280.py", "target_func": "none_func", "context": "\nundersampled_up.dt = pd.to_datetime(undersampled_up.dt)\n\nt = pd.DatetimeIndex(undersampled_up.dt)\n\nhr = t.hour\n\nundersampled_up['HourOfDay'] = hr\n\nmonth = t.month\n\nundersampled_up['Month'] = month\n\nyear = t.year\n\nundersampled_up['Year'] = year\n\nundersampled_up.head()\n", "target_lineno": 79, "nodes": [{"type": "Module", "children": [1, 12, 21, 26, 32, 37, 43, 48, 54]}, {"type": "Assign", "children": [2, 5]}, {"type": "AttributeStore", "children": [3, 4]}, {"type": "NameLoad", "value": "undersampled_up"}, {"type": "attr", "value": "dt"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "to_datetime"}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "undersampled_up"}, {"type": "attr", "value": "dt"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "t"}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DatetimeIndex"}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "undersampled_up"}, {"type": "attr", "value": "dt"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "hr"}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "t"}, {"type": "attr", "value": "hour"}, {"type": "Assign", "children": [27, 31]}, {"type": "SubscriptStore", "children": [28, 29]}, {"type": "NameLoad", "value": "undersampled_up"}, {"type": "Index", "children": [30]}, {"type": "Str", "value": "HourOfDay"}, {"type": "NameLoad", "value": "hr"}, {"type": "Assign", "children": [33, 34]}, {"type": "NameStore", "value": "month"}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "t"}, {"type": "attr", "value": "month"}, {"type": "Assign", "children": [38, 42]}, {"type": "SubscriptStore", "children": [39, 40]}, {"type": "NameLoad", "value": "undersampled_up"}, {"type": "Index", "children": [41]}, {"type": "Str", "value": "Month"}, {"type": "NameLoad", "value": "month"}, {"type": "Assign", "children": [44, 45]}, {"type": "NameStore", "value": "year"}, {"type": "AttributeLoad", "children": [46, 47]}, {"type": "NameLoad", "value": "t"}, {"type": "attr", "value": "year"}, {"type": "Assign", "children": [49, 53]}, {"type": "SubscriptStore", "children": [50, 51]}, {"type": "NameLoad", "value": "undersampled_up"}, {"type": "Index", "children": [52]}, {"type": "Str", "value": "Year"}, {"type": "NameLoad", "value": "year"}, {"type": "Expr", "children": [55]}, {"type": "Call", "children": [56]}, {"type": "AttributeLoad", "children": [57, 58]}, {"type": "NameLoad", "value": "undersampled_up"}, {"type": "attr", "value": "head"}], "stage": null, "id": 1106223, "neighbor_cells": [1106222], "header": "", "annotation": []}
{"funcs": ["sklearn.grid_search.GridSearchCV"], "file": "/projects/bdata/jupyter/target/nb_566683.py", "target_func": "none_func", "context": "\ngs = GridSearchCV(pipe, {\n    'model__max_depth': [2, 5, 10],\n    'model__min_samples_split': [5, 15, 30],\n    'model__n_estimators': [10, 100, 1000],\n}, cv=kf, scoring=scorer)\n", "target_lineno": 2111, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "gs"}, {"type": "Call", "children": [4, 5, 6, 22, 24]}, {"type": "NameLoad", "value": "GridSearchCV"}, {"type": "NameLoad", "value": "pipe"}, {"type": "Dict", "children": [7, 8, 9, 10, 14, 18]}, {"type": "Str", "value": "model__max_depth"}, {"type": "Str", "value": "model__min_samples_split"}, {"type": "Str", "value": "model__n_estimators"}, {"type": "ListLoad", "children": [11, 12, 13]}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "10"}, {"type": "ListLoad", "children": [15, 16, 17]}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "15"}, {"type": "Num", "value": "30"}, {"type": "ListLoad", "children": [19, 20, 21]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "100"}, {"type": "Num", "value": "1000"}, {"type": "keyword", "children": [23], "value": "cv"}, {"type": "NameLoad", "value": "kf"}, {"type": "keyword", "children": [25], "value": "scoring"}, {"type": "NameLoad", "value": "scorer"}], "stage": null, "id": 476221, "neighbor_cells": [476220], "header": "", "annotation": []}
{"funcs": ["accuracy_score"], "file": "/projects/bdata/jupyter/target/nb_612537.py", "target_func": "none_func", "context": "\nprint accuracy_score(outcomes, predictions)\n", "target_lineno": 117, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "accuracy_score"}, {"type": "NameLoad", "value": "outcomes"}, {"type": "NameLoad", "value": "predictions"}], "stage": null, "id": 340481, "neighbor_cells": [340480], "header": "", "annotation": [" Question 1", " Using the RMS Titanic data how accurate would a prediction be that none of the passengers survived ", " Hint Run the code cell below to see the accuracy of this prediction "]}
{"target_lineno": 5, "file": "/projects/bdata/jupyter/target/nb_361511.py", "context": "\nimport os\n\nfrom os import listdir\n\nfrom os.path import isfile, join\n\nimport glob\n\nimport string\n\nimport operator\n\nimport csv\n\nimport pandas as pd\n\nimport calendar\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn import preprocessing\n\nfrom sklearn.cross_validation import cross_val_score\n\nfrom sklearn import tree\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 5, 8, 10, 12, 14, 16, 19, 21, 29, 32, 35, 38, 40, 42, 44]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "os"}, {"type": "ImportFrom", "value": "os", "children": [4]}, {"type": "alias", "value": "listdir"}, {"type": "ImportFrom", "value": "os.path", "children": [6, 7]}, {"type": "alias", "value": "isfile"}, {"type": "alias", "value": "join"}, {"type": "Import", "children": [9]}, {"type": "alias", "value": "glob"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "string"}, {"type": "Import", "children": [13]}, {"type": "alias", "value": "operator"}, {"type": "Import", "children": [15]}, {"type": "alias", "value": "csv"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "pandas", "children": [18]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [20]}, {"type": "alias", "value": "calendar"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 27, 28]}, {"type": "AttributeLoad", "children": [24, 26]}, {"type": "Call", "children": [25]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Import", "children": [30]}, {"type": "alias", "value": "seaborn", "children": [31]}, {"type": "identifier", "value": "sns"}, {"type": "Import", "children": [33]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [34]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [36]}, {"type": "alias", "value": "numpy", "children": [37]}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "value": "sklearn.ensemble", "children": [39]}, {"type": "alias", "value": "RandomForestClassifier"}, {"type": "ImportFrom", "value": "sklearn", "children": [41]}, {"type": "alias", "value": "preprocessing"}, {"type": "ImportFrom", "value": "sklearn.cross_validation", "children": [43]}, {"type": "alias", "value": "cross_val_score"}, {"type": "ImportFrom", "value": "sklearn", "children": [45]}, {"type": "alias", "value": "tree"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 635144, "header": " Factors Affecting solving murder crimes ", "annotation": [" usr bin env python", " coding utf 8", " Factors Affecting solving murder crimes "]}
{"target_lineno": 25, "file": "/projects/bdata/jupyter/target/nb_818272.py", "context": "\nX = scale(data.data)\n\ny = data.target\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "scale"}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "data"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "y"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "target"}], "funcs": ["sklearn.preprocessing.scale"], "neighbor_cells": [66007], "id": 66008, "header": "", "annotation": [" 2 sklearn preprocessing scale "]}
{"funcs": ["numpy.mean"], "file": "/projects/bdata/jupyter/target/nb_464579.py", "target_func": "none_func", "context": "\nnp.mean((df.rating < 3.0))\n", "target_lineno": 152, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "CompareLt", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "rating"}, {"type": "Num", "value": "3.0"}], "stage": null, "id": 109530, "neighbor_cells": [109529], "header": "", "annotation": [" Notice that you could just find the average since the True s map to 1s "]}
{"funcs": ["sklearn.metrics.accuracy_score"], "file": "/projects/bdata/jupyter/target/nb_954986.py", "target_func": "none_func", "context": "\nfrom sklearn import metrics\n\nmetrics.accuracy_score(y_test, y_pred_class)\n", "target_lineno": 122, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "sklearn"}, {"type": "alias", "value": "metrics"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 8, 9]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred_class"}], "stage": null, "id": 731673, "neighbor_cells": [731672], "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.predict", "sklearn.metrics.accuracy_score"], "file": "/projects/bdata/jupyter/target/nb_825475.py", "target_func": "none_func", "context": "\nfrom sklearn.linear_model import LogisticRegression\n\nimport sklearn.metrics as met\n\nlogreg = LogisticRegression()\n\nlogreg.fit(train_X, train_y)\n\npreds = logreg.predict(test_X)\n\nprint met.accuracy_score(test_y, preds)\n", "target_lineno": 237, "nodes": [{"type": "Module", "children": [1, 3, 6, 10, 17, 24]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.linear_model"}, {"type": "alias", "value": "LogisticRegression"}, {"type": "Import", "children": [4]}, {"type": "alias", "children": [5], "value": "sklearn.metrics"}, {"type": "identifier", "value": "met"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "logreg"}, {"type": "Call", "children": [9]}, {"type": "NameLoad", "value": "LogisticRegression"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15, 16]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "logreg"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "train_X"}, {"type": "NameLoad", "value": "train_y"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "preds"}, {"type": "Call", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "logreg"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "test_X"}, {"type": "Print", "children": [25]}, {"type": "Call", "children": [26, 29, 30]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "met"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "test_y"}, {"type": "NameLoad", "value": "preds"}], "stage": null, "id": 8718, "neighbor_cells": [8717], "header": " Input data into Binomial Model", "annotation": [" Input data into Binomial Model"]}
{"target_lineno": 98, "file": "/projects/bdata/jupyter/target/nb_266404.py", "context": "\nfrom sklearn import preprocessing\n\ntrain_X = preprocessing.minmax_scale(train_X)\n\ntest_X = preprocessing.minmax_scale(test_X)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 10]}, {"type": "ImportFrom", "value": "sklearn", "children": [2]}, {"type": "alias", "value": "preprocessing"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "train_X"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "preprocessing"}, {"type": "attr", "value": "minmax_scale"}, {"type": "NameLoad", "value": "train_X"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "test_X"}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "preprocessing"}, {"type": "attr", "value": "minmax_scale"}, {"type": "NameLoad", "value": "test_X"}], "funcs": ["sklearn.preprocessing.minmax_scale", "sklearn.preprocessing.minmax_scale"], "neighbor_cells": [875227], "id": 875228, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_485645.py", "target_func": "none_func", "context": "\nclf_A = None\n\nclf_B = None\n\nclf_C = None\n\nX_train_100 = None\n\ny_train_100 = None\n\nX_train_200 = None\n\ny_train_200 = None\n\nX_train_300 = None\n\ny_train_300 = None\n", "target_lineno": 249, "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 13, 16, 19, 22, 25]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "clf_A"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "clf_B"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "clf_C"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "X_train_100"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "y_train_100"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "X_train_200"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "y_train_200"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "X_train_300"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [26, 27]}, {"type": "NameStore", "value": "y_train_300"}, {"type": "NameLoad", "value": "None"}], "stage": null, "id": 585395, "neighbor_cells": [585394], "header": "", "annotation": [" Implementation Model Performance Metrics", " With the predefined functions above you will now import the three supervised learning models of your choice and run the train predict function for each one Remember that you will need to train and predict on each classifier for three different training set sizes 100 200 and 300 Hence you should expect to have 9 different outputs below 3 for each model using the varying training set sizes In the following code cell you will need to implement the following ", " Import the three supervised learning models you ve discussed in the previous section ", " Initialize the three models and store them in clf A clf B and clf C ", " Use a random state for each model you use if provided ", " Note Use the default settings for each model you will tune one specific model in a later section ", " Create the different training set sizes to be used to train each model ", " Do not reshuffle and resplit the data The new training points should be drawn from X train and y train ", " Fit each model with each training set size and make predictions on the test set 9 in total ", " Note Three tables are provided after the following code cell which can be used to store your results "]}
{"target_lineno": 235, "file": "/projects/bdata/jupyter/target/nb_933429.py", "context": "\nencoder = Model(input_img, encoded)\n\nencoded_input = Input(shape=(encoding_dim,))\n\ndecoder = Model(encoded_input, autoencoder.layers[(- 1)](encoded_input))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "encoder"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "Model"}, {"type": "NameLoad", "value": "input_img"}, {"type": "NameLoad", "value": "encoded"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "encoded_input"}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "Input"}, {"type": "keyword", "value": "shape", "children": [12]}, {"type": "TupleLoad", "children": [13]}, {"type": "NameLoad", "value": "encoding_dim"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "decoder"}, {"type": "Call", "children": [17, 18, 19]}, {"type": "NameLoad", "value": "Model"}, {"type": "NameLoad", "value": "encoded_input"}, {"type": "Call", "children": [20, 27]}, {"type": "SubscriptLoad", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "autoencoder"}, {"type": "attr", "value": "layers"}, {"type": "Index", "children": [25]}, {"type": "UnaryOpUSub", "children": [26]}, {"type": "Num", "value": "1"}, {"type": "NameLoad", "value": "encoded_input"}], "funcs": ["keras.models.Model", "keras.layers.Input", "keras.models.Model"], "neighbor_cells": [68670], "id": 68671, "header": "", "annotation": []}
{"target_lineno": 3, "file": "/projects/bdata/jupyter/target/nb_486732.py", "context": "\nimport numpy as np\n\nfrom numpy.random import randn\n\nimport pandas as pd\n\nfrom scipy import stats\n\nimport matplotlib as mpl\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 6, 9, 11, 14, 17, 20]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "value": "numpy.random", "children": [5]}, {"type": "alias", "value": "randn"}, {"type": "Import", "children": [7]}, {"type": "alias", "value": "pandas", "children": [8]}, {"type": "identifier", "value": "pd"}, {"type": "ImportFrom", "value": "scipy", "children": [10]}, {"type": "alias", "value": "stats"}, {"type": "Import", "children": [12]}, {"type": "alias", "value": "matplotlib", "children": [13]}, {"type": "identifier", "value": "mpl"}, {"type": "Import", "children": [15]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [16]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [18]}, {"type": "alias", "value": "seaborn", "children": [19]}, {"type": "identifier", "value": "sns"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 26, 27]}, {"type": "AttributeLoad", "children": [23, 25]}, {"type": "Call", "children": [24]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 761720, "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"funcs": ["pandas.read_csv.drop.dropna.drop.groupby.mean"], "file": "/projects/bdata/jupyter/target/nb_292486.py", "target_func": "none_func", "context": "\ndata_by_class.mean()\n", "target_lineno": 126, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "data_by_class"}, {"type": "attr", "value": "mean"}], "stage": null, "id": 1066317, "neighbor_cells": [1066316], "header": "", "annotation": []}
{"target_lineno": 95, "file": "/projects/bdata/jupyter/target/nb_147227.py", "context": "\nmy_link = [x for x in urllist if ((searchterm in x) and ('meta' not in x))]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "my_link"}, {"type": "ListComp", "children": [4, 5]}, {"type": "NameLoad", "value": "x"}, {"type": "comprehension", "children": [6, 7, 8]}, {"type": "NameStore", "value": "x"}, {"type": "NameLoad", "value": "urllist"}, {"type": "BoolOpAnd", "children": [9, 12]}, {"type": "CompareIn", "children": [10, 11]}, {"type": "NameLoad", "value": "searchterm"}, {"type": "NameLoad", "value": "x"}, {"type": "CompareNotIn", "children": [13, 14]}, {"type": "Str", "value": "meta"}, {"type": "NameLoad", "value": "x"}], "funcs": [], "neighbor_cells": [367255], "id": 367256, "header": "", "annotation": []}
{"target_lineno": 262, "file": "/projects/bdata/jupyter/target/nb_442629.py", "context": "\ndata.groupby(['tweet_at'])['tweets'].count().plot(kind='bar')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 17]}, {"type": "AttributeLoad", "children": [4, 16]}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 15]}, {"type": "SubscriptLoad", "children": [7, 13]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "groupby"}, {"type": "ListLoad", "children": [12]}, {"type": "Str", "value": "tweet_at"}, {"type": "Index", "children": [14]}, {"type": "Str", "value": "tweets"}, {"type": "attr", "value": "count"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "value": "kind", "children": [18]}, {"type": "Str", "value": "bar"}], "funcs": ["pandas.read_csv.groupby", "count.plot", "pandas.read_csv.groupby", "count", "pandas.read_csv.groupby"], "neighbor_cells": [328743], "id": 328744, "header": "", "annotation": []}
{"target_lineno": 346, "file": "/projects/bdata/jupyter/target/nb_743038.py", "context": "\n_ = email_df.apply(return_country_and_sentiment, args=(country_sentiment,), axis=1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "_"}, {"type": "Call", "children": [4, 7, 8, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "email_df"}, {"type": "attr", "value": "apply"}, {"type": "NameLoad", "value": "return_country_and_sentiment"}, {"type": "keyword", "value": "args", "children": [9]}, {"type": "TupleLoad", "children": [10]}, {"type": "NameLoad", "value": "country_sentiment"}, {"type": "keyword", "value": "axis", "children": [12]}, {"type": "Num", "value": "1"}], "funcs": ["pandas.read_csv.apply"], "neighbor_cells": [204577], "id": 204578, "header": "", "annotation": []}
{"target_lineno": 244, "file": "/projects/bdata/jupyter/target/nb_265783.py", "context": "\nps = range(0, 3)\n\nd = 1\n\nqs = range(0, 3)\n\nPs = range(0, 3)\n\nD = 1\n\nQs = range(0, 2)\n\nfrom itertools import product\n\nparameters = product(ps, qs, Ps, Qs)\n\nparameters_list = list(parameters)\n\nlen(parameters_list)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 10, 16, 22, 25, 31, 33, 41, 46]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ps"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "3"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "d"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "qs"}, {"type": "Call", "children": [13, 14, 15]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "3"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "Ps"}, {"type": "Call", "children": [19, 20, 21]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "3"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "D"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [26, 27]}, {"type": "NameStore", "value": "Qs"}, {"type": "Call", "children": [28, 29, 30]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "2"}, {"type": "ImportFrom", "value": "itertools", "children": [32]}, {"type": "alias", "value": "product"}, {"type": "Assign", "children": [34, 35]}, {"type": "NameStore", "value": "parameters"}, {"type": "Call", "children": [36, 37, 38, 39, 40]}, {"type": "NameLoad", "value": "product"}, {"type": "NameLoad", "value": "ps"}, {"type": "NameLoad", "value": "qs"}, {"type": "NameLoad", "value": "Ps"}, {"type": "NameLoad", "value": "Qs"}, {"type": "Assign", "children": [42, 43]}, {"type": "NameStore", "value": "parameters_list"}, {"type": "Call", "children": [44, 45]}, {"type": "NameLoad", "value": "list"}, {"type": "NameLoad", "value": "parameters"}, {"type": "Expr", "children": [47]}, {"type": "Call", "children": [48, 49]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "parameters_list"}], "funcs": ["range", "range", "range", "range", "itertools.product", "list", "len"], "neighbor_cells": [527109], "id": 527110, "header": "", "annotation": [" "]}
{"funcs": ["sorted", "list", "reversed", "len"], "file": "/projects/bdata/jupyter/target/nb_544448.py", "target_func": "none_func", "context": "\nprint shopping_list\n\nprint sorted(shopping_list)\n\nprint list(reversed(shopping_list))\n\nprint len(shopping_list)\n", "target_lineno": 150, "nodes": [{"type": "Module", "children": [1, 3, 7, 13]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "shopping_list"}, {"type": "Print", "children": [4]}, {"type": "Call", "children": [5, 6]}, {"type": "NameLoad", "value": "sorted"}, {"type": "NameLoad", "value": "shopping_list"}, {"type": "Print", "children": [8]}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "list"}, {"type": "Call", "children": [11, 12]}, {"type": "NameLoad", "value": "reversed"}, {"type": "NameLoad", "value": "shopping_list"}, {"type": "Print", "children": [14]}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "shopping_list"}], "stage": null, "id": 129927, "neighbor_cells": [129926], "header": "", "annotation": [" This segues nicely to our next data structure ", " Lists ", " A list in Python is an ordered collection of objects The objects can be of any type strings ints floats lists anything "]}
{"funcs": ["format", "len", "trips.sum"], "file": "/projects/bdata/jupyter/target/nb_244554.py", "target_func": "none_func", "context": "\nbiz = ride_count[(ride_count.business_day == 1)]\n\nprint 'Total number of rides on the {} business days in 2016: {}'.format(len(biz), biz.trips.sum())\n", "target_lineno": 269, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "biz"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "ride_count"}, {"type": "Index", "children": [6]}, {"type": "CompareEq", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "ride_count"}, {"type": "attr", "value": "business_day"}, {"type": "Num", "value": "1"}, {"type": "Print", "children": [12]}, {"type": "Call", "children": [13, 16, 19]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "Str", "value": "Total number of rides on the {} business days in 2016: {}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "biz"}, {"type": "Call", "children": [20]}, {"type": "AttributeLoad", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "biz"}, {"type": "attr", "value": "trips"}, {"type": "attr", "value": "sum"}], "stage": null, "id": 754673, "neighbor_cells": [754672], "header": "", "annotation": []}
{"target_lineno": 555, "file": "/projects/bdata/jupyter/target/nb_58194.py", "context": "\nchars_to_indices = dict(((c, i) for (i, c) in enumerate(chars)))\n\nindices_to_chars = dict(((i, c) for (i, c) in enumerate(chars)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 16]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "chars_to_indices"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "dict"}, {"type": "GeneratorExp", "children": [6, 9]}, {"type": "TupleLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "c"}, {"type": "NameLoad", "value": "i"}, {"type": "comprehension", "children": [10, 13]}, {"type": "TupleStore", "children": [11, 12]}, {"type": "NameStore", "value": "i"}, {"type": "NameStore", "value": "c"}, {"type": "Call", "children": [14, 15]}, {"type": "NameLoad", "value": "enumerate"}, {"type": "NameLoad", "value": "chars"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "indices_to_chars"}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "dict"}, {"type": "GeneratorExp", "children": [21, 24]}, {"type": "TupleLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "i"}, {"type": "NameLoad", "value": "c"}, {"type": "comprehension", "children": [25, 28]}, {"type": "TupleStore", "children": [26, 27]}, {"type": "NameStore", "value": "i"}, {"type": "NameStore", "value": "c"}, {"type": "Call", "children": [29, 30]}, {"type": "NameLoad", "value": "enumerate"}, {"type": "NameLoad", "value": "chars"}], "funcs": ["dict", "enumerate", "dict", "enumerate"], "neighbor_cells": [1226545], "id": 1226546, "header": "", "annotation": [" Rockin so we have a multi class classification problem on our hands ", " 2 5 One hot encoding characters", " ", " There s just one last issue we have to deal with before tackle machine learning algorithm deal with numerical data and all of our input output pairs are characters So we just need to transform our characters into equivalent numerical values The most common way of doing this is via a one hot encoding scheme Here s how it works ", " ", " We transform each character in our inputs outputs into a vector with length equal to the number of unique characters in our text This vector is all zeros except one location where we place a 1 and this location is unique to each character type e g we transform a b and c as follows", " ", " a longleftarrow left begin array c ", " 1 ", " 0 ", " 0 ", " vdots ", " 0 ", " 0", " end array right b longleftarrow left begin array c ", " 0 ", " 1 ", " 0 ", " vdots ", " 0 ", " 0", " end array right c longleftarrow left begin array c ", " 0 ", " 0 ", " 1 ", " vdots ", " 0 ", " 0 ", " end array right cdots ", " ", " where each vector has 32 entries or in general number of entries number of unique characters in text ", " The first practical step towards doing this one hot encoding is to form a dictionary mapping each unique character to a unique integer and one dictionary to do the reverse mapping We can then use these dictionaries to quickly make our one hot encodings as well as re translate from integers to characters the results of our trained RNN classification model "]}
{"funcs": ["numpy.array"], "file": "/projects/bdata/jupyter/target/nb_417050.py", "target_func": "none_func", "context": "\nX_all = np.array(a)\n", "target_lineno": 65, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X_all"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "NameLoad", "value": "a"}], "stage": null, "id": 370429, "neighbor_cells": [370428], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.drop.drop"], "file": "/projects/bdata/jupyter/target/nb_615864.py", "target_func": "none_func", "context": "\ndfSinSalary = df.drop(['Salary', 'Marital status', 'Race'], 1)\n", "target_lineno": 379, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dfSinSalary"}, {"type": "Call", "children": [4, 7, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "drop"}, {"type": "ListLoad", "children": [8, 9, 10]}, {"type": "Str", "value": "Salary"}, {"type": "Str", "value": "Marital status"}, {"type": "Str", "value": "Race"}, {"type": "Num", "value": "1"}], "stage": null, "id": 60070, "neighbor_cells": [60069], "header": "", "annotation": []}
{"funcs": ["pandas.crosstab", "scipy.stats.chi2_contingency", "ipy_table.make_table"], "file": "/projects/bdata/jupyter/target/nb_152552.py", "target_func": "none_func", "context": "\ntable = pd.crosstab([titanic_df['Survived']], titanic_df['age_group'])\n\n(chi2, p, dof, expected) = stats.chi2_contingency(table.values)\n\nresults = [['Item', 'Value'], ['Chi-Square Test', chi2], ['P-Value', p]]\n\ntbl.make_table(results)\n", "target_lineno": 485, "nodes": [{"type": "Module", "children": [1, 16, 29, 41]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "table"}, {"type": "Call", "children": [4, 7, 12]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "crosstab"}, {"type": "ListLoad", "children": [8]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "titanic_df"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "Survived"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "titanic_df"}, {"type": "Index", "children": [15]}, {"type": "Str", "value": "age_group"}, {"type": "Assign", "children": [17, 22]}, {"type": "TupleStore", "children": [18, 19, 20, 21]}, {"type": "NameStore", "value": "chi2"}, {"type": "NameStore", "value": "p"}, {"type": "NameStore", "value": "dof"}, {"type": "NameStore", "value": "expected"}, {"type": "Call", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "stats"}, {"type": "attr", "value": "chi2_contingency"}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "table"}, {"type": "attr", "value": "values"}, {"type": "Assign", "children": [30, 31]}, {"type": "NameStore", "value": "results"}, {"type": "ListLoad", "children": [32, 35, 38]}, {"type": "ListLoad", "children": [33, 34]}, {"type": "Str", "value": "Item"}, {"type": "Str", "value": "Value"}, {"type": "ListLoad", "children": [36, 37]}, {"type": "Str", "value": "Chi-Square Test"}, {"type": "NameLoad", "value": "chi2"}, {"type": "ListLoad", "children": [39, 40]}, {"type": "Str", "value": "P-Value"}, {"type": "NameLoad", "value": "p"}, {"type": "Expr", "children": [42]}, {"type": "Call", "children": [43, 46]}, {"type": "AttributeLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "tbl"}, {"type": "attr", "value": "make_table"}, {"type": "NameLoad", "value": "results"}], "stage": null, "id": 651563, "neighbor_cells": [651562], "header": "", "annotation": [" After relooking at the proportion of survivors by age group and gender the data supports notion of women and children to be given preferential treatment over men The plot Proportion of survivors by age group gender shows that children 0 9 years old male and female and women all ages had a much higher proportion of survivors This supports the notion of the seats in the lifeboats been given to Women and Children first ", " Hypothesis Test", " For this test I will be using the chi sqaure test for independence"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_147416.py", "target_func": "none_func", "context": "\ny_new = (y - y_trend)\n", "target_lineno": 555, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y_new"}, {"type": "BinOpSub", "children": [4, 5]}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "y_trend"}], "stage": null, "id": 127861, "neighbor_cells": [127860], "header": "", "annotation": []}
{"target_lineno": 413, "file": "/projects/bdata/jupyter/target/nb_580177.py", "context": "\n\ndef errors(real, predicted):\n    return {\n        'distance': np.linalg.norm((real - predicted)),\n        'worst_error': max(np.absolute((real - predicted))),\n        'duration_error': abs((sum(real) - sum(predicted))),\n    }\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "errors", "children": [2, 7, 40]}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [8]}, {"type": "Return", "children": [9]}, {"type": "Dict", "children": [10, 11, 12, 13, 22, 31]}, {"type": "Str", "value": "distance"}, {"type": "Str", "value": "worst_error"}, {"type": "Str", "value": "duration_error"}, {"type": "Call", "children": [14, 19]}, {"type": "AttributeLoad", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "linalg"}, {"type": "attr", "value": "norm"}, {"type": "BinOpSub", "children": [20, 21]}, {"type": "NameLoad", "value": "real"}, {"type": "NameLoad", "value": "predicted"}, {"type": "Call", "children": [23, 24]}, {"type": "NameLoad", "value": "max"}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "absolute"}, {"type": "BinOpSub", "children": [29, 30]}, {"type": "NameLoad", "value": "real"}, {"type": "NameLoad", "value": "predicted"}, {"type": "Call", "children": [32, 33]}, {"type": "NameLoad", "value": "abs"}, {"type": "BinOpSub", "children": [34, 37]}, {"type": "Call", "children": [35, 36]}, {"type": "NameLoad", "value": "sum"}, {"type": "NameLoad", "value": "real"}, {"type": "Call", "children": [38, 39]}, {"type": "NameLoad", "value": "sum"}, {"type": "NameLoad", "value": "predicted"}, {"type": "decorator_list"}], "funcs": ["numpy.linalg.norm", "max", "numpy.absolute", "abs", "sum", "sum"], "neighbor_cells": [524563], "id": 524564, "header": "", "annotation": []}
{"target_lineno": 301, "file": "/projects/bdata/jupyter/target/nb_722258.py", "context": "\naccuracy_score(y, pred_logistic_l1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "pred_logistic_l1"}], "funcs": ["sklearn.metrics.accuracy_score"], "neighbor_cells": [1284595], "id": 1284596, "header": "", "annotation": []}
{"target_lineno": 94, "file": "/projects/bdata/jupyter/target/nb_610920.py", "context": "\ncmd = \"SELECT * FROM yelp_reviews WHERE review_category = 'dog'\"\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "cmd"}, {"type": "Str", "value": "SELECT * FROM yelp_reviews WHERE review_category = 'dog'"}], "funcs": [], "neighbor_cells": [387027], "id": 387028, "header": " Restore the Yelp Data to Classify", "annotation": [" Restore the Yelp Data to Classify"]}
{"funcs": ["B3.notnull"], "file": "/projects/bdata/jupyter/target/nb_324961.py", "target_func": "none_func", "context": "\nbad_d_prdctrIAT = bad_d_prdctrIAT[bad_d_prdctrIAT.B3.notnull()]\n", "target_lineno": 2393, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "bad_d_prdctrIAT"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "bad_d_prdctrIAT"}, {"type": "Index", "children": [6]}, {"type": "Call", "children": [7]}, {"type": "AttributeLoad", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "bad_d_prdctrIAT"}, {"type": "attr", "value": "B3"}, {"type": "attr", "value": "notnull"}], "stage": null, "id": 2889, "neighbor_cells": [2888], "header": "", "annotation": []}
{"funcs": ["pandas.DataFrame"], "file": "/projects/bdata/jupyter/target/nb_945887.py", "target_func": "none_func", "context": "\nscore = pd.DataFrame()\n", "target_lineno": 840, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "score"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}], "stage": null, "id": 1139189, "neighbor_cells": [1139188], "header": " LM Scoring", "annotation": [" LM Scoring"]}
{"funcs": ["pickle.load.copy", "apply", "numpy.log", "pickle.load.copy.rename"], "file": "/projects/bdata/jupyter/target/nb_564375.py", "target_func": "none_func", "context": "\ncreator_df_features = creator_data.copy(deep=True)\n\nfor feat in ['projects_backed', 'creator_created', 'creator_comments']:\n    creator_df_features[feat] = creator_df_features[feat].apply((lambda x: np.log((x + 1))))\n\ncreator_df_features.rename(columns={\n    'projects_backed': 'log_backed',\n    'creator_created': 'log_created',\n    'creator_comments': 'log_comments',\n}, inplace=True)\n", "target_lineno": 56, "nodes": [{"type": "Module", "children": [1, 9, 40]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "creator_df_features"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "creator_data"}, {"type": "attr", "value": "copy"}, {"type": "keyword", "children": [8], "value": "deep"}, {"type": "NameLoad", "value": "True"}, {"type": "For", "children": [10, 11, 15]}, {"type": "NameStore", "value": "feat"}, {"type": "ListLoad", "children": [12, 13, 14]}, {"type": "Str", "value": "projects_backed"}, {"type": "Str", "value": "creator_created"}, {"type": "Str", "value": "creator_comments"}, {"type": "body", "children": [16]}, {"type": "Assign", "children": [17, 21]}, {"type": "SubscriptStore", "children": [18, 19]}, {"type": "NameLoad", "value": "creator_df_features"}, {"type": "Index", "children": [20]}, {"type": "NameLoad", "value": "feat"}, {"type": "Call", "children": [22, 28]}, {"type": "AttributeLoad", "children": [23, 27]}, {"type": "SubscriptLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "creator_df_features"}, {"type": "Index", "children": [26]}, {"type": "NameLoad", "value": "feat"}, {"type": "attr", "value": "apply"}, {"type": "Lambda", "children": [29, 33]}, {"type": "arguments", "children": [30, 32]}, {"type": "args", "children": [31]}, {"type": "NameParam", "value": "x"}, {"type": "defaults"}, {"type": "Call", "children": [34, 37]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "log"}, {"type": "BinOpAdd", "children": [38, 39]}, {"type": "NameLoad", "value": "x"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [41]}, {"type": "Call", "children": [42, 45, 53]}, {"type": "AttributeLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "creator_df_features"}, {"type": "attr", "value": "rename"}, {"type": "keyword", "children": [46], "value": "columns"}, {"type": "Dict", "children": [47, 48, 49, 50, 51, 52]}, {"type": "Str", "value": "projects_backed"}, {"type": "Str", "value": "creator_created"}, {"type": "Str", "value": "creator_comments"}, {"type": "Str", "value": "log_backed"}, {"type": "Str", "value": "log_created"}, {"type": "Str", "value": "log_comments"}, {"type": "keyword", "children": [54], "value": "inplace"}, {"type": "NameLoad", "value": "True"}], "stage": null, "id": 1146625, "neighbor_cells": [1146624], "header": "", "annotation": [" Transform features", " Log transform all numerical values and convert categorical variables into binary vectors"]}
{"target_lineno": 636, "file": "/projects/bdata/jupyter/target/nb_197290.py", "context": "\nimmagineOrig = scipy.io.loadmat('debugExamples/dbOrigResult.mat')['binh_df0']\n\na = pyplot.imshow(immagineOrig[:, 0:80], aspect=10)\n\npyplot.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13, 28]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "immagineOrig"}, {"type": "SubscriptLoad", "children": [4, 11]}, {"type": "Call", "children": [5, 10]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "scipy"}, {"type": "attr", "value": "io"}, {"type": "attr", "value": "loadmat"}, {"type": "Str", "value": "debugExamples/dbOrigResult.mat"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "binh_df0"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "a"}, {"type": "Call", "children": [16, 19, 26]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "pyplot"}, {"type": "attr", "value": "imshow"}, {"type": "SubscriptLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "immagineOrig"}, {"type": "ExtSlice", "children": [22, 23]}, {"type": "Slice"}, {"type": "Slice", "children": [24, 25]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "80"}, {"type": "keyword", "value": "aspect", "children": [27]}, {"type": "Num", "value": "10"}, {"type": "Expr", "children": [29]}, {"type": "Call", "children": [30]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "pyplot"}, {"type": "attr", "value": "show"}], "funcs": ["scipy.io.loadmat", "matplotlib.pyplot.imshow", "matplotlib.pyplot.show"], "neighbor_cells": [914252], "id": 914253, "header": " Confronti Debug ", "annotation": [" Confronti Debug "]}
{"target_lineno": 64, "file": "/projects/bdata/jupyter/target/nb_927804.py", "context": "\npath_precip = '/Users/stukova/Documents/isotopes_precipitation/'\n\npath_vapor = '/Users/stukova/Documents/isotopes_vapour/'\n\npath_echam = '/Users/stukova/Documents/echam_precipitation/'\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "path_precip"}, {"type": "Str", "value": "/Users/stukova/Documents/isotopes_precipitation/"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "path_vapor"}, {"type": "Str", "value": "/Users/stukova/Documents/isotopes_vapour/"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "path_echam"}, {"type": "Str", "value": "/Users/stukova/Documents/echam_precipitation/"}], "funcs": [], "neighbor_cells": [480279], "id": 480280, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_135448.py", "target_func": "none_func", "context": "\nfrom sklearn.cross_validation import train_test_split\n", "target_lineno": 173, "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "train_test_split"}], "stage": null, "id": 870943, "neighbor_cells": [870942], "header": "", "annotation": []}
{"target_lineno": 57, "file": "/projects/bdata/jupyter/target/nb_122414.py", "context": "\nnumpy.__version__\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "numpy"}, {"type": "attr", "value": "__version__"}], "funcs": [], "neighbor_cells": [766645], "id": 766646, "header": "", "annotation": []}
{"target_lineno": 179, "file": "/projects/bdata/jupyter/target/nb_164209.py", "context": "\nprint(email_text_processed_st[0:3])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "email_text_processed_st"}, {"type": "Slice", "children": [7, 8]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "3"}], "funcs": ["print"], "neighbor_cells": [152564], "id": 152565, "header": "", "annotation": []}
{"target_lineno": 239, "file": "/projects/bdata/jupyter/target/nb_300261.py", "context": "\nmosaic_123 = ast2.stitch(image3, mosaic_12, margin=30)\n\nmosaic_123 = mosaic_123[0]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mosaic_123"}, {"type": "Call", "children": [4, 7, 8, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "ast2"}, {"type": "attr", "value": "stitch"}, {"type": "NameLoad", "value": "image3"}, {"type": "NameLoad", "value": "mosaic_12"}, {"type": "keyword", "value": "margin", "children": [10]}, {"type": "Num", "value": "30"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "mosaic_123"}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "mosaic_123"}, {"type": "Index", "children": [16]}, {"type": "Num", "value": "0"}], "funcs": ["alpenglow.stitching2.stitch"], "neighbor_cells": [687778], "id": 687779, "header": "", "annotation": []}
{"target_lineno": 283, "file": "/projects/bdata/jupyter/target/nb_954497.py", "context": "\nGPCPnormTypeI.plot()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "GPCPnormTypeI"}, {"type": "attr", "value": "plot"}], "funcs": ["plot"], "neighbor_cells": [799048], "id": 799049, "header": "", "annotation": []}
{"target_lineno": 624, "file": "/projects/bdata/jupyter/target/nb_348100.py", "context": "\nprint('Support Vector Machines Classifier:', classifier3.score(test_arrays, y_test))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Support Vector Machines Classifier:"}, {"type": "Call", "children": [6, 9, 10]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "classifier3"}, {"type": "attr", "value": "score"}, {"type": "NameLoad", "value": "test_arrays"}, {"type": "NameLoad", "value": "y_test"}], "funcs": ["print", "sklearn.svm.SVC.score"], "neighbor_cells": [902809], "id": 902810, "header": "", "annotation": []}
{"target_lineno": 117, "file": "/projects/bdata/jupyter/target/nb_738464.py", "context": "\npredictors_Model2 = ['sqft_living', 'bedrooms', 'bathrooms', 'lat', 'long', 'bed_bath_rooms']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "predictors_Model2"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9]}, {"type": "Str", "value": "sqft_living"}, {"type": "Str", "value": "bedrooms"}, {"type": "Str", "value": "bathrooms"}, {"type": "Str", "value": "lat"}, {"type": "Str", "value": "long"}, {"type": "Str", "value": "bed_bath_rooms"}], "funcs": [], "neighbor_cells": [363663], "id": 363664, "header": "", "annotation": []}
{"target_lineno": 47, "file": "/projects/bdata/jupyter/target/nb_952596.py", "context": "\nsimilarity = cosine_similarity(sM)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "similarity"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "cosine_similarity"}, {"type": "NameLoad", "value": "sM"}], "funcs": ["cosine_similarity"], "neighbor_cells": [218759], "id": 218760, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_767526.py", "target_func": "none_func", "context": "\ntest1\n", "target_lineno": 132, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "test1"}], "stage": null, "id": 636329, "neighbor_cells": [636328], "header": "", "annotation": []}
{"funcs": ["sklearn.model_selection.KFold.split", "sklearn.model_selection.KFold", "clf.fit", "scorefunc"], "file": "/projects/bdata/jupyter/target/nb_105754.py", "target_func": "none_func", "context": "\nfrom sklearn.model_selection import KFold\n\n\ndef cv_score(clf, X, y, scorefunc):\n    result = 0.0\n    nfold = 5\n    for (train, test) in KFold(nfold).split(X):\n        clf.fit(X[train], y[train])\n        result += scorefunc(clf, X[test], y[test])\n    return (result / nfold)\n", "target_lineno": 407, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.model_selection"}, {"type": "alias", "value": "KFold"}, {"type": "FunctionDef", "children": [4, 11, 60], "value": "cv_score"}, {"type": "arguments", "children": [5, 10]}, {"type": "args", "children": [6, 7, 8, 9]}, {"type": "NameParam", "value": "clf"}, {"type": "NameParam", "value": "X"}, {"type": "NameParam", "value": "y"}, {"type": "NameParam", "value": "scorefunc"}, {"type": "defaults"}, {"type": "body", "children": [12, 15, 18, 56]}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "result"}, {"type": "Num", "value": "0.0"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "nfold"}, {"type": "Num", "value": "5"}, {"type": "For", "children": [19, 22, 29]}, {"type": "TupleStore", "children": [20, 21]}, {"type": "NameStore", "value": "train"}, {"type": "NameStore", "value": "test"}, {"type": "Call", "children": [23, 28]}, {"type": "AttributeLoad", "children": [24, 27]}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "KFold"}, {"type": "NameLoad", "value": "nfold"}, {"type": "attr", "value": "split"}, {"type": "NameLoad", "value": "X"}, {"type": "body", "children": [30, 43]}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32, 35, 39]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "fit"}, {"type": "SubscriptLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "X"}, {"type": "Index", "children": [38]}, {"type": "NameLoad", "value": "train"}, {"type": "SubscriptLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "y"}, {"type": "Index", "children": [42]}, {"type": "NameLoad", "value": "train"}, {"type": "AugAssignAdd", "children": [44, 45]}, {"type": "NameStore", "value": "result"}, {"type": "Call", "children": [46, 47, 48, 52]}, {"type": "NameLoad", "value": "scorefunc"}, {"type": "NameLoad", "value": "clf"}, {"type": "SubscriptLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "X"}, {"type": "Index", "children": [51]}, {"type": "NameLoad", "value": "test"}, {"type": "SubscriptLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "y"}, {"type": "Index", "children": [55]}, {"type": "NameLoad", "value": "test"}, {"type": "Return", "children": [57]}, {"type": "BinOpDiv", "children": [58, 59]}, {"type": "NameLoad", "value": "result"}, {"type": "NameLoad", "value": "nfold"}, {"type": "decorator_list"}], "stage": null, "id": 108761, "neighbor_cells": [108760], "header": "", "annotation": [" The curve rises steeply for word count of one which is expected since most words would occur at most one ", " ", " The next biggest rise of the curve if between word count of 2 and 3 hence min df can be chosen as 2 ", " ", " The curve almost plateaus at word count of 80 hence max df can be chosen as 80 signifying that if a word occurs more", " than 80 times across all documents then it is too frequent to be considered useful for the vocabulary ", " The parameter alpha is chosen to be a small value that simply avoids having zeros in the probability computations This value can sometimes be chosen arbitrarily with domain expertise but we will use K fold cross validation In K fold cross validation we divide the data into K non overlapping parts We train on K 1 of the folds and test on the remaining fold We then iterate so that each fold serves as the test fold exactly once The function cv score performs the K fold cross validation algorithm for us but we need to pass a function that measures the performance of the algorithm on each fold "]}
{"target_lineno": 17, "file": "/projects/bdata/jupyter/target/nb_252977.py", "context": "\nfrom __future__ import division, print_function\n\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nget_ipython().run_line_magic('pylab', 'inline')\n\nimport numpy as np\n\nimport re\n\nimport os\n\nfrom subprocess import check_output\n\nfrom sklearn.datasets import load_files\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.svm import LinearSVC\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 6, 12, 20, 23, 25, 27, 29, 31, 35, 37]}, {"type": "ImportFrom", "value": "__future__", "children": [2, 3]}, {"type": "alias", "value": "division"}, {"type": "alias", "value": "print_function"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "warnings"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "warnings"}, {"type": "attr", "value": "filterwarnings"}, {"type": "Str", "value": "ignore"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 18, 19]}, {"type": "AttributeLoad", "children": [15, 17]}, {"type": "Call", "children": [16]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "pylab"}, {"type": "Str", "value": "inline"}, {"type": "Import", "children": [21]}, {"type": "alias", "value": "numpy", "children": [22]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [24]}, {"type": "alias", "value": "re"}, {"type": "Import", "children": [26]}, {"type": "alias", "value": "os"}, {"type": "ImportFrom", "value": "subprocess", "children": [28]}, {"type": "alias", "value": "check_output"}, {"type": "ImportFrom", "value": "sklearn.datasets", "children": [30]}, {"type": "alias", "value": "load_files"}, {"type": "ImportFrom", "value": "sklearn.feature_extraction.text", "children": [32, 33, 34]}, {"type": "alias", "value": "CountVectorizer"}, {"type": "alias", "value": "TfidfTransformer"}, {"type": "alias", "value": "TfidfVectorizer"}, {"type": "ImportFrom", "value": "sklearn.linear_model", "children": [36]}, {"type": "alias", "value": "LogisticRegression"}, {"type": "ImportFrom", "value": "sklearn.svm", "children": [38]}, {"type": "alias", "value": "LinearSVC"}], "funcs": ["warnings.filterwarnings", "get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 905571, "header": "", "annotation": [" usr bin env python", " coding utf 8", " center ", " img src img ml theme png ", " br ", " ", " img src img faculty logo jpg height 240 width 240 ", " br ", " center ", " a href https opensource org licenses MS RL Ms RL a ", " center 8 center ", " center Vowpal Wabbit sklearn linear model SGDClassifier center ", " SVM Vowpal Wabbit sklearn linear model SGDClassifier 7 "]}
{"funcs": ["groupby", "agg.reset_index", "groupby", "agg", "groupby"], "file": "/projects/bdata/jupyter/target/nb_929144.py", "target_func": "none_func", "context": "\nmask = (assesor.RP1PPTVAL == 0)\n\nassesor.loc[(mask, cols)].groupby(['DESC', 'DESC.1'])[cont_column].agg(['mean', 'std', 'count']).reset_index()\n", "target_lineno": 182, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mask"}, {"type": "CompareEq", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "assesor"}, {"type": "attr", "value": "RP1PPTVAL"}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 35]}, {"type": "Call", "children": [12, 31]}, {"type": "AttributeLoad", "children": [13, 30]}, {"type": "SubscriptLoad", "children": [14, 28]}, {"type": "Call", "children": [15, 25]}, {"type": "AttributeLoad", "children": [16, 24]}, {"type": "SubscriptLoad", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "assesor"}, {"type": "attr", "value": "loc"}, {"type": "Index", "children": [21]}, {"type": "TupleLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "mask"}, {"type": "NameLoad", "value": "cols"}, {"type": "attr", "value": "groupby"}, {"type": "ListLoad", "children": [26, 27]}, {"type": "Str", "value": "DESC"}, {"type": "Str", "value": "DESC.1"}, {"type": "Index", "children": [29]}, {"type": "NameLoad", "value": "cont_column"}, {"type": "attr", "value": "agg"}, {"type": "ListLoad", "children": [32, 33, 34]}, {"type": "Str", "value": "mean"}, {"type": "Str", "value": "std"}, {"type": "Str", "value": "count"}, {"type": "attr", "value": "reset_index"}], "stage": null, "id": 1061832, "neighbor_cells": [1061831], "header": "", "annotation": [" Some of this data doesn t quite smell right The property values RP1PPTVAL 25 75 being 0 is odd I was planning on ", " using that as my target variable Need to dig into this a bit more "]}
{"funcs": ["IPython.display.Image"], "file": "/projects/bdata/jupyter/target/nb_129321.py", "target_func": "none_func", "context": "\nfrom IPython.display import Image\n\nImage(filename='ks2sample_table.png')\n", "target_lineno": 139, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "IPython.display"}, {"type": "alias", "value": "Image"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 6]}, {"type": "NameLoad", "value": "Image"}, {"type": "keyword", "children": [7], "value": "filename"}, {"type": "Str", "value": "ks2sample_table.png"}], "stage": null, "id": 51639, "neighbor_cells": [51638], "header": "", "annotation": [" remember the Null hypothesis is rejected if ", " ", " D KS n1 n2 c alpha sqrt frac n1 n2 n1n2 ", " ", " where c alpha is the inverse of the KS distribution and you do not have to know how to get that cause there are tables that list critical values ", " ", " http www real statistics com tests normality and symmetry statistical tests normality symmetry kolmogorov smirnov test kolmogorov distribution ", " ", " but scipy is already giving you the p value s you do not have to worry about it i am still giving you the table FWI and if you want to do the coding of the KS test by hand", " "]}
{"target_lineno": 363, "file": "/projects/bdata/jupyter/target/nb_83546.py", "context": "\ngs.best_estimator_\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "gs"}, {"type": "attr", "value": "best_estimator_"}], "funcs": [], "neighbor_cells": [1048266], "id": 1048267, "header": "", "annotation": []}
{"target_lineno": 386, "file": "/projects/bdata/jupyter/target/nb_75998.py", "context": "\nget_ipython().magic('matplotlib inline')\n\nfig = plt.figure()\n\nplot_confusion_matrix(cm, classes=['Bad', 'Good'], normalize=True, title='Normalized confusion matrix')\n\nplt.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 14, 26]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "fig"}, {"type": "Call", "children": [11]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "figure"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 17, 18, 22, 24]}, {"type": "NameLoad", "value": "plot_confusion_matrix"}, {"type": "NameLoad", "value": "cm"}, {"type": "keyword", "value": "classes", "children": [19]}, {"type": "ListLoad", "children": [20, 21]}, {"type": "Str", "value": "Bad"}, {"type": "Str", "value": "Good"}, {"type": "keyword", "value": "normalize", "children": [23]}, {"type": "NameConstant"}, {"type": "keyword", "value": "title", "children": [25]}, {"type": "Str", "value": "Normalized confusion matrix"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "funcs": ["get_ipython.magic", "get_ipython", "matplotlib.pyplot.figure", "plot_confusion_matrix", "matplotlib.pyplot.show"], "neighbor_cells": [433372], "id": 433373, "header": "", "annotation": []}
{"target_lineno": 67, "file": "/projects/bdata/jupyter/target/nb_121893.py", "context": "\ndummies = pd.get_dummies(train)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dummies"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "get_dummies"}, {"type": "NameLoad", "value": "train"}], "funcs": ["pandas.get_dummies"], "neighbor_cells": [1090877], "id": 1090878, "header": "", "annotation": []}
{"funcs": ["plotly.offline.init_notebook_mode", "print"], "file": "/projects/bdata/jupyter/target/nb_121695.py", "target_func": "none_func", "context": "\nfrom __future__ import print_function\n\nfrom time import time\n\nimport logging\n\nimport scipy\n\nimport scipy.sparse as sp\n\nimport numpy as np\n\nimport pandas as pd\n\nimport plotly.plotly as py\n\nfrom plotly.graph_objs import *\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, iplot\n\nfrom sklearn import metrics, preprocessing\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.utils import shuffle\n\nfrom sklearn.metrics import classification_report, confusion_matrix, precision_score, recall_score, f1_score\n\nfrom scipy.stats.distributions import randint\n\nfrom sklearn.cross_validation import StratifiedKFold, train_test_split, cross_val_score\n\nfrom sklearn.ensemble import BaggingClassifier\n\nfrom sklearn.cross_validation import StratifiedKFold, KFold\n\nfrom sklearn.svm import SVC\n\nfrom sklearn.linear_model import SGDClassifier, Perceptron, PassiveAggressiveClassifier\n\ninit_notebook_mode()\n\nprint('Required Libraries loaded.')\n", "target_lineno": 7, "nodes": [{"type": "Module", "children": [1, 3, 5, 7, 9, 12, 15, 18, 21, 23, 27, 30, 32, 34, 40, 42, 46, 48, 51, 53, 57, 60]}, {"type": "ImportFrom", "children": [2], "value": "__future__"}, {"type": "alias", "value": "print_function"}, {"type": "ImportFrom", "children": [4], "value": "time"}, {"type": "alias", "value": "time"}, {"type": "Import", "children": [6]}, {"type": "alias", "value": "logging"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "scipy"}, {"type": "Import", "children": [10]}, {"type": "alias", "children": [11], "value": "scipy.sparse"}, {"type": "identifier", "value": "sp"}, {"type": "Import", "children": [13]}, {"type": "alias", "children": [14], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [16]}, {"type": "alias", "children": [17], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [19]}, {"type": "alias", "children": [20], "value": "plotly.plotly"}, {"type": "identifier", "value": "py"}, {"type": "ImportFrom", "children": [22], "value": "plotly.graph_objs"}, {"type": "alias", "value": "*"}, {"type": "ImportFrom", "children": [24, 25, 26], "value": "plotly.offline"}, {"type": "alias", "value": "download_plotlyjs"}, {"type": "alias", "value": "init_notebook_mode"}, {"type": "alias", "value": "iplot"}, {"type": "ImportFrom", "children": [28, 29], "value": "sklearn"}, {"type": "alias", "value": "metrics"}, {"type": "alias", "value": "preprocessing"}, {"type": "ImportFrom", "children": [31], "value": "sklearn.feature_extraction.text"}, {"type": "alias", "value": "TfidfVectorizer"}, {"type": "ImportFrom", "children": [33], "value": "sklearn.utils"}, {"type": "alias", "value": "shuffle"}, {"type": "ImportFrom", "children": [35, 36, 37, 38, 39], "value": "sklearn.metrics"}, {"type": "alias", "value": "classification_report"}, {"type": "alias", "value": "confusion_matrix"}, {"type": "alias", "value": "precision_score"}, {"type": "alias", "value": "recall_score"}, {"type": "alias", "value": "f1_score"}, {"type": "ImportFrom", "children": [41], "value": "scipy.stats.distributions"}, {"type": "alias", "value": "randint"}, {"type": "ImportFrom", "children": [43, 44, 45], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "StratifiedKFold"}, {"type": "alias", "value": "train_test_split"}, {"type": "alias", "value": "cross_val_score"}, {"type": "ImportFrom", "children": [47], "value": "sklearn.ensemble"}, {"type": "alias", "value": "BaggingClassifier"}, {"type": "ImportFrom", "children": [49, 50], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "StratifiedKFold"}, {"type": "alias", "value": "KFold"}, {"type": "ImportFrom", "children": [52], "value": "sklearn.svm"}, {"type": "alias", "value": "SVC"}, {"type": "ImportFrom", "children": [54, 55, 56], "value": "sklearn.linear_model"}, {"type": "alias", "value": "SGDClassifier"}, {"type": "alias", "value": "Perceptron"}, {"type": "alias", "value": "PassiveAggressiveClassifier"}, {"type": "Expr", "children": [58]}, {"type": "Call", "children": [59]}, {"type": "NameLoad", "value": "init_notebook_mode"}, {"type": "Expr", "children": [61]}, {"type": "Call", "children": [62, 63]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Required Libraries loaded."}], "stage": null, "id": 412946, "neighbor_cells": [-1], "header": "", "annotation": [" coding utf 8", " ACINHIBITOR RUNS", " Running the models in python "]}
{"funcs": ["pandas.read_sql"], "file": "/projects/bdata/jupyter/target/nb_738834.py", "target_func": "none_func", "context": "\npd.read_sql(implicitjoinsel, db)\n", "target_lineno": 1061, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_sql"}, {"type": "NameLoad", "value": "implicitjoinsel"}, {"type": "NameLoad", "value": "db"}], "stage": null, "id": 612555, "neighbor_cells": [612554], "header": "", "annotation": []}
{"target_lineno": 225, "file": "/projects/bdata/jupyter/target/nb_9472.py", "context": "\nmodel.most_similar(positive=['great'])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "most_similar"}, {"type": "keyword", "value": "positive", "children": [7]}, {"type": "ListLoad", "children": [8]}, {"type": "Str", "value": "great"}], "funcs": ["gensim.models.Word2Vec.most_similar"], "neighbor_cells": [206157], "id": 206158, "header": "", "annotation": []}
{"target_lineno": 33, "file": "/projects/bdata/jupyter/target/nb_592949.py", "context": "\nfrom ipywidgets import interact\n\nimport ipywidgets as widgets\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "ipywidgets", "children": [2]}, {"type": "alias", "value": "interact"}, {"type": "Import", "children": [4]}, {"type": "alias", "value": "ipywidgets", "children": [5]}, {"type": "identifier", "value": "widgets"}], "funcs": [], "neighbor_cells": [784033], "id": 784034, "header": "", "annotation": []}
{"target_lineno": 13, "file": "/projects/bdata/jupyter/target/nb_579454.py", "context": "\nfrom __future__ import print_function\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nimport os\n\nimport sys\n\nimport tarfile\n\nfrom IPython.display import display, Image\n\nfrom scipy import ndimage\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom six.moves.urllib.request import urlretrieve\n\nfrom six.moves import cPickle as pickle\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 6, 9, 11, 13, 15, 18, 20, 22, 24, 27]}, {"type": "ImportFrom", "value": "__future__", "children": [2]}, {"type": "alias", "value": "print_function"}, {"type": "Import", "children": [4]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [5]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [7]}, {"type": "alias", "value": "numpy", "children": [8]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [10]}, {"type": "alias", "value": "os"}, {"type": "Import", "children": [12]}, {"type": "alias", "value": "sys"}, {"type": "Import", "children": [14]}, {"type": "alias", "value": "tarfile"}, {"type": "ImportFrom", "value": "IPython.display", "children": [16, 17]}, {"type": "alias", "value": "display"}, {"type": "alias", "value": "Image"}, {"type": "ImportFrom", "value": "scipy", "children": [19]}, {"type": "alias", "value": "ndimage"}, {"type": "ImportFrom", "value": "sklearn.linear_model", "children": [21]}, {"type": "alias", "value": "LogisticRegression"}, {"type": "ImportFrom", "value": "six.moves.urllib.request", "children": [23]}, {"type": "alias", "value": "urlretrieve"}, {"type": "ImportFrom", "value": "six.moves", "children": [25]}, {"type": "alias", "value": "cPickle", "children": [26]}, {"type": "identifier", "value": "pickle"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 33, 34]}, {"type": "AttributeLoad", "children": [30, 32]}, {"type": "Call", "children": [31]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 24686, "header": "", "annotation": [" usr bin env python", " coding utf 8", " Deep Learning", " ", " ", " Assignment 1", " ", " ", " The objective of this assignment is to learn about simple data curation practices and familiarize you with some of the data we ll be reusing later ", " ", " This notebook uses the notMNIST http yaroslavvb blogspot com 2011 09 notmnist dataset html dataset to be used with python experiments This dataset is designed to look like the classic MNIST http yann lecun com exdb mnist dataset while looking a little more like real data it s a harder task and the data is a lot less clean than MNIST "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_947861.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nimport scipy as sp\n\nfrom scipy import stats\n\nimport pandas as pd\n", "target_lineno": 137, "nodes": [{"type": "Module", "children": [1, 4, 7, 9]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "scipy"}, {"type": "identifier", "value": "sp"}, {"type": "ImportFrom", "children": [8], "value": "scipy"}, {"type": "alias", "value": "stats"}, {"type": "Import", "children": [10]}, {"type": "alias", "children": [11], "value": "pandas"}, {"type": "identifier", "value": "pd"}], "stage": null, "id": 425549, "neighbor_cells": [425548], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_415239.py", "target_func": "none_func", "context": "\ndt_sws = [0.1, 1]\n\niscales = [10, 1]\n\nfortran_runtimes = []\n\npython_runtimes = []\n", "target_lineno": 720, "nodes": [{"type": "Module", "children": [1, 6, 11, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dt_sws"}, {"type": "ListLoad", "children": [4, 5]}, {"type": "Num", "value": "0.1"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "iscales"}, {"type": "ListLoad", "children": [9, 10]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "fortran_runtimes"}, {"type": "ListLoad"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "python_runtimes"}, {"type": "ListLoad"}], "stage": null, "id": 820064, "neighbor_cells": [820063], "header": "", "annotation": []}
{"target_lineno": 77, "file": "/projects/bdata/jupyter/target/nb_122818.py", "context": "\ndfRAW['T1_DWF_COUNT'].hist()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "dfRAW"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "T1_DWF_COUNT"}, {"type": "attr", "value": "hist"}], "funcs": ["hist"], "neighbor_cells": [286903], "id": 286904, "header": "", "annotation": []}
{"target_lineno": 3, "file": "/projects/bdata/jupyter/target/nb_287020.py", "context": "\nimport os\n\nimport json\n\nimport numpy as np\n\nimport scipy as sp\n\nfrom matplotlib import pyplot as plt\n\nfrom matplotlib import rcParams\n\nimport urllib\n\nfrom Chandra.Time import DateTime\n\nimport Chandra.cmd_states as cmd_states\n\nimport Ska.engarchive.fetch as fetch\n\nimport Ska.engarchive.fetch_eng as fetch_eng\n\nimport xija\n\nfrom plot_cxctime_custom import *\n\nget_ipython().run_line_magic('matplotlib', 'notebook')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 5, 8, 11, 14, 16, 18, 20, 23, 26, 29, 31, 33]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "os"}, {"type": "Import", "children": [4]}, {"type": "alias", "value": "json"}, {"type": "Import", "children": [6]}, {"type": "alias", "value": "numpy", "children": [7]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [9]}, {"type": "alias", "value": "scipy", "children": [10]}, {"type": "identifier", "value": "sp"}, {"type": "ImportFrom", "value": "matplotlib", "children": [12]}, {"type": "alias", "value": "pyplot", "children": [13]}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "value": "matplotlib", "children": [15]}, {"type": "alias", "value": "rcParams"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "urllib"}, {"type": "ImportFrom", "value": "Chandra.Time", "children": [19]}, {"type": "alias", "value": "DateTime"}, {"type": "Import", "children": [21]}, {"type": "alias", "value": "Chandra.cmd_states", "children": [22]}, {"type": "identifier", "value": "cmd_states"}, {"type": "Import", "children": [24]}, {"type": "alias", "value": "Ska.engarchive.fetch", "children": [25]}, {"type": "identifier", "value": "fetch"}, {"type": "Import", "children": [27]}, {"type": "alias", "value": "Ska.engarchive.fetch_eng", "children": [28]}, {"type": "identifier", "value": "fetch_eng"}, {"type": "Import", "children": [30]}, {"type": "alias", "value": "xija"}, {"type": "ImportFrom", "value": "plot_cxctime_custom", "children": [32]}, {"type": "alias", "value": "*"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 39, 40]}, {"type": "AttributeLoad", "children": [36, 38]}, {"type": "Call", "children": [37]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "notebook"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 888304, "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"funcs": ["sklearn.linear_model.LogisticRegression.predict", "sklearn.metrics.confusion_matrix"], "file": "/projects/bdata/jupyter/target/nb_687904.py", "target_func": "none_func", "context": "\nfrom sklearn import metrics\n\npreds = logreg.predict(X)\n\nprint metrics.confusion_matrix(y, preds)\n", "target_lineno": 548, "nodes": [{"type": "Module", "children": [1, 3, 10]}, {"type": "ImportFrom", "children": [2], "value": "sklearn"}, {"type": "alias", "value": "metrics"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "preds"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "logreg"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X"}, {"type": "Print", "children": [11]}, {"type": "Call", "children": [12, 15, 16]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "preds"}], "stage": null, "id": 808804, "neighbor_cells": [808803], "header": "", "annotation": [" That makes sense from the plot above because the probability of assorted 1 should be very low for such a low al value ", " images logistic betas png ", " Changing the beta 0 value shifts the curve horizontally whereas changing the beta 1 value changes the slope of the curve ", " Part 7 Comparing Logistic Regression with Other Models", " ", " Advantages of logistic regression ", " ", " Highly interpretable if you remember how ", " Model training and prediction are fast", " No tuning is required excluding regularization ", " Features don t need scaling", " Can perform well with a small number of observations", " Outputs well calibrated predicted probabilities", " ", " Disadvantages of logistic regression ", " ", " Presumes a linear relationship between the features and the log odds of the response", " Performance is generally not competitive with the best supervised learning methods", " Sensitive to irrelevant features", " Can t automatically learn feature interactions", " Bonus Confusion Matrix", " ", " "]}
{"funcs": ["sklearn.metrics.classification_report"], "file": "/projects/bdata/jupyter/target/nb_671456.py", "target_func": "none_func", "context": "\nfrom sklearn.metrics import classification_report\n\ncls_rep = classification_report(Y_test, Y_pred)\n\nprint cls_rep\n", "target_lineno": 169, "nodes": [{"type": "Module", "children": [1, 3, 9]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.metrics"}, {"type": "alias", "value": "classification_report"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "cls_rep"}, {"type": "Call", "children": [6, 7, 8]}, {"type": "NameLoad", "value": "classification_report"}, {"type": "NameLoad", "value": "Y_test"}, {"type": "NameLoad", "value": "Y_pred"}, {"type": "Print", "children": [10]}, {"type": "NameLoad", "value": "cls_rep"}], "stage": null, "id": 881000, "neighbor_cells": [880999], "header": "", "annotation": [" Create the classification report with the classification report function"]}
{"funcs": ["collections.Counter.most_common", "collections.Counter"], "file": "/projects/bdata/jupyter/target/nb_445158.py", "target_func": "none_func", "context": "\nfrom collections import Counter\n\nfor item in hashtagsdf.columns:\n    c = Counter(hashtagsdf[item]).most_common(3)\n    print c\n", "target_lineno": 787, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "collections"}, {"type": "alias", "value": "Counter"}, {"type": "For", "children": [4, 5, 8]}, {"type": "NameStore", "value": "item"}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "hashtagsdf"}, {"type": "attr", "value": "columns"}, {"type": "body", "children": [9, 21]}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "c"}, {"type": "Call", "children": [12, 20]}, {"type": "AttributeLoad", "children": [13, 19]}, {"type": "Call", "children": [14, 15]}, {"type": "NameLoad", "value": "Counter"}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "hashtagsdf"}, {"type": "Index", "children": [18]}, {"type": "NameLoad", "value": "item"}, {"type": "attr", "value": "most_common"}, {"type": "Num", "value": "3"}, {"type": "Print", "children": [22]}, {"type": "NameLoad", "value": "c"}], "stage": null, "id": 495543, "neighbor_cells": [495542], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_475954.py", "target_func": "none_func", "context": "\ndata.loc[((data['Park_ID'] == 19), 'is_park_ID_19')] = 1\n", "target_lineno": 438, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 15]}, {"type": "SubscriptStore", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "loc"}, {"type": "Index", "children": [7]}, {"type": "TupleLoad", "children": [8, 14]}, {"type": "CompareEq", "children": [9, 13]}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "Park_ID"}, {"type": "Num", "value": "19"}, {"type": "Str", "value": "is_park_ID_19"}, {"type": "Num", "value": "1"}], "stage": null, "id": 39710, "neighbor_cells": [39709], "header": "", "annotation": []}
{"funcs": ["pandas.merge.head"], "file": "/projects/bdata/jupyter/target/nb_48328.py", "target_func": "none_func", "context": "\ndf_zomato_fin_reduced.head(2)\n", "target_lineno": 300, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df_zomato_fin_reduced"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "2"}], "stage": null, "id": 741800, "neighbor_cells": [741799], "header": "", "annotation": []}
{"target_lineno": 32, "file": "/projects/bdata/jupyter/target/nb_8184.py", "context": "\ndf.head(5)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "5"}], "funcs": ["pandas.read_csv.head"], "neighbor_cells": [564889], "id": 564890, "header": "", "annotation": []}
{"target_lineno": 147, "file": "/projects/bdata/jupyter/target/nb_790872.py", "context": "\nearly.mean()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "early"}, {"type": "attr", "value": "mean"}], "funcs": ["mean"], "neighbor_cells": [439079], "id": 439080, "header": "", "annotation": []}
{"target_lineno": 94, "file": "/projects/bdata/jupyter/target/nb_711085.py", "context": "\nnp.random.randn()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "random"}, {"type": "attr", "value": "randn"}], "funcs": ["numpy.random.randn"], "neighbor_cells": [1009329], "id": 1009330, "header": "", "annotation": []}
{"target_lineno": 307, "file": "/projects/bdata/jupyter/target/nb_361320.py", "context": "\nplt.hist(valores_t, normed=True)\n\nplt.plot(y, stats.t.pdf(y, df=3), lw=3, color='black')\n\nplt.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 28]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "hist"}, {"type": "NameLoad", "value": "valores_t"}, {"type": "keyword", "value": "normed", "children": [8]}, {"type": "NameConstant"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14, 15, 24, 26]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "y"}, {"type": "Call", "children": [16, 21, 22]}, {"type": "AttributeLoad", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "stats"}, {"type": "attr", "value": "t"}, {"type": "attr", "value": "pdf"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "value": "df", "children": [23]}, {"type": "Num", "value": "3"}, {"type": "keyword", "value": "lw", "children": [25]}, {"type": "Num", "value": "3"}, {"type": "keyword", "value": "color", "children": [27]}, {"type": "Str", "value": "black"}, {"type": "Expr", "children": [29]}, {"type": "Call", "children": [30]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "funcs": ["matplotlib.pyplot.hist", "matplotlib.pyplot.plot", "scipy.stats.t.pdf", "matplotlib.pyplot.show"], "neighbor_cells": [456495], "id": 456496, "header": "", "annotation": []}
{"funcs": ["spUtils.suite2pInspect.extract.extract_suite2p"], "file": "/projects/bdata/jupyter/target/nb_53528.py", "target_func": "none_func", "context": "\n(DF, rois, cellProbsBinary, centroids) = extract_suite2p(suite2pPath, tifInfo=tifInfo, tifPath=tifPath, slice_=slice_, epoch=epoch_)\n", "target_lineno": 965, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 7]}, {"type": "TupleStore", "children": [3, 4, 5, 6]}, {"type": "NameStore", "value": "DF"}, {"type": "NameStore", "value": "rois"}, {"type": "NameStore", "value": "cellProbsBinary"}, {"type": "NameStore", "value": "centroids"}, {"type": "Call", "children": [8, 9, 10, 12, 14, 16]}, {"type": "NameLoad", "value": "extract_suite2p"}, {"type": "NameLoad", "value": "suite2pPath"}, {"type": "keyword", "children": [11], "value": "tifInfo"}, {"type": "NameLoad", "value": "tifInfo"}, {"type": "keyword", "children": [13], "value": "tifPath"}, {"type": "NameLoad", "value": "tifPath"}, {"type": "keyword", "children": [15], "value": "slice_"}, {"type": "NameLoad", "value": "slice_"}, {"type": "keyword", "children": [17], "value": "epoch"}, {"type": "NameLoad", "value": "epoch_"}], "stage": null, "id": 39996, "neighbor_cells": [39995], "header": "", "annotation": []}
{"target_lineno": 10, "file": "/projects/bdata/jupyter/target/nb_592351.py", "context": "\nfrom IPython.core.display import Image\n\nImage(url='http://scikit-learn.org/stable/_static/ml_map.png')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "IPython.core.display", "children": [2]}, {"type": "alias", "value": "Image"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 6]}, {"type": "NameLoad", "value": "Image"}, {"type": "keyword", "value": "url", "children": [7]}, {"type": "Str", "value": "http://scikit-learn.org/stable/_static/ml_map.png"}], "funcs": ["IPython.core.display.Image"], "neighbor_cells": [-1], "id": 1072839, "header": "", "annotation": [" usr bin env python", " coding utf 8", " Scikit Learn Machine learning in Python ", " Simple and efficient tools for data mining and data analysis", " Accessible to everybody and reusable in various contexts", " Built on NumPy SciPy and matplotlib", " Open source commercially usable BSD license"]}
{"funcs": ["pandas.tools.plotting.autocorrelation_plot"], "file": "/projects/bdata/jupyter/target/nb_606281.py", "target_func": "none_func", "context": "\nfrom pandas.tools.plotting import autocorrelation_plot\n\nautocorrelation_plot(store1_data.Sales)\n", "target_lineno": 51, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "pandas.tools.plotting"}, {"type": "alias", "value": "autocorrelation_plot"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 6]}, {"type": "NameLoad", "value": "autocorrelation_plot"}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "store1_data"}, {"type": "attr", "value": "Sales"}], "stage": null, "id": 427576, "neighbor_cells": [427575], "header": "", "annotation": [" Pandas and statsmodels both provide convenience plots for autocorrelations "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_754662.py", "target_func": "none_func", "context": "\nprint metrics_sub_15Q1\n", "target_lineno": 745, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "metrics_sub_15Q1"}], "stage": null, "id": 389707, "neighbor_cells": [389706], "header": " Updated base model", "annotation": [" Base model predictions Q2 Q4 2015 sales from Q1 sales results ", " Base model R2 0 946", " Base model MSE 98 106 140 133 ", " Cross val score R2 5 folds 0 659", " Train test split R2 0 966", " Updated base model"]}
{"target_lineno": 136, "file": "/projects/bdata/jupyter/target/nb_467436.py", "context": "\nmodel.coef_\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "coef_"}], "funcs": [], "neighbor_cells": [753214], "id": 753215, "header": " Let s look at the coefficients", "annotation": [" Let s look at the coefficients"]}
{"funcs": ["pandas.concat.boxplot", "pandas.concat.boxplot", "pandas.concat.boxplot"], "file": "/projects/bdata/jupyter/target/nb_412211.py", "target_func": "none_func", "context": "\ndf_gui3.boxplot(column='steps', by='model')\n\ndf_gui3.boxplot(column='steps', by='prepping')\n\ndf_gui3.boxplot(column='steps', by='technicality_levels')\n", "target_lineno": 570, "nodes": [{"type": "Module", "children": [1, 10, 19]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 8]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df_gui3"}, {"type": "attr", "value": "boxplot"}, {"type": "keyword", "children": [7], "value": "column"}, {"type": "Str", "value": "steps"}, {"type": "keyword", "children": [9], "value": "by"}, {"type": "Str", "value": "model"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15, 17]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "df_gui3"}, {"type": "attr", "value": "boxplot"}, {"type": "keyword", "children": [16], "value": "column"}, {"type": "Str", "value": "steps"}, {"type": "keyword", "children": [18], "value": "by"}, {"type": "Str", "value": "prepping"}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21, 24, 26]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "df_gui3"}, {"type": "attr", "value": "boxplot"}, {"type": "keyword", "children": [25], "value": "column"}, {"type": "Str", "value": "steps"}, {"type": "keyword", "children": [27], "value": "by"}, {"type": "Str", "value": "technicality_levels"}], "stage": null, "id": 456885, "neighbor_cells": [456884], "header": " 4 2 EDA for task steps as a function of model prepping and goal technicality", "annotation": [" 4 2 EDA for task steps as a function of model prepping and goal technicality"]}
{"target_lineno": 69, "file": "/projects/bdata/jupyter/target/nb_165691.py", "context": "\ndf = indicators[['School enrollment, secondary (% gross)', 'Life expectancy at birth, total (years)']]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "df"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "indicators"}, {"type": "Index", "children": [6]}, {"type": "ListLoad", "children": [7, 8]}, {"type": "Str", "value": "School enrollment, secondary (% gross)"}, {"type": "Str", "value": "Life expectancy at birth, total (years)"}], "funcs": [], "neighbor_cells": [1083619], "id": 1083620, "header": "", "annotation": [" Lets get our X and Y", " X School Enrollment in secondary level education", " Y Life Expectancy at birth"]}
{"target_lineno": 481, "file": "/projects/bdata/jupyter/target/nb_3176.py", "context": "\nget_next('part of ')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "get_next"}, {"type": "Str", "value": "part of "}], "funcs": ["get_next"], "neighbor_cells": [1203569], "id": 1203570, "header": "", "annotation": []}
{"funcs": ["trainingdat2mesh", "sklearn.linear_model.LogisticRegression.predict", "xx_ex2data2.ravel", "yy_ex2data2.ravel"], "file": "/projects/bdata/jupyter/target/nb_146895.py", "target_func": "none_func", "context": "\n(xx_ex2data2, yy_ex2data2) = trainingdat2mesh(X_ex2data2, h=0.02)\n\nZ_ex2data2 = logreg.predict(np.c_[(xx_ex2data2.ravel(), yy_ex2data2.ravel())])\n", "target_lineno": 185, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "xx_ex2data2"}, {"type": "NameStore", "value": "yy_ex2data2"}, {"type": "Call", "children": [6, 7, 8]}, {"type": "NameLoad", "value": "trainingdat2mesh"}, {"type": "NameLoad", "value": "X_ex2data2"}, {"type": "keyword", "children": [9], "value": "h"}, {"type": "Num", "value": "0.02"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "Z_ex2data2"}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "logreg"}, {"type": "attr", "value": "predict"}, {"type": "SubscriptLoad", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "c_"}, {"type": "Index", "children": [21]}, {"type": "TupleLoad", "children": [22, 26]}, {"type": "Call", "children": [23]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "xx_ex2data2"}, {"type": "attr", "value": "ravel"}, {"type": "Call", "children": [27]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "yy_ex2data2"}, {"type": "attr", "value": "ravel"}], "stage": null, "id": 165541, "neighbor_cells": [165540], "header": "", "annotation": []}
{"target_lineno": 610, "file": "/projects/bdata/jupyter/target/nb_401643.py", "context": "\n\ndef print_stats(session, feature_batch, label_batch, cost, accuracy):\n    '\\n    Print information about loss and validation accuracy\\n    : session: Current TensorFlow session\\n    : feature_batch: Batch of Numpy image data\\n    : label_batch: Batch of Numpy label data\\n    : cost: TensorFlow cost function\\n    : accuracy: TensorFlow accuracy function\\n    '\n    loss = session.run(cost, feed_dict={\n        x: feature_batch,\n        y: label_batch,\n        keep_prob: 1.0,\n    })\n    valid_acc = session.run(accuracy, feed_dict={\n        x: valid_features,\n        y: valid_labels,\n        keep_prob: 1.0,\n    })\n    print('Loss: {:>10.4f} Validation Accuracy: {:.6f}'.format(loss, valid_acc))\n    pass\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "print_stats", "children": [2, 10, 53]}, {"type": "arguments", "children": [3, 9]}, {"type": "args", "children": [4, 5, 6, 7, 8]}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [11, 13, 28, 43, 52]}, {"type": "Expr", "children": [12]}, {"type": "Str", "value": "\n    Print information about loss and validation accuracy\n    : session: Current TensorFlow session\n    : feature_batch: Batch of Numpy image data\n    : label_batch: Batch of Numpy label data\n    : cost: TensorFlow cost function\n    : accuracy: TensorFlow accuracy function\n    "}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "loss"}, {"type": "Call", "children": [16, 19, 20]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "session"}, {"type": "attr", "value": "run"}, {"type": "NameLoad", "value": "cost"}, {"type": "keyword", "value": "feed_dict", "children": [21]}, {"type": "Dict", "children": [22, 23, 24, 25, 26, 27]}, {"type": "NameLoad", "value": "x"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "keep_prob"}, {"type": "NameLoad", "value": "feature_batch"}, {"type": "NameLoad", "value": "label_batch"}, {"type": "Num", "value": "1.0"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "valid_acc"}, {"type": "Call", "children": [31, 34, 35]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "session"}, {"type": "attr", "value": "run"}, {"type": "NameLoad", "value": "accuracy"}, {"type": "keyword", "value": "feed_dict", "children": [36]}, {"type": "Dict", "children": [37, 38, 39, 40, 41, 42]}, {"type": "NameLoad", "value": "x"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "keep_prob"}, {"type": "NameLoad", "value": "valid_features"}, {"type": "NameLoad", "value": "valid_labels"}, {"type": "Num", "value": "1.0"}, {"type": "Expr", "children": [44]}, {"type": "Call", "children": [45, 46]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [47, 50, 51]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "Str", "value": "Loss: {:>10.4f} Validation Accuracy: {:.6f}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "loss"}, {"type": "NameLoad", "value": "valid_acc"}, {"type": "Pass"}, {"type": "decorator_list"}], "funcs": ["session.run", "session.run", "print", "format"], "neighbor_cells": [807229], "id": 807230, "header": "", "annotation": [" Show Stats", " Implement the function print stats to print loss and validation accuracy Use the global variables valid features and valid labels to calculate validation accuracy Use a keep probability of 1 0 to calculate the loss and validation accuracy "]}
{"target_lineno": 580, "file": "/projects/bdata/jupyter/target/nb_464603.py", "context": "\n\ndef visualize_tree(tree, feature_names):\n    'Create tree png using graphviz.\\n\\n    Args\\n    ----\\n    tree -- scikit-learn DecsisionTree.\\n    feature_names -- list of feature names.\\n    '\n    with open('dt.dot', 'w') as f:\n        export_graphviz(tree, out_file=f, feature_names=feature_names)\n    command = ['dot', '-Tpng', 'dt.dot', '-o', 'dt.png']\n    try:\n        subprocess.check_call(command)\n    except:\n        exit('Could not run dot, ie graphviz, to produce visualization')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "visualize_tree", "children": [2, 7, 51]}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [8, 10, 27, 35]}, {"type": "Expr", "children": [9]}, {"type": "Str", "value": "Create tree png using graphviz.\n\n    Args\n    ----\n    tree -- scikit-learn DecsisionTree.\n    feature_names -- list of feature names.\n    "}, {"type": "With", "children": [11, 18]}, {"type": "items", "children": [12]}, {"type": "withitem", "children": [13, 17]}, {"type": "Call", "children": [14, 15, 16]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "dt.dot"}, {"type": "Str", "value": "w"}, {"type": "NameStore", "value": "f"}, {"type": "body", "children": [19]}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21, 22, 23, 25]}, {"type": "NameLoad", "value": "export_graphviz"}, {"type": "NameLoad", "value": "tree"}, {"type": "keyword", "value": "out_file", "children": [24]}, {"type": "NameLoad", "value": "f"}, {"type": "keyword", "value": "feature_names", "children": [26]}, {"type": "NameLoad", "value": "feature_names"}, {"type": "Assign", "children": [28, 29]}, {"type": "NameStore", "value": "command"}, {"type": "ListLoad", "children": [30, 31, 32, 33, 34]}, {"type": "Str", "value": "dot"}, {"type": "Str", "value": "-Tpng"}, {"type": "Str", "value": "dt.dot"}, {"type": "Str", "value": "-o"}, {"type": "Str", "value": "dt.png"}, {"type": "Try", "children": [36, 43, 50]}, {"type": "body", "children": [37]}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 42]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "subprocess"}, {"type": "attr", "value": "check_call"}, {"type": "NameLoad", "value": "command"}, {"type": "handlers", "children": [44]}, {"type": "ExceptHandler", "children": [45]}, {"type": "body", "children": [46]}, {"type": "Expr", "children": [47]}, {"type": "Call", "children": [48, 49]}, {"type": "NameLoad", "value": "exit"}, {"type": "Str", "value": "Could not run dot, ie graphviz, to produce visualization"}, {"type": "finalbody"}, {"type": "decorator_list"}], "funcs": ["open", "sklearn.tree.export_graphviz", "subprocess.check_call", "exit"], "neighbor_cells": [978167], "id": 978168, "header": "", "annotation": []}
{"target_lineno": 29, "file": "/projects/bdata/jupyter/target/nb_16005.py", "context": "\ndf\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "df"}], "funcs": [], "neighbor_cells": [814623], "id": 814624, "header": "", "annotation": []}
{"funcs": ["matplotlib.pyplot.scatter", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.title", "matplotlib.pyplot.show"], "file": "/projects/bdata/jupyter/target/nb_155128.py", "target_func": "none_func", "context": "\nplt.scatter(y_test, y_predictions)\n\nplt.xlabel('True Quality')\n\nplt.ylabel('Predicted Quality')\n\nplt.title('Predicted Quality Against True Quality')\n\nplt.show()\n", "target_lineno": 1272, "nodes": [{"type": "Module", "children": [1, 8, 14, 20, 26]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_predictions"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "True Quality"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Predicted Quality"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Predicted Quality Against True Quality"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "stage": null, "id": 620928, "neighbor_cells": [620927], "header": "", "annotation": [" The cross val score helper function allows us to easily perform cross validation", " using the provided data and estimator We specified a five fold cross validation", " using the cv keyword argument that is each instance will be randomly assigned", " to one of the five partitions Each partition will be used to train and test the model ", " cross val score returns the value of the estimator s score method for each", " round The r squared scores range from 0 91 to 0 93 The mean of the scores 0 92 is a", " better estimate of the estimator s predictive power than the r squared score produced", " from a single train test split ", " Let s inspect some of the model s predictions and plot the true quality scores against the predicted scores "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_467128.py", "target_func": "none_func", "context": "\ndf.dtypes\n", "target_lineno": 76, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "dtypes"}], "stage": null, "id": 712966, "neighbor_cells": [712965], "header": " The basics", "annotation": [" Notice we have a table A spreadsheet And it indexed the rows Pandas borrowing from R calls it a DataFrame Lets see the types of the columns ", " ", " df in python parlance is an instance of the pd DataFrame class created by calling the pd read csv function which cllas the DataFrame constructor inside of it If you dont understand this sentence dont worry it will become clearer later What you need to take away is that df is a dataframe object and it has methods or functions belonging to it which allow it to do things For example df head is a method that shows the first 5 rows of the dataframe ", " ", " files pandastruct png ", " ", " The basics"]}
{"target_lineno": 234, "file": "/projects/bdata/jupyter/target/nb_546352.py", "context": "\nfrom collections import defaultdict\n\nfrequency = defaultdict(int)\n\nfor text in texts:\n    for token in text:\n        frequency[token] += 1\n\ntexts = [[token for token in text if (frequency[token] > 1)] for text in texts]\n\nfrom pprint import pprint\n\npprint(frequency)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 8, 22, 39, 41]}, {"type": "ImportFrom", "value": "collections", "children": [2]}, {"type": "alias", "value": "defaultdict"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "frequency"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "defaultdict"}, {"type": "NameLoad", "value": "int"}, {"type": "For", "children": [9, 10, 11]}, {"type": "NameStore", "value": "text"}, {"type": "NameLoad", "value": "texts"}, {"type": "body", "children": [12]}, {"type": "For", "children": [13, 14, 15]}, {"type": "NameStore", "value": "token"}, {"type": "NameLoad", "value": "text"}, {"type": "body", "children": [16]}, {"type": "AugAssignAdd", "children": [17, 21]}, {"type": "SubscriptStore", "children": [18, 19]}, {"type": "NameLoad", "value": "frequency"}, {"type": "Index", "children": [20]}, {"type": "NameLoad", "value": "token"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "texts"}, {"type": "ListComp", "children": [25, 36]}, {"type": "ListComp", "children": [26, 27]}, {"type": "NameLoad", "value": "token"}, {"type": "comprehension", "children": [28, 29, 30]}, {"type": "NameStore", "value": "token"}, {"type": "NameLoad", "value": "text"}, {"type": "CompareGt", "children": [31, 35]}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "frequency"}, {"type": "Index", "children": [34]}, {"type": "NameLoad", "value": "token"}, {"type": "Num", "value": "1"}, {"type": "comprehension", "children": [37, 38]}, {"type": "NameStore", "value": "text"}, {"type": "NameLoad", "value": "texts"}, {"type": "ImportFrom", "value": "pprint", "children": [40]}, {"type": "alias", "value": "pprint"}, {"type": "Expr", "children": [42]}, {"type": "Call", "children": [43, 44]}, {"type": "NameLoad", "value": "pprint"}, {"type": "NameLoad", "value": "frequency"}], "funcs": ["collections.defaultdict", "pprint.pprint"], "neighbor_cells": [558399], "id": 558400, "header": "", "annotation": []}
{"funcs": ["sqrt", "arctan2", "sin"], "file": "/projects/bdata/jupyter/target/nb_374009.py", "target_func": "none_func", "context": "\nspeed = sqrt(((u ** 2) + (v ** 2)))\n\ndir = arctan2(v, u)\n\nuperp = (speed * sin((dir + 1.06)))\n", "target_lineno": 170, "nodes": [{"type": "Module", "children": [1, 12, 18]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "speed"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "sqrt"}, {"type": "BinOpAdd", "children": [6, 9]}, {"type": "BinOpPow", "children": [7, 8]}, {"type": "NameLoad", "value": "u"}, {"type": "Num", "value": "2"}, {"type": "BinOpPow", "children": [10, 11]}, {"type": "NameLoad", "value": "v"}, {"type": "Num", "value": "2"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "dir"}, {"type": "Call", "children": [15, 16, 17]}, {"type": "NameLoad", "value": "arctan2"}, {"type": "NameLoad", "value": "v"}, {"type": "NameLoad", "value": "u"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "uperp"}, {"type": "BinOpMult", "children": [21, 22]}, {"type": "NameLoad", "value": "speed"}, {"type": "Call", "children": [23, 24]}, {"type": "NameLoad", "value": "sin"}, {"type": "BinOpAdd", "children": [25, 26]}, {"type": "NameLoad", "value": "dir"}, {"type": "Num", "value": "1.06"}], "stage": null, "id": 798148, "neighbor_cells": [798147], "header": " Rotate velocity vector", "annotation": [" Rotate velocity vector"]}
{"target_lineno": 123, "file": "/projects/bdata/jupyter/target/nb_844915.py", "context": "\nbatch_size = 4\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "batch_size"}, {"type": "Num", "value": "4"}], "funcs": [], "neighbor_cells": [121398], "id": 121399, "header": "", "annotation": []}
{"target_lineno": 78, "file": "/projects/bdata/jupyter/target/nb_252342.py", "context": "\niris_target['Species'] = iris_target['Species'].apply(flower)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "iris_target"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "Species"}, {"type": "Call", "children": [7, 13]}, {"type": "AttributeLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "iris_target"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "Species"}, {"type": "attr", "value": "apply"}, {"type": "NameLoad", "value": "flower"}], "funcs": ["apply"], "neighbor_cells": [1053901], "id": 1053902, "header": "", "annotation": []}
{"funcs": ["seaborn.kdeplot", "matplotlib.pylab.vlines", "matplotlib.pylab.vlines", "matplotlib.pylab.xlim"], "file": "/projects/bdata/jupyter/target/nb_188226.py", "target_func": "none_func", "context": "\nsns.kdeplot(I_MonthlyRide.sim, shade=True)\n\nplt.vlines(I_MonthlyRide.sim, 0, 1)\n\nplt.vlines(I_MonthlyRide.I, 0, 10, 'r')\n\nplt.xlim([(-0.7), 0.7])\n", "target_lineno": 407, "nodes": [{"type": "Module", "children": [1, 11, 21, 32]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "kdeplot"}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "I_MonthlyRide"}, {"type": "attr", "value": "sim"}, {"type": "keyword", "children": [10], "value": "shade"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16, 19, 20]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "vlines"}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "I_MonthlyRide"}, {"type": "attr", "value": "sim"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26, 29, 30, 31]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "vlines"}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "I_MonthlyRide"}, {"type": "attr", "value": "I"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "10"}, {"type": "Str", "value": "r"}, {"type": "Expr", "children": [33]}, {"type": "Call", "children": [34, 37]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlim"}, {"type": "ListLoad", "children": [38, 39]}, {"type": "Num", "value": "-0.7"}, {"type": "Num", "value": "0.7"}], "stage": null, "id": 261728, "neighbor_cells": [261727], "header": "", "annotation": []}
{"target_lineno": 164, "file": "/projects/bdata/jupyter/target/nb_979141.py", "context": "\nclf = linear_model.LinearRegression()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "clf"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "linear_model"}, {"type": "attr", "value": "LinearRegression"}], "funcs": ["sklearn.linear_model.LinearRegression"], "neighbor_cells": [346013], "id": 346014, "header": "", "annotation": []}
{"funcs": ["sklearn.svm.SVC.predict"], "file": "/projects/bdata/jupyter/target/nb_671512.py", "target_func": "none_func", "context": "\nclf.predict(digits.data[(-1):])\n", "target_lineno": 57, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "predict"}, {"type": "SubscriptLoad", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "digits"}, {"type": "attr", "value": "data"}, {"type": "Slice", "children": [11]}, {"type": "Num", "value": "-1"}], "stage": null, "id": 130603, "neighbor_cells": [130602], "header": "", "annotation": [" Let s use the last element for our prediction "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_35395.py", "target_func": "none_func", "context": "\n(p_value_matrix < 0.05)\n", "target_lineno": 193, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "CompareLt", "children": [3, 4]}, {"type": "NameLoad", "value": "p_value_matrix"}, {"type": "Num", "value": "0.05"}], "stage": null, "id": 357375, "neighbor_cells": [357374], "header": "", "annotation": []}
{"funcs": ["sklearn.cluster.KMeans.fit"], "file": "/projects/bdata/jupyter/target/nb_265857.py", "target_func": "none_func", "context": "\nkm.fit(X_scaled)\n", "target_lineno": 135, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "km"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_scaled"}], "stage": null, "id": 979479, "neighbor_cells": [979478], "header": "", "annotation": []}
{"funcs": ["str", "str", "str"], "file": "/projects/bdata/jupyter/target/nb_3078.py", "target_func": "none_func", "context": "\nDataName = ((('sensor' + str(SensorNum)) + '_') + Axis)\n\nSensorName = ('sensor' + str(SensorNum))\n\nDicName = ('MemSensor' + str(SensorNum))\n", "target_lineno": 57, "nodes": [{"type": "Module", "children": [1, 12, 19]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "DataName"}, {"type": "BinOpAdd", "children": [4, 11]}, {"type": "BinOpAdd", "children": [5, 10]}, {"type": "BinOpAdd", "children": [6, 7]}, {"type": "Str", "value": "sensor"}, {"type": "Call", "children": [8, 9]}, {"type": "NameLoad", "value": "str"}, {"type": "NameLoad", "value": "SensorNum"}, {"type": "Str", "value": "_"}, {"type": "NameLoad", "value": "Axis"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "SensorName"}, {"type": "BinOpAdd", "children": [15, 16]}, {"type": "Str", "value": "sensor"}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "str"}, {"type": "NameLoad", "value": "SensorNum"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "DicName"}, {"type": "BinOpAdd", "children": [22, 23]}, {"type": "Str", "value": "MemSensor"}, {"type": "Call", "children": [24, 25]}, {"type": "NameLoad", "value": "str"}, {"type": "NameLoad", "value": "SensorNum"}], "stage": null, "id": 166110, "neighbor_cells": [166109], "header": "", "annotation": []}
{"target_lineno": 13, "file": "/projects/bdata/jupyter/target/nb_170059.py", "context": "\nimport numpy as np\n\nimport scipy as sp\n\nimport scipy.sparse\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "scipy", "children": [6]}, {"type": "identifier", "value": "sp"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "scipy.sparse"}], "funcs": [], "neighbor_cells": [-1], "id": 256109, "header": "", "annotation": [" coding utf 8", " CX 4230 Spring 2016 11 A cellular automaton for the S I R model of infection", " ", " In this notebook you will use a cellular automaton to implement a model of the spread of infection which we will refer to as the susceptible infectious recovered CA SIR CA model ", " ", " The slides that accompany this notebook are available here 19 MiB https t square gatech edu access content group gtc 59b8 dc03 5a67 a5f4 88b8e4d5b69a cx4230 sp16 11 infection and diffusion pdf", " Setup", " ", " Some code setup run these cells declare victory and move on "]}
{"target_lineno": 361, "file": "/projects/bdata/jupyter/target/nb_895674.py", "context": "\nbatches = get_batches('train', batch_size=batch_size)\n\nval_batches = get_batches('valid', batch_size=batch_size)\n\n(imgs, labels) = next(batches)\n\nplots(imgs, titles=labels)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 15, 22]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "batches"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "get_batches"}, {"type": "Str", "value": "train"}, {"type": "keyword", "value": "batch_size", "children": [7]}, {"type": "NameLoad", "value": "batch_size"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "val_batches"}, {"type": "Call", "children": [11, 12, 13]}, {"type": "NameLoad", "value": "get_batches"}, {"type": "Str", "value": "valid"}, {"type": "keyword", "value": "batch_size", "children": [14]}, {"type": "NameLoad", "value": "batch_size"}, {"type": "Assign", "children": [16, 19]}, {"type": "TupleStore", "children": [17, 18]}, {"type": "NameStore", "value": "imgs"}, {"type": "NameStore", "value": "labels"}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "next"}, {"type": "NameLoad", "value": "batches"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 25, 26]}, {"type": "NameLoad", "value": "plots"}, {"type": "NameLoad", "value": "imgs"}, {"type": "keyword", "value": "titles", "children": [27]}, {"type": "NameLoad", "value": "labels"}], "funcs": ["get_batches", "get_batches", "next", "utils.plots"], "neighbor_cells": [1208168], "id": 1208169, "header": "", "annotation": [" From here we can use exactly the same steps as before to look at predictions from the model "]}
{"target_lineno": 87, "file": "/projects/bdata/jupyter/target/nb_550947.py", "context": "\ntrain_df['Customers_predicted_mean'] = train_df['Customers_predicted_mean'].fillna(train_df['Customers_predicted_mean'].mean())\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "train_df"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "Customers_predicted_mean"}, {"type": "Call", "children": [7, 13]}, {"type": "AttributeLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "train_df"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "Customers_predicted_mean"}, {"type": "attr", "value": "fillna"}, {"type": "Call", "children": [14]}, {"type": "AttributeLoad", "children": [15, 19]}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "train_df"}, {"type": "Index", "children": [18]}, {"type": "Str", "value": "Customers_predicted_mean"}, {"type": "attr", "value": "mean"}], "funcs": ["fillna", "mean"], "neighbor_cells": [854681], "id": 854682, "header": "", "annotation": []}
{"target_lineno": 212, "file": "/projects/bdata/jupyter/target/nb_914966.py", "context": "\nfrom sklearn import ensemble\n\nfst = ensemble.RandomForestClassifier()\n\nfst.fit(X_train, y_train)\n\ny_fst = fst.predict(X_test)\n\nprint(('Accuracy: %f' % metrics.accuracy_score(y_test, y_fst)))\n\ncm = metrics.confusion_matrix(y_test, y_fst)\n\nplot_confusion_matrix(cm, np.arange(1, 4))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 9, 16, 23, 34, 42]}, {"type": "ImportFrom", "value": "sklearn", "children": [2]}, {"type": "alias", "value": "ensemble"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "fst"}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "ensemble"}, {"type": "attr", "value": "RandomForestClassifier"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14, 15]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "fst"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "y_fst"}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "fst"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [27, 28]}, {"type": "Str", "value": "Accuracy: %f"}, {"type": "Call", "children": [29, 32, 33]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_fst"}, {"type": "Assign", "children": [35, 36]}, {"type": "NameStore", "value": "cm"}, {"type": "Call", "children": [37, 40, 41]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_fst"}, {"type": "Expr", "children": [43]}, {"type": "Call", "children": [44, 45, 46]}, {"type": "NameLoad", "value": "plot_confusion_matrix"}, {"type": "NameLoad", "value": "cm"}, {"type": "Call", "children": [47, 50, 51]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "4"}], "funcs": ["sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.RandomForestClassifier.fit", "sklearn.ensemble.RandomForestClassifier.predict", "print", "sklearn.metrics.accuracy_score", "sklearn.metrics.confusion_matrix", "plot_confusion_matrix", "numpy.arange"], "neighbor_cells": [1042926], "id": 1042927, "header": "", "annotation": []}
{"funcs": ["keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.flow_from_directory"], "file": "/projects/bdata/jupyter/target/nb_496556.py", "target_func": "none_func", "context": "\nfinal_test_datagen = ImageDataGenerator(rescale=(1.0 / 255), data_format='channels_first')\n\nfinal_test_generator = final_test_datagen.flow_from_directory('data/kaggle/test1', target_size=(150, 150), batch_size=batch_size, class_mode=None)\n", "target_lineno": 710, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "final_test_datagen"}, {"type": "Call", "children": [4, 5, 9]}, {"type": "NameLoad", "value": "ImageDataGenerator"}, {"type": "keyword", "children": [6], "value": "rescale"}, {"type": "BinOpDiv", "children": [7, 8]}, {"type": "Num", "value": "1.0"}, {"type": "Num", "value": "255"}, {"type": "keyword", "children": [10], "value": "data_format"}, {"type": "Str", "value": "channels_first"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "final_test_generator"}, {"type": "Call", "children": [14, 17, 18, 22, 24]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "final_test_datagen"}, {"type": "attr", "value": "flow_from_directory"}, {"type": "Str", "value": "data/kaggle/test1"}, {"type": "keyword", "children": [19], "value": "target_size"}, {"type": "TupleLoad", "children": [20, 21]}, {"type": "Num", "value": "150"}, {"type": "Num", "value": "150"}, {"type": "keyword", "children": [23], "value": "batch_size"}, {"type": "NameLoad", "value": "batch_size"}, {"type": "keyword", "children": [25], "value": "class_mode"}, {"type": "NameLoad", "value": "None"}], "stage": null, "id": 635838, "neighbor_cells": [635837], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.groupby", "count.unstack", "pandas.read_csv.groupby", "count", "pandas.read_csv.groupby"], "file": "/projects/bdata/jupyter/target/nb_90335.py", "target_func": "none_func", "context": "\ndf_store.groupby(['StoreType', 'Assortment'])['Store'].count().unstack()\n", "target_lineno": 214, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 17]}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 16]}, {"type": "SubscriptLoad", "children": [7, 14]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "df_store"}, {"type": "attr", "value": "groupby"}, {"type": "ListLoad", "children": [12, 13]}, {"type": "Str", "value": "StoreType"}, {"type": "Str", "value": "Assortment"}, {"type": "Index", "children": [15]}, {"type": "Str", "value": "Store"}, {"type": "attr", "value": "count"}, {"type": "attr", "value": "unstack"}], "stage": null, "id": 857019, "neighbor_cells": [857018], "header": "", "annotation": []}
{"target_lineno": 102, "file": "/projects/bdata/jupyter/target/nb_147263.py", "context": "\ncName_df = pd.DataFrame()\n\ncbUSA_df = cb_df[(cb_df['country_code'] == 'USA')]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "cName_df"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "cbUSA_df"}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "cb_df"}, {"type": "Index", "children": [12]}, {"type": "CompareEq", "children": [13, 17]}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "cb_df"}, {"type": "Index", "children": [16]}, {"type": "Str", "value": "country_code"}, {"type": "Str", "value": "USA"}], "funcs": ["pandas.DataFrame"], "neighbor_cells": [1111308], "id": 1111309, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_26037.py", "target_func": "none_func", "context": "\nraw_data.shape\n", "target_lineno": 339, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "raw_data"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 975944, "neighbor_cells": [975943], "header": " Stage 2 Deep Learning", "annotation": [" a id dnn a ", " Back to top top ", " ", " Stage 2 Deep Learning"]}
{"funcs": ["dotree", "sum"], "file": "/projects/bdata/jupyter/target/nb_532391.py", "target_func": "none_func", "context": "\nname = 'shortSENSE'\n\ndeficit = 1\n\nprint shortylabel[deficit]\n\ndotree(shortx, shorty[:, deficit], shortfeat, name)\n\nprint 'NUMBER OF DEFICITS:'\n\nprint sum(shorty[:, deficit])\n", "target_lineno": 251, "nodes": [{"type": "Module", "children": [1, 4, 7, 12, 24, 26]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "name"}, {"type": "Str", "value": "shortSENSE"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "deficit"}, {"type": "Num", "value": "1"}, {"type": "Print", "children": [8]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "shortylabel"}, {"type": "Index", "children": [11]}, {"type": "NameLoad", "value": "deficit"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 15, 16, 22, 23]}, {"type": "NameLoad", "value": "dotree"}, {"type": "NameLoad", "value": "shortx"}, {"type": "SubscriptLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "shorty"}, {"type": "ExtSlice", "children": [19, 20]}, {"type": "Slice"}, {"type": "Index", "children": [21]}, {"type": "NameLoad", "value": "deficit"}, {"type": "NameLoad", "value": "shortfeat"}, {"type": "NameLoad", "value": "name"}, {"type": "Print", "children": [25]}, {"type": "Str", "value": "NUMBER OF DEFICITS:"}, {"type": "Print", "children": [27]}, {"type": "Call", "children": [28, 29]}, {"type": "NameLoad", "value": "sum"}, {"type": "SubscriptLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "shorty"}, {"type": "ExtSlice", "children": [32, 33]}, {"type": "Slice"}, {"type": "Index", "children": [34]}, {"type": "NameLoad", "value": "deficit"}], "stage": null, "id": 87707, "neighbor_cells": [87706], "header": " Sensory System Not studied well ignore ", "annotation": [" Sensory System Not studied well ignore "]}
{"target_lineno": 544, "file": "/projects/bdata/jupyter/target/nb_443368.py", "context": "\nh_true = (1 - stats.norm().cdf(5))\n\nh_true\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "h_true"}, {"type": "BinOpSub", "children": [4, 5]}, {"type": "Num", "value": "1"}, {"type": "Call", "children": [6, 12]}, {"type": "AttributeLoad", "children": [7, 11]}, {"type": "Call", "children": [8]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "stats"}, {"type": "attr", "value": "norm"}, {"type": "attr", "value": "cdf"}, {"type": "Num", "value": "5"}, {"type": "Expr", "children": [14]}, {"type": "NameLoad", "value": "h_true"}], "funcs": ["scipy.stats.norm.cdf", "scipy.stats.norm"], "neighbor_cells": [790940], "id": 790941, "header": "", "annotation": []}
{"target_lineno": 26, "file": "/projects/bdata/jupyter/target/nb_565428.py", "context": "\nx1 = np.arange(1, 30, 0.5)\n\ny1 = fx(x1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x1"}, {"type": "Call", "children": [4, 7, 8, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "30"}, {"type": "Num", "value": "0.5"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "y1"}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "fx"}, {"type": "NameLoad", "value": "x1"}], "funcs": ["numpy.arange", "fx"], "neighbor_cells": [407993], "id": 407994, "header": "", "annotation": []}
{"funcs": ["get_ipython.magic", "get_ipython", "pandas.read_csv", "format", "pandas.read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_810743.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport re\n\nget_ipython().magic(u'matplotlib inline')\n\ndata = pd.read_csv('downloaded2.tsv', sep='\\t')\n\nprint 'Dataset has {} rows, {} columns'.format(*data.shape)\n\nprint data.head()\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 12, 19, 28, 36]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [8]}, {"type": "alias", "children": [9], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "re"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 18]}, {"type": "AttributeLoad", "children": [15, 17]}, {"type": "Call", "children": [16]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [22, 25, 26]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "downloaded2.tsv"}, {"type": "keyword", "children": [27], "value": "sep"}, {"type": "Str", "value": "\t"}, {"type": "Print", "children": [29]}, {"type": "Call", "children": [30, 33]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "Str", "value": "Dataset has {} rows, {} columns"}, {"type": "attr", "value": "format"}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "shape"}, {"type": "Print", "children": [37]}, {"type": "Call", "children": [38]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "head"}], "stage": null, "id": 660262, "neighbor_cells": [-1], "header": "", "annotation": []}
{"funcs": ["statsmodels.sandbox.stats.multicomp.multipletests"], "file": "/projects/bdata/jupyter/target/nb_157168.py", "target_func": "none_func", "context": "\nfrom statsmodels.sandbox.stats.multicomp import multipletests\n\n(reject, p_corrected, a1, a2) = multipletests(aucs_corr.p, alpha=0.05, method='holm')\n\naucs_corr['p_corrected'] = p_corrected\n\naucs_corr['reject'] = reject\n\naucs_corr\n", "target_lineno": 47, "nodes": [{"type": "Module", "children": [1, 3, 18, 24, 30]}, {"type": "ImportFrom", "children": [2], "value": "statsmodels.sandbox.stats.multicomp"}, {"type": "alias", "value": "multipletests"}, {"type": "Assign", "children": [4, 9]}, {"type": "TupleStore", "children": [5, 6, 7, 8]}, {"type": "NameStore", "value": "reject"}, {"type": "NameStore", "value": "p_corrected"}, {"type": "NameStore", "value": "a1"}, {"type": "NameStore", "value": "a2"}, {"type": "Call", "children": [10, 11, 14, 16]}, {"type": "NameLoad", "value": "multipletests"}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "aucs_corr"}, {"type": "attr", "value": "p"}, {"type": "keyword", "children": [15], "value": "alpha"}, {"type": "Num", "value": "0.05"}, {"type": "keyword", "children": [17], "value": "method"}, {"type": "Str", "value": "holm"}, {"type": "Assign", "children": [19, 23]}, {"type": "SubscriptStore", "children": [20, 21]}, {"type": "NameLoad", "value": "aucs_corr"}, {"type": "Index", "children": [22]}, {"type": "Str", "value": "p_corrected"}, {"type": "NameLoad", "value": "p_corrected"}, {"type": "Assign", "children": [25, 29]}, {"type": "SubscriptStore", "children": [26, 27]}, {"type": "NameLoad", "value": "aucs_corr"}, {"type": "Index", "children": [28]}, {"type": "Str", "value": "reject"}, {"type": "NameLoad", "value": "reject"}, {"type": "Expr", "children": [31]}, {"type": "NameLoad", "value": "aucs_corr"}], "stage": null, "id": 79217, "neighbor_cells": [79216], "header": "", "annotation": []}
{"funcs": ["range", "len", "append", "append", "append"], "file": "/projects/bdata/jupyter/target/nb_374035.py", "target_func": "none_func", "context": "\nnumber = []\n\nfor i in range(len(data)):\n    if (data.emergencytype[i] == 'EMS'):\n        number.append(0)\n    elif (data.emergencytype[i] == 'Fire'):\n        number.append(1)\n    elif (data.emergencytype[i] == 'Traffic'):\n        number.append(2)\n", "target_lineno": 119, "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "number"}, {"type": "ListLoad"}, {"type": "For", "children": [5, 6, 11]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "range"}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "data"}, {"type": "body", "children": [12]}, {"type": "If", "children": [13, 21, 28]}, {"type": "CompareEq", "children": [14, 20]}, {"type": "SubscriptLoad", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "emergencytype"}, {"type": "Index", "children": [19]}, {"type": "NameLoad", "value": "i"}, {"type": "Str", "value": "EMS"}, {"type": "body", "children": [22]}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "number"}, {"type": "attr", "value": "append"}, {"type": "Num", "value": "0"}, {"type": "orelse", "children": [29]}, {"type": "If", "children": [30, 38, 45]}, {"type": "CompareEq", "children": [31, 37]}, {"type": "SubscriptLoad", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "emergencytype"}, {"type": "Index", "children": [36]}, {"type": "NameLoad", "value": "i"}, {"type": "Str", "value": "Fire"}, {"type": "body", "children": [39]}, {"type": "Expr", "children": [40]}, {"type": "Call", "children": [41, 44]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "number"}, {"type": "attr", "value": "append"}, {"type": "Num", "value": "1"}, {"type": "orelse", "children": [46]}, {"type": "If", "children": [47, 55]}, {"type": "CompareEq", "children": [48, 54]}, {"type": "SubscriptLoad", "children": [49, 52]}, {"type": "AttributeLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "emergencytype"}, {"type": "Index", "children": [53]}, {"type": "NameLoad", "value": "i"}, {"type": "Str", "value": "Traffic"}, {"type": "body", "children": [56]}, {"type": "Expr", "children": [57]}, {"type": "Call", "children": [58, 61]}, {"type": "AttributeLoad", "children": [59, 60]}, {"type": "NameLoad", "value": "number"}, {"type": "attr", "value": "append"}, {"type": "Num", "value": "2"}], "stage": null, "id": 486445, "neighbor_cells": [486444], "header": "", "annotation": []}
{"target_lineno": 219, "file": "/projects/bdata/jupyter/target/nb_630179.py", "context": "\nnum_examples = len(X)\n\nnn_input_dim = 2\n\nnn_output_dim = 1\n\ny = np.reshape(y, (num_examples, 1))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 9, 12]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "num_examples"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "X"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "nn_input_dim"}, {"type": "Num", "value": "2"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "nn_output_dim"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "y"}, {"type": "Call", "children": [15, 18, 19]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "reshape"}, {"type": "NameLoad", "value": "y"}, {"type": "TupleLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "num_examples"}, {"type": "Num", "value": "1"}], "funcs": ["len", "numpy.reshape"], "neighbor_cells": [42715], "id": 42716, "header": "", "annotation": [" The graph shows the decision boundary learned by our Logistic Regression classifier It separates the data as good as it can using a straight line but it s unable to capture the moon shape of our data ", " Architecture", " ", " We build a 3 layer network with one input layer one hidden layer and one output layer ", " ", " The number of nodes in the input layer is determined by the dimensionality of our data which is 2 Since our classification problem is binary a single neuron in the output is sufficient In the hidden layer we are free to choose the number of neurons The more nodes in the hidden layer the more complex functions we will be able to fit On the other hand increasing the number of nodes in the hidden layer means increasing the computation effort and we are more prone to overfitting We will try different sizes of the hidden layer and see how it affects the output ", " We choose the sigmoid as activation function in the hidden and output layer ", " ", " img src pics simple NN png ", " How our network makes predictions", " ", " Our network makes predictions using forward propagation which is just a bunch of matrix multiplications and the application of the activation function s we defined above If x is the 2 dimensional input to our network then we calculate our prediction hat y one dimensional as follows ", " ", " begin aligned ", " z 1 xW 1 b 1 text total input to hidden layer ", " a 1 mathrm sigmoid z 1 text hidden layer activation ", " z 2 a 1W 2 b 2 text total input to output layer ", " a 2 hat y mathrm sigmoid z 2 text output layer activation ", " end aligned ", " ", " z i is the input of layer i and a i is the output of layer i after applying the activation function W 1 b 1 W 2 b 2 are parameters of our network which we need to learn from our training data You can think of them as matrices transforming data between layers of the network Looking at the matrix multiplications above we can figure out the dimensionality of these matrices If we use 500 nodes for our hidden layer then W 1 in mathbb R 2 times500 b 1 in mathbb R 500 W 2 in mathbb R 500 times1 b 2 in mathbb R 1 Now you see why we have more parameters if we increase the size of the hidden layer ", " Learning the Parameters", " ", " Learning the parameters for our network means finding parameters W 1 b 1 W 2 b 2 that minimize the error on our training data We use the Sum Squared Error SSE as our loss function ", " ", " begin aligned ", " L y hat y frac 1 2 sum n in N hat y y 2", " end aligned ", " ", " with N being the number of training examples hat y our predicted class and y the true class ", " Our goal is to find the parameters that minimize our loss function We can use batch gradient descent with a fixed learning rate to find its minimum ", " ", " As an input gradient descent needs the gradients vector of derivatives of the loss function with respect to our parameters frac partial L partial W 1 frac partial L partial b 1 frac partial L partial W 2 frac partial L partial b 2 To calculate these gradients we use backpropagation ", " ", " Applying the backpropagation formula we find the following gradients ", " ", " begin aligned ", " frac partial L partial W 2 A 1 T delta 2 ", " frac partial L partial b 2 sum delta 2 ", " frac partial L partial W 1 X T delta 1 ", " frac partial L partial b 1 sum delta 1 ", " end aligned ", " ", " ", " ", " begin aligned ", " delta 2 hat y y cdot sigmoid z 2 cdot 1 sigmoid z 2 ", " delta 1 delta 2 cdot W 2 T cdot sigmoid z 1 cdot 1 sigmoid z 1 ", " end aligned ", " ", " Detailed gradients for a single sample", " ", " Note that gradients above are for batch gradient descent i e we sum the error over all our training examples When we calculate the gradients for a single sample we do not account for the sum Then we obtain the following gradients ", " ", " begin aligned ", " frac partial L partial W 2 delta 2 cdot a 1 ", " frac partial L partial b 2 delta 2 ", " frac partial L partial W 1 delta 1 cdot x ", " frac partial L partial b 1 delta 1 ", " end aligned ", " ", " ", " ", " begin aligned ", " delta 2 hat y y cdot sigmoid z 2 cdot 1 sigmoid z 2 ", " delta 1 delta 2 cdot W 2 cdot sigmoid z 1 cdot 1 sigmoid z 1 ", " end aligned ", " ", " Recall the network configuration ", " ", " begin aligned ", " z 1 xW 1 b 1 text total input to hidden layer ", " a 1 mathrm sigmoid z 1 text hidden layer activation ", " z 2 a 1W 2 b 2 text total input to output layer ", " a 2 hat y mathrm sigmoid z 2 text output layer activation ", " end aligned ", " ", " By applying the chain rule we get ", " ", " begin aligned ", " frac partial L partial W 2 frac partial L partial a 2 cdot frac partial a 2 partial z 2 cdot frac partial z 2 partial W 2 ", " frac partial L partial b 2 frac partial L partial a 2 cdot frac partial a 2 partial z 2 cdot frac partial z 2 partial b 2 ", " frac partial L partial W 1 frac partial L partial a 1 cdot frac partial a 1 partial z 1 cdot frac partial z 1 partial W 1 ", " frac partial L partial z 2 cdot frac partial z 2 partial a 1 cdot frac partial a 1 partial z 1 cdot frac partial z 1 partial W 1 ", " frac partial L partial a 2 cdot frac partial a 2 partial z 2 cdot frac partial z 2 partial a 1 cdot frac partial a 1 partial z 1 cdot frac partial z 1 partial W 1 ", " frac partial L partial b 1 frac partial L partial a 1 cdot frac partial a 1 partial z 1 cdot frac partial z 1 partial b 1 ", " frac partial L partial z 2 cdot frac partial z 2 partial a 1 cdot frac partial a 1 partial z 1 cdot frac partial z 1 partial b 1 ", " frac partial L partial a 2 cdot frac partial a 2 partial z 2 cdot frac partial z 2 partial a 1 cdot frac partial a 1 partial z 1 cdot frac partial z 1 partial b 1 ", " end aligned ", " ", " Calculating the required partial derivatives ", " ", " begin aligned ", " frac partial L partial a 2 hat y y ", " frac partial a 2 partial z 2 sigmoid z 2 cdot 1 sigmoid z 2 ", " frac partial z 2 partial W 2 a 1 ", " frac partial z 2 partial b 2 1 ", " frac partial z 2 partial a 1 W 2 ", " frac partial a 1 partial z 1 sigmoid z 1 cdot 1 sigmoid z 1 ", " frac partial z 1 partial W 1 x ", " frac partial z 1 partial b 1 1 ", " end aligned ", " ", " Deltas delta 2 delta 1 ", " ", " begin aligned ", " delta 2 frac partial L partial a 2 cdot frac partial a 2 partial z 2 hat y y cdot sigmoid z 2 cdot 1 sigmoid z 2 ", " delta 1 frac partial L partial a 2 cdot frac partial a 2 partial z 2 cdot frac partial z 2 partial a 1 cdot frac partial a 1 partial z 1 delta 2 cdot W 2 cdot sigmoid z 1 cdot 1 sigmoid z 1 ", " end aligned ", " ", " Implementation", " ", " Now we are ready for our implementation We start by defining some useful variables and parameters for gradient descent "]}
{"target_lineno": 84, "file": "/projects/bdata/jupyter/target/nb_696156.py", "context": "\n(EW, EV) = linalg.eig(A)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "EW"}, {"type": "NameStore", "value": "EV"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "linalg"}, {"type": "attr", "value": "eig"}, {"type": "NameLoad", "value": "A"}], "funcs": ["scipy.linalg.eig"], "neighbor_cells": [633362], "id": 633363, "header": "", "annotation": [" We can find out the eigenvalues and eigenvectors of this matrix "]}
{"funcs": ["scipy.constants.find"], "file": "/projects/bdata/jupyter/target/nb_722393.py", "target_func": "none_func", "context": "\nprint const.find('alpha')\n", "target_lineno": 438, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "const"}, {"type": "attr", "value": "find"}, {"type": "Str", "value": "alpha"}], "stage": null, "id": 1008137, "neighbor_cells": [1008136], "header": "", "annotation": []}
{"target_lineno": 474, "file": "/projects/bdata/jupyter/target/nb_55795.py", "context": "\niters = 5000\n\ny = np.array([float(x) for x in open('points.csv', 'r').read().strip().split('\\n')])\n\n(trace, log_likelihoods) = model2(y, iters, init)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 30]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "iters"}, {"type": "Num", "value": "5000"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "y"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListComp", "children": [11, 14]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "float"}, {"type": "NameLoad", "value": "x"}, {"type": "comprehension", "children": [15, 16]}, {"type": "NameStore", "value": "x"}, {"type": "Call", "children": [17, 29]}, {"type": "AttributeLoad", "children": [18, 28]}, {"type": "Call", "children": [19]}, {"type": "AttributeLoad", "children": [20, 27]}, {"type": "Call", "children": [21]}, {"type": "AttributeLoad", "children": [22, 26]}, {"type": "Call", "children": [23, 24, 25]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "points.csv"}, {"type": "Str", "value": "r"}, {"type": "attr", "value": "read"}, {"type": "attr", "value": "strip"}, {"type": "attr", "value": "split"}, {"type": "Str", "value": "\n"}, {"type": "Assign", "children": [31, 34]}, {"type": "TupleStore", "children": [32, 33]}, {"type": "NameStore", "value": "trace"}, {"type": "NameStore", "value": "log_likelihoods"}, {"type": "Call", "children": [35, 36, 37, 38]}, {"type": "NameLoad", "value": "model2"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "iters"}, {"type": "NameLoad", "value": "init"}], "funcs": ["numpy.array", "float", "open.read.strip.split", "open.read.strip", "open.read", "open", "model2"], "neighbor_cells": [79097], "id": 79098, "header": "", "annotation": [" "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_887202.py", "target_func": "none_func", "context": "\nprint entropy(0.4)\n\nprint entropy(0.6)\n\nprint (entropy(0.5) + entropy(0.5))\n\nprint (entropy(0.25) + entropy(0.75))\n\nprint 'even three states:', ((entropy(0.333333333333) + entropy(0.333333333333)) + entropy(0.333333333333))\n\nprint '[0,49,5]', (entropy((49.0 / 54)) + entropy((5.0 / 54)))\n", "target_lineno": 401, "nodes": [{"type": "Module", "children": [1, 5, 9, 17, 25, 38]}, {"type": "Print", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.4"}, {"type": "Print", "children": [6]}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.6"}, {"type": "Print", "children": [10]}, {"type": "BinOpAdd", "children": [11, 14]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.5"}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.5"}, {"type": "Print", "children": [18]}, {"type": "BinOpAdd", "children": [19, 22]}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.25"}, {"type": "Call", "children": [23, 24]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.75"}, {"type": "Print", "children": [26, 27]}, {"type": "Str", "value": "even three states:"}, {"type": "BinOpAdd", "children": [28, 35]}, {"type": "BinOpAdd", "children": [29, 32]}, {"type": "Call", "children": [30, 31]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.333333333333"}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.333333333333"}, {"type": "Call", "children": [36, 37]}, {"type": "NameLoad", "value": "entropy"}, {"type": "Num", "value": "0.333333333333"}, {"type": "Print", "children": [39, 40]}, {"type": "Str", "value": "[0,49,5]"}, {"type": "BinOpAdd", "children": [41, 46]}, {"type": "Call", "children": [42, 43]}, {"type": "NameLoad", "value": "entropy"}, {"type": "BinOpDiv", "children": [44, 45]}, {"type": "Num", "value": "49.0"}, {"type": "Num", "value": "54"}, {"type": "Call", "children": [47, 48]}, {"type": "NameLoad", "value": "entropy"}, {"type": "BinOpDiv", "children": [49, 50]}, {"type": "Num", "value": "5.0"}, {"type": "Num", "value": "54"}], "stage": null, "id": 343236, "neighbor_cells": [343235], "header": "", "annotation": []}
{"target_lineno": 149, "file": "/projects/bdata/jupyter/target/nb_879177.py", "context": "\nsummm = np.empty(shape=100000)\n\nfor i in range(50):\n    v = a.rvs(100000)\n    summm += v\n\nsns.plt.title('Для $\\\\sum_{i = 1}^{50} X_i$', y=1.02)\n\nsns.distplot(summm)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 25, 35]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "summm"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "empty"}, {"type": "keyword", "value": "shape", "children": [8]}, {"type": "Num", "value": "100000"}, {"type": "For", "children": [10, 11, 14]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "50"}, {"type": "body", "children": [15, 22]}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "v"}, {"type": "Call", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "a"}, {"type": "attr", "value": "rvs"}, {"type": "Num", "value": "100000"}, {"type": "AugAssignAdd", "children": [23, 24]}, {"type": "NameStore", "value": "summm"}, {"type": "NameLoad", "value": "v"}, {"type": "Expr", "children": [26]}, {"type": "Call", "children": [27, 32, 33]}, {"type": "AttributeLoad", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Для $\\sum_{i = 1}^{50} X_i$"}, {"type": "keyword", "value": "y", "children": [34]}, {"type": "Num", "value": "1.02"}, {"type": "Expr", "children": [36]}, {"type": "Call", "children": [37, 40]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "distplot"}, {"type": "NameLoad", "value": "summm"}], "funcs": ["numpy.empty", "range", "scipy.stats.uniform.rvs", "seaborn.plt.title", "seaborn.distplot"], "neighbor_cells": [742045], "id": 742046, "header": "", "annotation": []}
{"funcs": ["sklearn.naive_bayes.MultinomialNB.fit.predict_log_proba", "sum", "sum"], "file": "/projects/bdata/jupyter/target/nb_519888.py", "target_func": "none_func", "context": "\n'\\nFunction\\n--------\\nlog_likelihood\\n\\nCompute the log likelihood of a dataset according to \\na bayesian classifier. \\nThe Log Likelihood is defined by\\n\\nL = Sum_fresh(logP(fresh)) + Sum_rotten(logP(rotten))\\n\\nWhere Sum_fresh indicates a sum over all fresh reviews, \\nand Sum_rotten indicates a sum over rotten reviews\\n    \\nParameters\\n----------\\nclf : Bayesian classifier\\nx : (nexample, nfeature) array\\n    The input data\\ny : (nexample) integer array\\n    Whether each review is Fresh\\n'\n\n\ndef log_likelihood(clf, x, y):\n    prob = clf.predict_log_proba(x)\n    rotten = (y == 0)\n    fresh = (~ rotten)\n    return (prob[(rotten, 0)].sum() + prob[(fresh, 1)].sum())\n", "target_lineno": 679, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Expr", "children": [2]}, {"type": "Str", "value": "\nFunction\n--------\nlog_likelihood\n\nCompute the log likelihood of a dataset according to \na bayesian classifier. \nThe Log Likelihood is defined by\n\nL = Sum_fresh(logP(fresh)) + Sum_rotten(logP(rotten))\n\nWhere Sum_fresh indicates a sum over all fresh reviews, \nand Sum_rotten indicates a sum over rotten reviews\n    \nParameters\n----------\nclf : Bayesian classifier\nx : (nexample, nfeature) array\n    The input data\ny : (nexample) integer array\n    Whether each review is Fresh\n"}, {"type": "FunctionDef", "children": [4, 10, 47], "value": "log_likelihood"}, {"type": "arguments", "children": [5, 9]}, {"type": "args", "children": [6, 7, 8]}, {"type": "NameParam", "value": "clf"}, {"type": "NameParam", "value": "x"}, {"type": "NameParam", "value": "y"}, {"type": "defaults"}, {"type": "body", "children": [11, 18, 23, 27]}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "prob"}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "predict_log_proba"}, {"type": "NameLoad", "value": "x"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "rotten"}, {"type": "CompareEq", "children": [21, 22]}, {"type": "NameLoad", "value": "y"}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "fresh"}, {"type": "UnaryOpInvert", "children": [26]}, {"type": "NameLoad", "value": "rotten"}, {"type": "Return", "children": [28]}, {"type": "BinOpAdd", "children": [29, 38]}, {"type": "Call", "children": [30]}, {"type": "AttributeLoad", "children": [31, 37]}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "prob"}, {"type": "Index", "children": [34]}, {"type": "TupleLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "rotten"}, {"type": "Num", "value": "0"}, {"type": "attr", "value": "sum"}, {"type": "Call", "children": [39]}, {"type": "AttributeLoad", "children": [40, 46]}, {"type": "SubscriptLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "prob"}, {"type": "Index", "children": [43]}, {"type": "TupleLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "fresh"}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "sum"}, {"type": "decorator_list"}], "stage": null, "id": 1128242, "neighbor_cells": [1128241], "header": "", "annotation": [" 3 5 We might say a model is over confident if the freshness fraction is usually closer to 0 5 than expected that is there is more uncertainty than the model predicted Likewise a model is under confident if the probabilities are usually further away from 0 5 Is this model generally over or under confident ", " Answer This model is over confident For a properly calibrated model we would expect 10 of the P Fresh 0 1 reviews to actually be fresh However the actual freshness rate is closer to 30 Likewise for reviews where P Fresh 0 9 the actuall freshness fraction is closer to 0 7 In other words there is more uncertainty in the outcome than implied by the model ", " Cross Validation", " ", " Our classifier has a few free parameters The two most important are ", " ", " 1 The min df keyword in CountVectorizer which will ignore words which appear in fewer than min df fraction of reviews Words that appear only once or twice can lead to overfitting since words which occur only a few times might correlate very well with Fresh Rotten reviews by chance in the training dataset ", " ", " 2 The alpha keyword http scikit learn org stable modules naive bayes html multinomial naive bayes in the Bayesian classifier is a smoothing parameter increasing the value decreases the sensitivity to any single feature and tends to pull prediction probabilities closer to 50 ", " ", " As discussed in lecture and HW2 a common technique for choosing appropriate values for these parameters is cross validation Let s choose good parameters by maximizing the cross validated log likelihood ", " ", " 3 6 Using clf predict logproba write a function that computes the log likelihood of a dataset"]}
{"target_lineno": 374, "file": "/projects/bdata/jupyter/target/nb_148510.py", "context": "\nnot_categorical = []\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "not_categorical"}, {"type": "ListLoad"}], "funcs": [], "neighbor_cells": [229400], "id": 229401, "header": "", "annotation": []}
{"target_lineno": 424, "file": "/projects/bdata/jupyter/target/nb_883907.py", "context": "\nthreshold = 2.9\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "threshold"}, {"type": "Num", "value": "2.9"}], "funcs": [], "neighbor_cells": [401392], "id": 401393, "header": "", "annotation": [" Here we have the exact opposite situation As the reconstruction error increases the recall decreases ", " Prediction", " ", " Our model is a bit different this time It doesn t know how to predict new values But we don t need that In order to predict whether or not a new unseen transaction is normal or fraudulent we ll calculate the reconstruction error from the transaction data itself If the error is larger than a predefined threshold we ll mark it as a fraud since our model should have a low error on normal transactions Let s pick that value "]}
{"funcs": ["numpy.array"], "file": "/projects/bdata/jupyter/target/nb_722271.py", "target_func": "none_func", "context": "\nb = np.array([4, 5, 6])\n\nprint a\n\nprint b\n\nprint (a > 2)\n\nprint a[(a > 2)]\n\nprint b[(a > 2)]\n\nb[(a == 3)] = 77\n\nprint b\n", "target_lineno": 273, "nodes": [{"type": "Module", "children": [1, 11, 13, 15, 19, 26, 33, 41]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "b"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [8, 9, 10]}, {"type": "Num", "value": "4"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "6"}, {"type": "Print", "children": [12]}, {"type": "NameLoad", "value": "a"}, {"type": "Print", "children": [14]}, {"type": "NameLoad", "value": "b"}, {"type": "Print", "children": [16]}, {"type": "CompareGt", "children": [17, 18]}, {"type": "NameLoad", "value": "a"}, {"type": "Num", "value": "2"}, {"type": "Print", "children": [20]}, {"type": "SubscriptLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "a"}, {"type": "Index", "children": [23]}, {"type": "CompareGt", "children": [24, 25]}, {"type": "NameLoad", "value": "a"}, {"type": "Num", "value": "2"}, {"type": "Print", "children": [27]}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "b"}, {"type": "Index", "children": [30]}, {"type": "CompareGt", "children": [31, 32]}, {"type": "NameLoad", "value": "a"}, {"type": "Num", "value": "2"}, {"type": "Assign", "children": [34, 40]}, {"type": "SubscriptStore", "children": [35, 36]}, {"type": "NameLoad", "value": "b"}, {"type": "Index", "children": [37]}, {"type": "CompareEq", "children": [38, 39]}, {"type": "NameLoad", "value": "a"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "77"}, {"type": "Print", "children": [42]}, {"type": "NameLoad", "value": "b"}], "stage": null, "id": 576643, "neighbor_cells": [576642], "header": "", "annotation": [" A few more examples "]}
{"target_lineno": 139, "file": "/projects/bdata/jupyter/target/nb_578398.py", "context": "\ndata[(data.Moteid == 56)]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [5]}, {"type": "CompareEq", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "Moteid"}, {"type": "Num", "value": "56"}], "funcs": [], "neighbor_cells": [993423], "id": 993424, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_693332.py", "target_func": "none_func", "context": "\nnumeric_columns = ['temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'month', 'hour']\n", "target_lineno": 173, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "numeric_columns"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9, 10, 11]}, {"type": "Str", "value": "temp"}, {"type": "Str", "value": "atemp"}, {"type": "Str", "value": "humidity"}, {"type": "Str", "value": "windspeed"}, {"type": "Str", "value": "casual"}, {"type": "Str", "value": "registered"}, {"type": "Str", "value": "month"}, {"type": "Str", "value": "hour"}], "stage": null, "id": 272736, "neighbor_cells": [272735], "header": " ", "annotation": [" "]}
{"target_lineno": 61, "file": "/projects/bdata/jupyter/target/nb_953984.py", "context": "\nx = arange(0, (dl + dt), dt)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x"}, {"type": "Call", "children": [4, 5, 6, 9]}, {"type": "NameLoad", "value": "arange"}, {"type": "Num", "value": "0"}, {"type": "BinOpAdd", "children": [7, 8]}, {"type": "NameLoad", "value": "dl"}, {"type": "NameLoad", "value": "dt"}, {"type": "NameLoad", "value": "dt"}], "funcs": ["numpy.arange"], "neighbor_cells": [426704], "id": 426705, "header": "", "annotation": []}
{"funcs": ["sklearn.cross_validation.cross_val_score", "sklearn.svm.SVC", "sklearn.cross_validation.cross_val_score.mean"], "file": "/projects/bdata/jupyter/target/nb_742533.py", "target_func": "none_func", "context": "\nfrom sklearn.cross_validation import cross_val_score\n\nscores = cross_val_score(SVC(), df[columns], df['retweet'], scoring='accuracy', cv=10)\n\nprint scores\n\nprint scores.mean()\n", "target_lineno": 110, "nodes": [{"type": "Module", "children": [1, 3, 21, 23]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "cross_val_score"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "scores"}, {"type": "Call", "children": [6, 7, 9, 13, 17, 19]}, {"type": "NameLoad", "value": "cross_val_score"}, {"type": "Call", "children": [8]}, {"type": "NameLoad", "value": "SVC"}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [12]}, {"type": "NameLoad", "value": "columns"}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [16]}, {"type": "Str", "value": "retweet"}, {"type": "keyword", "children": [18], "value": "scoring"}, {"type": "Str", "value": "accuracy"}, {"type": "keyword", "children": [20], "value": "cv"}, {"type": "Num", "value": "10"}, {"type": "Print", "children": [22]}, {"type": "NameLoad", "value": "scores"}, {"type": "Print", "children": [24]}, {"type": "Call", "children": [25]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "scores"}, {"type": "attr", "value": "mean"}], "stage": null, "id": 931107, "neighbor_cells": [931106], "header": "", "annotation": []}
{"target_lineno": 1054, "file": "/projects/bdata/jupyter/target/nb_279683.py", "context": "\nDf_ALL.count()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "Df_ALL"}, {"type": "attr", "value": "count"}], "funcs": ["pandas.read_csv.count"], "neighbor_cells": [1103107], "id": 1103108, "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_528493.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nimport pandas as pd\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nimport statsmodels.api as sm\n\nfrom statsmodels.formula.api import ols\n\nfrom scipy import stats\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 4, 7, 15, 18, 21, 24, 26]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 13, 14]}, {"type": "AttributeLoad", "children": [10, 12]}, {"type": "Call", "children": [11]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Import", "children": [16]}, {"type": "alias", "children": [17], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [19]}, {"type": "alias", "children": [20], "value": "seaborn"}, {"type": "identifier", "value": "sns"}, {"type": "Import", "children": [22]}, {"type": "alias", "children": [23], "value": "statsmodels.api"}, {"type": "identifier", "value": "sm"}, {"type": "ImportFrom", "children": [25], "value": "statsmodels.formula.api"}, {"type": "alias", "value": "ols"}, {"type": "ImportFrom", "children": [27], "value": "scipy"}, {"type": "alias", "value": "stats"}], "stage": null, "id": 516365, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"target_lineno": 796, "file": "/projects/bdata/jupyter/target/nb_410353.py", "context": "\npath_to_data = '../data/hour.csv'\n\ndf = pd.read_csv(path_to_data)\n\ndf.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "path_to_data"}, {"type": "Str", "value": "../data/hour.csv"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "NameLoad", "value": "path_to_data"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv", "pandas.read_csv.head"], "neighbor_cells": [378908], "id": 378909, "header": "", "annotation": [" Notice that this is some sort of hybrid of the look feel of the Lasso and Ridge ", " ", " Congratulations you understand regularization ", " ", " Remember regularization is a general concept It s any adjustment to the actual modeling step that tries to inherently control for overfitting most often by augmenting the cost function ", " Exercises Bike Sharing Dataset", " For these exercises we ll be exploring the Bike Sharing Dataset available here http archive ics uci edu ml datasets Bike Sharing Dataset The goal is to be able to predict the count of bikes being used at any given time given data on the time of day year week weather conditions etc ", " ", " Data Exploration", " Read the data in", " The field descriptions are available at the link and the data has been placed on the repo for you Make sure the hour csv file is somewhere on your local machine and then initialize the path to data variable below Use pandas read csv to load the data into a dataframe and then call head to make sure everything looks good "]}
{"funcs": ["pysal.Moran"], "file": "/projects/bdata/jupyter/target/nb_580135.py", "target_func": "none_func", "context": "\nI_SummerRide = ps.Moran(SummerRide, qW_CT)\n\n(I_SummerRide.I, I_SummerRide.p_sim)\n", "target_lineno": 881, "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "I_SummerRide"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "ps"}, {"type": "attr", "value": "Moran"}, {"type": "NameLoad", "value": "SummerRide"}, {"type": "NameLoad", "value": "qW_CT"}, {"type": "Expr", "children": [10]}, {"type": "TupleLoad", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "I_SummerRide"}, {"type": "attr", "value": "I"}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "I_SummerRide"}, {"type": "attr", "value": "p_sim"}], "stage": null, "id": 965789, "neighbor_cells": [965788], "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_674405.py", "target_func": "none_func", "context": "\nimport sys, os, datetime, time\n\nimport numpy as np\n\nimport pandas as pd\n\nimport numpy.ma as ma\n\nimport math\n\nimport matplotlib.dates as dates\n\nimport matplotlib.ticker as ticker\n\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.backends.backend_pdf import PdfPages\n\nfrom scipy.stats import norm\n\nfrom scipy import stats\n\nget_ipython().run_line_magic('pylab', 'inline')\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 6, 9, 12, 15, 17, 20, 23, 26, 28, 30, 32]}, {"type": "Import", "children": [2, 3, 4, 5]}, {"type": "alias", "value": "sys"}, {"type": "alias", "value": "os"}, {"type": "alias", "value": "datetime"}, {"type": "alias", "value": "time"}, {"type": "Import", "children": [7]}, {"type": "alias", "children": [8], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [10]}, {"type": "alias", "children": [11], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [13]}, {"type": "alias", "children": [14], "value": "numpy.ma"}, {"type": "identifier", "value": "ma"}, {"type": "Import", "children": [16]}, {"type": "alias", "value": "math"}, {"type": "Import", "children": [18]}, {"type": "alias", "children": [19], "value": "matplotlib.dates"}, {"type": "identifier", "value": "dates"}, {"type": "Import", "children": [21]}, {"type": "alias", "children": [22], "value": "matplotlib.ticker"}, {"type": "identifier", "value": "ticker"}, {"type": "Import", "children": [24]}, {"type": "alias", "children": [25], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "children": [27], "value": "matplotlib.backends.backend_pdf"}, {"type": "alias", "value": "PdfPages"}, {"type": "ImportFrom", "children": [29], "value": "scipy.stats"}, {"type": "alias", "value": "norm"}, {"type": "ImportFrom", "children": [31], "value": "scipy"}, {"type": "alias", "value": "stats"}, {"type": "Expr", "children": [33]}, {"type": "Call", "children": [34, 38, 39]}, {"type": "AttributeLoad", "children": [35, 37]}, {"type": "Call", "children": [36]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "pylab"}, {"type": "Str", "value": "inline"}], "stage": null, "id": 469888, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"funcs": ["reset_index.reset_index", "reset_index.head"], "file": "/projects/bdata/jupyter/target/nb_960597.py", "target_func": "none_func", "context": "\nlabels_train = labels_all[0:n_samples][msk]\n\nlabels_train = labels_train.reset_index()\n\nn_train = labels_train.shape[0]\n\nprint labels_train.shape, n_train\n\nlabels_train.head()\n", "target_lineno": 181, "nodes": [{"type": "Module", "children": [1, 11, 17, 25, 30]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "labels_train"}, {"type": "SubscriptLoad", "children": [4, 9]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "labels_all"}, {"type": "Slice", "children": [7, 8]}, {"type": "Num", "value": "0"}, {"type": "NameLoad", "value": "n_samples"}, {"type": "Index", "children": [10]}, {"type": "NameLoad", "value": "msk"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "labels_train"}, {"type": "Call", "children": [14]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "labels_train"}, {"type": "attr", "value": "reset_index"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "n_train"}, {"type": "SubscriptLoad", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "labels_train"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [24]}, {"type": "Num", "value": "0"}, {"type": "Print", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "labels_train"}, {"type": "attr", "value": "shape"}, {"type": "NameLoad", "value": "n_train"}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "labels_train"}, {"type": "attr", "value": "head"}], "stage": null, "id": 492173, "neighbor_cells": [492172], "header": "", "annotation": []}
{"funcs": ["numpy.vectorize"], "file": "/projects/bdata/jupyter/target/nb_224411.py", "target_func": "none_func", "context": "\nf_vec(z)\n", "target_lineno": 295, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "f_vec"}, {"type": "NameLoad", "value": "z"}], "stage": null, "id": 1049112, "neighbor_cells": [1049111], "header": "", "annotation": []}
{"funcs": ["sklearn.externals.six.StringIO", "sklearn.tree.export_graphviz", "pydot.graph_from_dot_data", "sklearn.externals.six.StringIO.getvalue", "pydot.graph_from_dot_data.write_pdf"], "file": "/projects/bdata/jupyter/target/nb_831703.py", "target_func": "none_func", "context": "\nimport pydot\n\nfrom sklearn.externals.six import StringIO\n\ndot_data = StringIO()\n\ntree.export_graphviz(dtcmodel, out_file=dot_data, feature_names=X_modified.columns, max_depth=5)\n\ngraph = pydot.graph_from_dot_data(dot_data.getvalue())\n\ngraph.write_pdf('dtcmodel1.pdf')\n", "target_lineno": 915, "nodes": [{"type": "Module", "children": [1, 3, 5, 9, 23, 33]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pydot"}, {"type": "ImportFrom", "children": [4], "value": "sklearn.externals.six"}, {"type": "alias", "value": "StringIO"}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "dot_data"}, {"type": "Call", "children": [8]}, {"type": "NameLoad", "value": "StringIO"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14, 15, 17, 21]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "tree"}, {"type": "attr", "value": "export_graphviz"}, {"type": "NameLoad", "value": "dtcmodel"}, {"type": "keyword", "children": [16], "value": "out_file"}, {"type": "NameLoad", "value": "dot_data"}, {"type": "keyword", "children": [18], "value": "feature_names"}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "X_modified"}, {"type": "attr", "value": "columns"}, {"type": "keyword", "children": [22], "value": "max_depth"}, {"type": "Num", "value": "5"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "graph"}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "pydot"}, {"type": "attr", "value": "graph_from_dot_data"}, {"type": "Call", "children": [30]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "dot_data"}, {"type": "attr", "value": "getvalue"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 38]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "graph"}, {"type": "attr", "value": "write_pdf"}, {"type": "Str", "value": "dtcmodel1.pdf"}], "stage": null, "id": 953845, "neighbor_cells": [953844], "header": "", "annotation": []}
{"target_lineno": 3, "file": "/projects/bdata/jupyter/target/nb_868868.py", "context": "\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nfrom sklearn.metrics import confusion_matrix, make_scorer, roc_auc_score\n\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV, train_test_split\n\nfrom sklearn.externals import joblib\n\nget_ipython().magic('matplotlib inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 13, 17, 21, 23]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "pandas", "children": [6]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [9]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "seaborn", "children": [12]}, {"type": "identifier", "value": "sns"}, {"type": "ImportFrom", "value": "sklearn.metrics", "children": [14, 15, 16]}, {"type": "alias", "value": "confusion_matrix"}, {"type": "alias", "value": "make_scorer"}, {"type": "alias", "value": "roc_auc_score"}, {"type": "ImportFrom", "value": "sklearn.model_selection", "children": [18, 19, 20]}, {"type": "alias", "value": "RandomizedSearchCV"}, {"type": "alias", "value": "GridSearchCV"}, {"type": "alias", "value": "train_test_split"}, {"type": "ImportFrom", "value": "sklearn.externals", "children": [22]}, {"type": "alias", "value": "joblib"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 29]}, {"type": "AttributeLoad", "children": [26, 28]}, {"type": "Call", "children": [27]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [-1], "id": 1158767, "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.SGDClassifier.predict", "sklearn.preprocessing.StandardScaler.fit.transform"], "file": "/projects/bdata/jupyter/target/nb_331372.py", "target_func": "none_func", "context": "\nprint clf.predict(scaler.transform([[4.7, 3.1]]))[0]\n", "target_lineno": 214, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 15]}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "predict"}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "scaler"}, {"type": "attr", "value": "transform"}, {"type": "ListLoad", "children": [12]}, {"type": "ListLoad", "children": [13, 14]}, {"type": "Num", "value": "4.7"}, {"type": "Num", "value": "3.1"}, {"type": "Index", "children": [16]}, {"type": "Num", "value": "0"}], "stage": null, "id": 913015, "neighbor_cells": [913014], "header": "", "annotation": [" Note that target class labeled 0 is linearly separable while class 1 and class 2 are not ", " 3 4 Evaluate Performance", " Now the end of the story suppose that we have a new flower with a sepal width of 4 7 and a sepal length of 3 1 and we want to predict its class We just have to apply our brand new classifier to it after normalizing The predict method takes an array of instances in this case with just one element and returns a list of predicted classes ", " ", " If our classifier is right this Iris flower is a setosa "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_635845.py", "target_func": "none_func", "context": "\nwindow.size\n", "target_lineno": 167, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "window"}, {"type": "attr", "value": "size"}], "stage": null, "id": 166565, "neighbor_cells": [166564], "header": "", "annotation": []}
{"target_lineno": 9, "file": "/projects/bdata/jupyter/target/nb_490677.py", "context": "\nfrom esn_classifier import EsnClassifier\n\nget_ipython().run_line_magic('load_ext', 'autoreload')\n\nget_ipython().run_line_magic('autoreload', '2')\n\nimport numpy as np\n\nimport pandas as pd\n\nimport scipy.sparse as sparse\n\nfrom sklearn import preprocessing\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import metrics\n\nimport matplotlib.pyplot as plt\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nfrom PIL import Image\n\nfrom scipy.io import loadmat\n\nimport math\n\nimport time\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 11, 19, 22, 25, 28, 30, 32, 34, 37, 45, 47, 49, 51]}, {"type": "ImportFrom", "value": "esn_classifier", "children": [2]}, {"type": "alias", "value": "EsnClassifier"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 9, 10]}, {"type": "AttributeLoad", "children": [6, 8]}, {"type": "Call", "children": [7]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "load_ext"}, {"type": "Str", "value": "autoreload"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 17, 18]}, {"type": "AttributeLoad", "children": [14, 16]}, {"type": "Call", "children": [15]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "autoreload"}, {"type": "Str", "value": "2"}, {"type": "Import", "children": [20]}, {"type": "alias", "value": "numpy", "children": [21]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [23]}, {"type": "alias", "value": "pandas", "children": [24]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [26]}, {"type": "alias", "value": "scipy.sparse", "children": [27]}, {"type": "identifier", "value": "sparse"}, {"type": "ImportFrom", "value": "sklearn", "children": [29]}, {"type": "alias", "value": "preprocessing"}, {"type": "ImportFrom", "value": "sklearn.model_selection", "children": [31]}, {"type": "alias", "value": "train_test_split"}, {"type": "ImportFrom", "value": "sklearn", "children": [33]}, {"type": "alias", "value": "metrics"}, {"type": "Import", "children": [35]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [36]}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 43, 44]}, {"type": "AttributeLoad", "children": [40, 42]}, {"type": "Call", "children": [41]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "ImportFrom", "value": "PIL", "children": [46]}, {"type": "alias", "value": "Image"}, {"type": "ImportFrom", "value": "scipy.io", "children": [48]}, {"type": "alias", "value": "loadmat"}, {"type": "Import", "children": [50]}, {"type": "alias", "value": "math"}, {"type": "Import", "children": [52]}, {"type": "alias", "value": "time"}], "funcs": ["get_ipython.run_line_magic", "get_ipython", "get_ipython.run_line_magic", "get_ipython", "get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [568530], "id": 568531, "header": "", "annotation": []}
{"target_lineno": 1637, "file": "/projects/bdata/jupyter/target/nb_654802.py", "context": "\nlen(euid_pqi['new_euid'].unique())\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "len"}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 10]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "euid_pqi"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "new_euid"}, {"type": "attr", "value": "unique"}], "funcs": ["len", "unique"], "neighbor_cells": [566513], "id": 566514, "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_684888.py", "target_func": "none_func", "context": "\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nimport numpy as np\n\nfrom sklearn import decomposition\n\nfrom sklearn.cross_validation import train_test_split\n\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn import cross_validation\n\nimport matplotlib.pyplot as plt\n", "target_lineno": 13, "nodes": [{"type": "Module", "children": [1, 9, 12, 14, 16, 18, 20, 22, 24]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Import", "children": [10]}, {"type": "alias", "children": [11], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "children": [13], "value": "sklearn"}, {"type": "alias", "value": "decomposition"}, {"type": "ImportFrom", "children": [15], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "train_test_split"}, {"type": "ImportFrom", "children": [17], "value": "sklearn.pipeline"}, {"type": "alias", "value": "Pipeline"}, {"type": "ImportFrom", "children": [19], "value": "sklearn.preprocessing"}, {"type": "alias", "value": "PolynomialFeatures"}, {"type": "ImportFrom", "children": [21], "value": "sklearn.linear_model"}, {"type": "alias", "value": "LinearRegression"}, {"type": "ImportFrom", "children": [23], "value": "sklearn"}, {"type": "alias", "value": "cross_validation"}, {"type": "Import", "children": [25]}, {"type": "alias", "children": [26], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}], "stage": null, "id": 923196, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8", " Homework 5", " Problem Description", " ", " You are given the data 04car train txt which includes a set of cars with their attributes Your goal is to build a linear model that considers the price of cars the first column in the data as the response of the other car attributes The homework will be graded based on two parts 80pt The following report on model estimation and selection and 20pt the prediction performance of your model using a set of test data held by the TA Details will be explained as follows ", " Preparation", " ", " You will need numpy and matplotlib as usual but also the wonderful packages from Scikit Learn http scikit learn org "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_867640.py", "target_func": "none_func", "context": "\nprint numeric_data_columns\n\nprint numeric_data_indices\n", "target_lineno": 128, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "numeric_data_columns"}, {"type": "Print", "children": [4]}, {"type": "NameLoad", "value": "numeric_data_indices"}], "stage": null, "id": 107436, "neighbor_cells": [107435], "header": "", "annotation": []}
{"funcs": ["sum"], "file": "/projects/bdata/jupyter/target/nb_880664.py", "target_func": "none_func", "context": "\nsum(((preds - y_test) ** 2))\n", "target_lineno": 220, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "sum"}, {"type": "BinOpPow", "children": [5, 8]}, {"type": "BinOpSub", "children": [6, 7]}, {"type": "NameLoad", "value": "preds"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Num", "value": "2"}], "stage": null, "id": 812359, "neighbor_cells": [812358], "header": "", "annotation": []}
{"target_lineno": 5, "file": "/projects/bdata/jupyter/target/nb_428869.py", "context": "\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nimport matplotlib.image as mpimage\n\nimport scipy.misc\n\nimport scipy.ndimage as ndimage\n\nimport skimage.filter as skif\n\nimport skimage.transform\n\nimport sklearn\n\nfrom sklearn.feature_selection import RFE\n\nfrom sklearn.svm import SVC\n\nfrom sklearn import neighbors, linear_model\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 13, 15, 18, 21, 23, 25, 27, 29, 32]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pandas", "children": [3]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "numpy", "children": [6]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [9]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "matplotlib.image", "children": [12]}, {"type": "identifier", "value": "mpimage"}, {"type": "Import", "children": [14]}, {"type": "alias", "value": "scipy.misc"}, {"type": "Import", "children": [16]}, {"type": "alias", "value": "scipy.ndimage", "children": [17]}, {"type": "identifier", "value": "ndimage"}, {"type": "Import", "children": [19]}, {"type": "alias", "value": "skimage.filter", "children": [20]}, {"type": "identifier", "value": "skif"}, {"type": "Import", "children": [22]}, {"type": "alias", "value": "skimage.transform"}, {"type": "Import", "children": [24]}, {"type": "alias", "value": "sklearn"}, {"type": "ImportFrom", "value": "sklearn.feature_selection", "children": [26]}, {"type": "alias", "value": "RFE"}, {"type": "ImportFrom", "value": "sklearn.svm", "children": [28]}, {"type": "alias", "value": "SVC"}, {"type": "ImportFrom", "value": "sklearn", "children": [30, 31]}, {"type": "alias", "value": "neighbors"}, {"type": "alias", "value": "linear_model"}, {"type": "Expr", "children": [33]}, {"type": "Call", "children": [34, 38, 39]}, {"type": "AttributeLoad", "children": [35, 37]}, {"type": "Call", "children": [36]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 729310, "header": " Initial Data Preparation and Investigation", "annotation": [" usr bin env python", " coding utf 8", " Initial Data Preparation and Investigation"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_279666.py", "target_func": "none_func", "context": "\nnodesByClusterID[1]\n", "target_lineno": 541, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "nodesByClusterID"}, {"type": "Index", "children": [5]}, {"type": "Num", "value": "1"}], "stage": null, "id": 837917, "neighbor_cells": [837916], "header": "", "annotation": []}
{"funcs": ["numpy.array", "numpy.array", "zip", "str"], "file": "/projects/bdata/jupyter/target/nb_867943.py", "target_func": "none_func", "context": "\nimport pandas\n\nkeys = array(['distributions', 'best-fit', 'min-boundary', 'max-boundary'])\n\nvalues = array([histograms, highest_points, full_min, full_max])\n\ndict_model = {\n    \n}\n\nfor (i, j) in zip(keys, values):\n    dict_model[str(i)] = j\n", "target_lineno": 762, "nodes": [{"type": "Module", "children": [1, 3, 12, 21, 24]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pandas"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "keys"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "array"}, {"type": "ListLoad", "children": [8, 9, 10, 11]}, {"type": "Str", "value": "distributions"}, {"type": "Str", "value": "best-fit"}, {"type": "Str", "value": "min-boundary"}, {"type": "Str", "value": "max-boundary"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "values"}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "array"}, {"type": "ListLoad", "children": [17, 18, 19, 20]}, {"type": "NameLoad", "value": "histograms"}, {"type": "NameLoad", "value": "highest_points"}, {"type": "NameLoad", "value": "full_min"}, {"type": "NameLoad", "value": "full_max"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "dict_model"}, {"type": "Dict"}, {"type": "For", "children": [25, 28, 32]}, {"type": "TupleStore", "children": [26, 27]}, {"type": "NameStore", "value": "i"}, {"type": "NameStore", "value": "j"}, {"type": "Call", "children": [29, 30, 31]}, {"type": "NameLoad", "value": "zip"}, {"type": "NameLoad", "value": "keys"}, {"type": "NameLoad", "value": "values"}, {"type": "body", "children": [33]}, {"type": "Assign", "children": [34, 40]}, {"type": "SubscriptStore", "children": [35, 36]}, {"type": "NameLoad", "value": "dict_model"}, {"type": "Index", "children": [37]}, {"type": "Call", "children": [38, 39]}, {"type": "NameLoad", "value": "str"}, {"type": "NameLoad", "value": "i"}, {"type": "NameLoad", "value": "j"}], "stage": null, "id": 196455, "neighbor_cells": [196454], "header": " Done This is a robust solution for breaking ties Let s now add it together And we should try populating it as well ", "annotation": [" Done This is a robust solution for breaking ties Let s now add it together And we should try populating it as well "]}
{"target_lineno": 81, "file": "/projects/bdata/jupyter/target/nb_929419.py", "context": "\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nget_ipython().magic('matplotlib inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pandas", "children": [3]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [6]}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 13]}, {"type": "AttributeLoad", "children": [10, 12]}, {"type": "Call", "children": [11]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [1282598], "id": 1282599, "header": "", "annotation": [" Let s visualize the data and get you started ", " ", " Exploratory Data Analysis", " ", " Time to put your data viz skills to the test Try to recreate the following plots make sure to import the libraries you ll need ", " ", " Import some libraries you think you ll need "]}
{"target_lineno": 23, "file": "/projects/bdata/jupyter/target/nb_677685.py", "context": "\nimport matplotlib.pyplot as plt\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [3]}, {"type": "identifier", "value": "plt"}], "funcs": [], "neighbor_cells": [1119975], "id": 1119976, "header": "", "annotation": [" ", " Filling holes and finding peaks", " ", " ", " We fill holes i e isolated dark spots in an image using morphological", " reconstruction by erosion Erosion expands the minimal values of the seed image", " until it encounters a mask image Thus the seed image and mask image represent", " the maximum and minimum possible values of the reconstructed image ", " ", " We start with an image containing both peaks and holes ", " ", " ", " "]}
{"target_lineno": 178, "file": "/projects/bdata/jupyter/target/nb_353097.py", "context": "\na = ligbind.WymSim(parms=parm, sets=1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "a"}, {"type": "Call", "children": [4, 7, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "ligbind"}, {"type": "attr", "value": "WymSim"}, {"type": "keyword", "value": "parms", "children": [8]}, {"type": "NameLoad", "value": "parm"}, {"type": "keyword", "value": "sets", "children": [10]}, {"type": "Num", "value": "1"}], "funcs": ["ligbind.WymSim"], "neighbor_cells": [913057], "id": 913058, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_11777.py", "target_func": "none_func", "context": "\nprint ridge_predictions\n", "target_lineno": 91, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "ridge_predictions"}], "stage": null, "id": 448215, "neighbor_cells": [448214], "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython", "pandas.read_csv", "format", "pandas.read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_592232.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\ndata = pd.read_csv('wholesale-customers.csv')\n\nprint 'Dataset has {} rows, {} columns'.format(*data.shape)\n\nprint data.head()\n", "target_lineno": 13, "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 18, 25, 33]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [8]}, {"type": "alias", "children": [9], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 16, 17]}, {"type": "AttributeLoad", "children": [13, 15]}, {"type": "Call", "children": [14]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "wholesale-customers.csv"}, {"type": "Print", "children": [26]}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "Str", "value": "Dataset has {} rows, {} columns"}, {"type": "attr", "value": "format"}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "shape"}, {"type": "Print", "children": [34]}, {"type": "Call", "children": [35]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "head"}], "stage": null, "id": 42249, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8", " Creating Customer Segments", " In this project you will analyze a dataset containing annual spending amounts for internal structure to understand the variation in the different types of customers that a wholesale distributor interacts with ", " ", " Instructions ", " ", " Run each code block below by pressing Shift Enter making sure to implement any steps marked with a TODO ", " Answer each question in the space provided by editing the blocks labeled Answer ", " When you are done submit the completed notebook ipynb with all code blocks executed as well as a pdf version File Download as "]}
{"funcs": ["numpy.asarray"], "file": "/projects/bdata/jupyter/target/nb_333972.py", "target_func": "none_func", "context": "\nnp.asarray(data)\n", "target_lineno": 44, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "asarray"}, {"type": "NameLoad", "value": "data"}], "stage": null, "id": 54095, "neighbor_cells": [-1], "header": "", "annotation": []}
{"funcs": ["sklearn.tree.DecisionTreeClassifier.fit", "DecisionTreeHelpers.cdt.getTreePicture", "IPython.display.Image"], "file": "/projects/bdata/jupyter/target/nb_479868.py", "target_func": "none_func", "context": "\ncols = ['PCDeployed_TF', 'EXO_TF', 'ValidDomainAdd', 'SRCount_wk1_TF']\n\ndt = clf.fit(df[cols], converted)\n\nlabel = ['PCDeployed_TF', 'EXO_TF', 'ValidDomainAdd', 'SRCount_wk1_TF']\n\noutFileName = ('EXO_PC_Domain_SR' + '.png')\n\ngetTreePicture(dt, cols, outFileName)\n\nImage(filename=outFileName)\n", "target_lineno": 578, "nodes": [{"type": "Module", "children": [1, 8, 19, 26, 31, 37]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "cols"}, {"type": "ListLoad", "children": [4, 5, 6, 7]}, {"type": "Str", "value": "PCDeployed_TF"}, {"type": "Str", "value": "EXO_TF"}, {"type": "Str", "value": "ValidDomainAdd"}, {"type": "Str", "value": "SRCount_wk1_TF"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "dt"}, {"type": "Call", "children": [11, 14, 18]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "fit"}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [17]}, {"type": "NameLoad", "value": "cols"}, {"type": "NameLoad", "value": "converted"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "label"}, {"type": "ListLoad", "children": [22, 23, 24, 25]}, {"type": "Str", "value": "PCDeployed_TF"}, {"type": "Str", "value": "EXO_TF"}, {"type": "Str", "value": "ValidDomainAdd"}, {"type": "Str", "value": "SRCount_wk1_TF"}, {"type": "Assign", "children": [27, 28]}, {"type": "NameStore", "value": "outFileName"}, {"type": "BinOpAdd", "children": [29, 30]}, {"type": "Str", "value": "EXO_PC_Domain_SR"}, {"type": "Str", "value": ".png"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 34, 35, 36]}, {"type": "NameLoad", "value": "getTreePicture"}, {"type": "NameLoad", "value": "dt"}, {"type": "NameLoad", "value": "cols"}, {"type": "NameLoad", "value": "outFileName"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 40]}, {"type": "NameLoad", "value": "Image"}, {"type": "keyword", "children": [41], "value": "filename"}, {"type": "NameLoad", "value": "outFileName"}], "stage": null, "id": 328109, "neighbor_cells": [328108], "header": "", "annotation": []}
{"target_lineno": 267, "file": "/projects/bdata/jupyter/target/nb_515866.py", "context": "\ndeltas = []\n\nfor stats in all_stats:\n    (stats_turn1, stats_turn2) = stats\n    delta = pd.DataFrame(data=(stats_turn2.values - stats_turn1.values), index=stats_turn1.index, columns=stats_turn1.columns)\n    deltas.append(delta.transpose())\n\ndelta = pd.concat(deltas)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 44]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "deltas"}, {"type": "ListLoad"}, {"type": "For", "children": [5, 6, 7]}, {"type": "NameStore", "value": "stats"}, {"type": "NameLoad", "value": "all_stats"}, {"type": "body", "children": [8, 13, 35]}, {"type": "Assign", "children": [9, 12]}, {"type": "TupleStore", "children": [10, 11]}, {"type": "NameStore", "value": "stats_turn1"}, {"type": "NameStore", "value": "stats_turn2"}, {"type": "NameLoad", "value": "stats"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "delta"}, {"type": "Call", "children": [16, 19, 27, 31]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "keyword", "value": "data", "children": [20]}, {"type": "BinOpSub", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "stats_turn2"}, {"type": "attr", "value": "values"}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "stats_turn1"}, {"type": "attr", "value": "values"}, {"type": "keyword", "value": "index", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "stats_turn1"}, {"type": "attr", "value": "index"}, {"type": "keyword", "value": "columns", "children": [32]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "stats_turn1"}, {"type": "attr", "value": "columns"}, {"type": "Expr", "children": [36]}, {"type": "Call", "children": [37, 40]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "deltas"}, {"type": "attr", "value": "append"}, {"type": "Call", "children": [41]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "delta"}, {"type": "attr", "value": "transpose"}, {"type": "Assign", "children": [45, 46]}, {"type": "NameStore", "value": "delta"}, {"type": "Call", "children": [47, 50]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "concat"}, {"type": "NameLoad", "value": "deltas"}], "funcs": ["pandas.DataFrame", "append", "pandas.concat.transpose", "pandas.concat"], "neighbor_cells": [672160], "id": 672161, "header": "", "annotation": [" En moyenne on a donc 5000 lecteurs de plus par circonscription qui ont d cid de ne pas aller aux urnes pour le second tour ", " Histogrammes pour les votes blancs nuls et les inscrits", " En compl ment on peut galement regarder les variations des votes blancs des nuls et du nombre d inscrit entre les deux tours "]}
{"target_lineno": 425, "file": "/projects/bdata/jupyter/target/nb_398931.py", "context": "\ndaysgrouped\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "daysgrouped"}], "funcs": [], "neighbor_cells": [622294], "id": 622295, "header": "", "annotation": []}
{"target_lineno": 681, "file": "/projects/bdata/jupyter/target/nb_865371.py", "context": "\nparam_grid = {\n    'selection_1__k': [70],\n    'selection_2__k': [900],\n    'model__voting': ['soft'],\n}\n\ngrid_search_metrics(pipe, param_grid)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "param_grid"}, {"type": "Dict", "children": [4, 5, 6, 7, 9, 11]}, {"type": "Str", "value": "selection_1__k"}, {"type": "Str", "value": "selection_2__k"}, {"type": "Str", "value": "model__voting"}, {"type": "ListLoad", "children": [8]}, {"type": "Num", "value": "70"}, {"type": "ListLoad", "children": [10]}, {"type": "Num", "value": "900"}, {"type": "ListLoad", "children": [12]}, {"type": "Str", "value": "soft"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16, 17]}, {"type": "NameLoad", "value": "grid_search_metrics"}, {"type": "NameLoad", "value": "pipe"}, {"type": "NameLoad", "value": "param_grid"}], "funcs": ["grid_search_metrics"], "neighbor_cells": [1122584], "id": 1122585, "header": "", "annotation": []}
{"target_lineno": 320, "file": "/projects/bdata/jupyter/target/nb_529921.py", "context": "\nfig1 = sm.qqplot(reg1.resid, line='r')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "fig1"}, {"type": "Call", "children": [4, 7, 10]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "sm"}, {"type": "attr", "value": "qqplot"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "reg1"}, {"type": "attr", "value": "resid"}, {"type": "keyword", "value": "line", "children": [11]}, {"type": "Str", "value": "r"}], "funcs": ["statsmodels.api.qqplot"], "neighbor_cells": [848632], "id": 848633, "header": " Model fit analysis", "annotation": [" Model fit analysis"]}
{"target_lineno": 84, "file": "/projects/bdata/jupyter/target/nb_772992.py", "context": "\ndata.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [723536], "id": 723537, "header": "", "annotation": []}
{"funcs": ["pandas.concat.head.plot", "pandas.concat.head", "pandas.concat.head.plot.set_title", "pandas.concat.head.plot.set_xlabel", "pandas.concat.head.plot.set_yticklabels", "matplotlib.pyplot.savefig"], "file": "/projects/bdata/jupyter/target/nb_348349.py", "target_func": "none_func", "context": "\nax = county_15_new.head(10).plot(x='County', kind='bar', y='Sum Sale', figsize=(15, 8))\n\nax.set_title('Total Sales in top 10 Counties in 2015 IOWA')\n\nax.set_xlabel('County')\n\nax.set_yticklabels(['$0', '$1,000,000', '$2,000,000', '$3,000,000', '$4,000,000', '$5,000,000', '$6,000,000', '$7,000,000', '$8,000,000'], fontsize=12)\n\nplt.savefig('top10_counties_total_sales_bar.png')\n", "target_lineno": 585, "nodes": [{"type": "Module", "children": [1, 21, 27, 33, 50]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [4, 11, 13, 15, 17]}, {"type": "AttributeLoad", "children": [5, 10]}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "county_15_new"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "10"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "children": [12], "value": "x"}, {"type": "Str", "value": "County"}, {"type": "keyword", "children": [14], "value": "kind"}, {"type": "Str", "value": "bar"}, {"type": "keyword", "children": [16], "value": "y"}, {"type": "Str", "value": "Sum Sale"}, {"type": "keyword", "children": [18], "value": "figsize"}, {"type": "TupleLoad", "children": [19, 20]}, {"type": "Num", "value": "15"}, {"type": "Num", "value": "8"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "ax"}, {"type": "attr", "value": "set_title"}, {"type": "Str", "value": "Total Sales in top 10 Counties in 2015 IOWA"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "ax"}, {"type": "attr", "value": "set_xlabel"}, {"type": "Str", "value": "County"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 38, 48]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "ax"}, {"type": "attr", "value": "set_yticklabels"}, {"type": "ListLoad", "children": [39, 40, 41, 42, 43, 44, 45, 46, 47]}, {"type": "Str", "value": "$0"}, {"type": "Str", "value": "$1,000,000"}, {"type": "Str", "value": "$2,000,000"}, {"type": "Str", "value": "$3,000,000"}, {"type": "Str", "value": "$4,000,000"}, {"type": "Str", "value": "$5,000,000"}, {"type": "Str", "value": "$6,000,000"}, {"type": "Str", "value": "$7,000,000"}, {"type": "Str", "value": "$8,000,000"}, {"type": "keyword", "children": [49], "value": "fontsize"}, {"type": "Num", "value": "12"}, {"type": "Expr", "children": [51]}, {"type": "Call", "children": [52, 55]}, {"type": "AttributeLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "savefig"}, {"type": "Str", "value": "top10_counties_total_sales_bar.png"}], "stage": null, "id": 73112, "neighbor_cells": [73111], "header": " Plotting total sale of each county for top 15 counties in descending sale", "annotation": [" Plotting total sale of each county for top 15 counties in descending sale"]}
{"target_lineno": 334, "file": "/projects/bdata/jupyter/target/nb_631547.py", "context": "\nshot_df1.corr()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "shot_df1"}, {"type": "attr", "value": "corr"}], "funcs": ["pandas.DataFrame.corr"], "neighbor_cells": [631536], "id": 631537, "header": "", "annotation": [" To compute the correlation matrix of a DataFrame "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_378291.py", "target_func": "none_func", "context": "\nlr_pred3[(-10):]\n", "target_lineno": 2728, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "lr_pred3"}, {"type": "Slice", "children": [5]}, {"type": "Num", "value": "-10"}], "stage": null, "id": 209256, "neighbor_cells": [209255], "header": " Compare Predictions", "annotation": [" Compare Predictions"]}
{"funcs": ["sklearn.metrics.r2_score"], "file": "/projects/bdata/jupyter/target/nb_215317.py", "target_func": "none_func", "context": "\n\ndef performance_metric(y_true, y_predict):\n    ' Calculates and returns the performance score between \\n        true and predicted values based on the metric chosen. '\n    from sklearn.metrics import r2_score\n    score = r2_score(y_true, y_predict)\n    return score\n", "target_lineno": 111, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 7, 20], "value": "performance_metric"}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "NameParam", "value": "y_true"}, {"type": "NameParam", "value": "y_predict"}, {"type": "defaults"}, {"type": "body", "children": [8, 10, 12, 18]}, {"type": "Expr", "children": [9]}, {"type": "Str", "value": " Calculates and returns the performance score between \n        true and predicted values based on the metric chosen. "}, {"type": "ImportFrom", "children": [11], "value": "sklearn.metrics"}, {"type": "alias", "value": "r2_score"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "score"}, {"type": "Call", "children": [15, 16, 17]}, {"type": "NameLoad", "value": "r2_score"}, {"type": "NameLoad", "value": "y_true"}, {"type": "NameLoad", "value": "y_predict"}, {"type": "Return", "children": [19]}, {"type": "NameLoad", "value": "score"}, {"type": "decorator_list"}], "stage": null, "id": 793501, "neighbor_cells": [793500], "header": "", "annotation": [" Question 1 Feature Observation", " As a reminder we are using three features from the Boston housing dataset RM LSTAT and PTRATIO For each data point neighborhood ", " RM is the average number of rooms among homes in the neighborhood ", " LSTAT is the percentage of homeowners in the neighborhood considered lower class working poor ", " PTRATIO is the ratio of students to teachers in primary and secondary schools in the neighborhood ", " ", " Using your intuition for each of the three features above do you think that an increase in the value of that feature would lead to an increase in the value of MEDV or a decrease in the value of MEDV Justify your answer for each ", " Hint Would you expect a home that has an RM value of 6 be worth more or less than a home that has an RM value of 7 ", " Answer Higher RM likely leads correlates to an increase in MEDV since houses with more rooms tend to cost more Higher LSTAT likely correlates to a decrease in MEDV since the working poor cannot afford higher priced homes Higher PTRATIO may correlate to a lower MEDV because higher student to teacher ratios may indicate a poorer school district which would drive house prices down ", " ", " ", " Developing a Model", " In this second section of the project you will develop the tools and techniques necessary for a model to make a prediction Being able to make accurate evaluations of each model s performance through the use of these tools and techniques helps to greatly reinforce the confidence in your predictions ", " Implementation Define a Performance Metric", " It is difficult to measure the quality of a given model without quantifying its performance over training and testing This is typically done using some type of performance metric whether it is through calculating some type of error the goodness of fit or some other useful measurement For this project you will be calculating the coefficient of determination http stattrek com statistics dictionary aspx definition coefficient of determination R sup 2 sup to quantify your model s performance The coefficient of determination for a model is a useful statistic in regression analysis as it often describes how good that model is at making predictions ", " ", " The values for R sup 2 sup range from 0 to 1 which captures the percentage of squared correlation between the predicted and actual values of the target variable A model with an R sup 2 sup of 0 is no better than a model that always predicts the mean of the target variable whereas a model with an R sup 2 sup of 1 perfectly predicts the target variable Any value between 0 and 1 indicates what percentage of the target variable using this model can be explained by the features A model can be given a negative R sup 2 sup as well which indicates that the model is arbitrarily worse than one that always predicts the mean of the target variable ", " ", " For the performance metric function in the code cell below you will need to implement the following ", " Use r2 score from sklearn metrics to perform a performance calculation between y true and y predict ", " Assign the performance score to the score variable "]}
{"target_lineno": 62, "file": "/projects/bdata/jupyter/target/nb_551537.py", "context": "\nfrom multiprocessing import Pool\n\n\ndef resize(imgname):\n    img = cv2.imread(os.path.join(path['train'], (str(imgname) + '.jpg')))\n    img = cv2.resize(img, (64, 64))\n    cv2.imwrite('{}/{}.jpg'.format(path['resized'], imgname), img)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "multiprocessing", "children": [2]}, {"type": "alias", "value": "Pool"}, {"type": "FunctionDef", "value": "resize", "children": [4, 8, 55]}, {"type": "arguments", "children": [5, 7]}, {"type": "args", "children": [6]}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [9, 30, 40]}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "img"}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "cv2"}, {"type": "attr", "value": "imread"}, {"type": "Call", "children": [16, 21, 25]}, {"type": "AttributeLoad", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "join"}, {"type": "SubscriptLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "path"}, {"type": "Index", "children": [24]}, {"type": "Str", "value": "train"}, {"type": "BinOpAdd", "children": [26, 29]}, {"type": "Call", "children": [27, 28]}, {"type": "NameLoad", "value": "str"}, {"type": "NameLoad", "value": "imgname"}, {"type": "Str", "value": ".jpg"}, {"type": "Assign", "children": [31, 32]}, {"type": "NameStore", "value": "img"}, {"type": "Call", "children": [33, 36, 37]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "cv2"}, {"type": "attr", "value": "resize"}, {"type": "NameLoad", "value": "img"}, {"type": "TupleLoad", "children": [38, 39]}, {"type": "Num", "value": "64"}, {"type": "Num", "value": "64"}, {"type": "Expr", "children": [41]}, {"type": "Call", "children": [42, 45, 54]}, {"type": "AttributeLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "cv2"}, {"type": "attr", "value": "imwrite"}, {"type": "Call", "children": [46, 49, 53]}, {"type": "AttributeLoad", "children": [47, 48]}, {"type": "Str", "value": "{}/{}.jpg"}, {"type": "attr", "value": "format"}, {"type": "SubscriptLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "path"}, {"type": "Index", "children": [52]}, {"type": "Str", "value": "resized"}, {"type": "NameLoad", "value": "imgname"}, {"type": "NameLoad", "value": "img"}, {"type": "decorator_list"}], "funcs": ["cv2.imread", "os.path.join", "str", "cv2.resize", "cv2.imwrite", "format"], "neighbor_cells": [985518], "id": 985519, "header": " Resize the image to 64 x 64", "annotation": [" Resize the image to 64 x 64"]}
{"target_lineno": 71, "file": "/projects/bdata/jupyter/target/nb_872639.py", "context": "\nimport model as m\n\nm.val\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "model", "children": [3]}, {"type": "identifier", "value": "m"}, {"type": "Expr", "children": [5]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "m"}, {"type": "attr", "value": "val"}], "funcs": [], "neighbor_cells": [816307], "id": 816308, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_132710.py", "target_func": "none_func", "context": "\nall_pcts = (senate_pcts, house_pcts)\n\nall_rates = (senate_rates, house_rates)\n", "target_lineno": 392, "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "all_pcts"}, {"type": "TupleLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "senate_pcts"}, {"type": "NameLoad", "value": "house_pcts"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "all_rates"}, {"type": "TupleLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "senate_rates"}, {"type": "NameLoad", "value": "house_rates"}], "stage": null, "id": 361602, "neighbor_cells": [361601], "header": "", "annotation": []}
{"funcs": ["pandas.DataFrame.from_csv"], "file": "/projects/bdata/jupyter/target/nb_245152.py", "target_func": "none_func", "context": "\ndf = pd.DataFrame.from_csv('../data/proc_data_en.csv')\n\nfeatures = df[['shots', 'shots_ontarget', 'shots_conceded', 'shots_conceded_ontarget', 'corners', 'corners_conceded']]\n\ntarget = df['points']\n\nprint features\n\nprint target\n", "target_lineno": 18, "nodes": [{"type": "Module", "children": [1, 10, 22, 28, 30]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [4, 9]}, {"type": "AttributeLoad", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "attr", "value": "from_csv"}, {"type": "Str", "value": "../data/proc_data_en.csv"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "features"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [15]}, {"type": "ListLoad", "children": [16, 17, 18, 19, 20, 21]}, {"type": "Str", "value": "shots"}, {"type": "Str", "value": "shots_ontarget"}, {"type": "Str", "value": "shots_conceded"}, {"type": "Str", "value": "shots_conceded_ontarget"}, {"type": "Str", "value": "corners"}, {"type": "Str", "value": "corners_conceded"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "target"}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [27]}, {"type": "Str", "value": "points"}, {"type": "Print", "children": [29]}, {"type": "NameLoad", "value": "features"}, {"type": "Print", "children": [31]}, {"type": "NameLoad", "value": "target"}], "stage": null, "id": 249085, "neighbor_cells": [249084], "header": "", "annotation": []}
{"funcs": ["pandas.merge", "pandas.merge"], "file": "/projects/bdata/jupyter/target/nb_681200.py", "target_func": "none_func", "context": "\ncompinfo2 = pd.merge(compinfo, loanapplic, on='loanid')\n\ncompinfo2 = pd.merge(compinfo2, borrowers, left_on='borrowerid', right_on='userid')\n", "target_lineno": 107, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "compinfo2"}, {"type": "Call", "children": [4, 7, 8, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "merge"}, {"type": "NameLoad", "value": "compinfo"}, {"type": "NameLoad", "value": "loanapplic"}, {"type": "keyword", "children": [10], "value": "on"}, {"type": "Str", "value": "loanid"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "compinfo2"}, {"type": "Call", "children": [14, 17, 18, 19, 21]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "merge"}, {"type": "NameLoad", "value": "compinfo2"}, {"type": "NameLoad", "value": "borrowers"}, {"type": "keyword", "children": [20], "value": "left_on"}, {"type": "Str", "value": "borrowerid"}, {"type": "keyword", "children": [22], "value": "right_on"}, {"type": "Str", "value": "userid"}], "stage": null, "id": 1115689, "neighbor_cells": [1115688], "header": "", "annotation": []}
{"funcs": ["pandas.DataFrame.from_records.head"], "file": "/projects/bdata/jupyter/target/nb_608282.py", "target_func": "none_func", "context": "\ndf.head()\n", "target_lineno": 170, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "head"}], "stage": null, "id": 527162, "neighbor_cells": [527161], "header": "", "annotation": []}
{"target_lineno": 950, "file": "/projects/bdata/jupyter/target/nb_3153.py", "context": "\n\ndef upd_dict(wgts, grads, lr):\n    return OrderedDict({w: (w - (g * lr)) for (w, g) in zip(wgts, grads)})\n\nupd = upd_dict(w_all, g_all, lr)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 28]}, {"type": "FunctionDef", "value": "upd_dict", "children": [2, 8, 27]}, {"type": "arguments", "children": [3, 7]}, {"type": "args", "children": [4, 5, 6]}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [9]}, {"type": "Return", "children": [10]}, {"type": "Call", "children": [11, 12]}, {"type": "NameLoad", "value": "OrderedDict"}, {"type": "DictComp", "children": [13, 14, 19]}, {"type": "NameLoad", "value": "w"}, {"type": "BinOpSub", "children": [15, 16]}, {"type": "NameLoad", "value": "w"}, {"type": "BinOpMult", "children": [17, 18]}, {"type": "NameLoad", "value": "g"}, {"type": "NameLoad", "value": "lr"}, {"type": "comprehension", "children": [20, 23]}, {"type": "TupleStore", "children": [21, 22]}, {"type": "NameStore", "value": "w"}, {"type": "NameStore", "value": "g"}, {"type": "Call", "children": [24, 25, 26]}, {"type": "NameLoad", "value": "zip"}, {"type": "NameLoad", "value": "wgts"}, {"type": "NameLoad", "value": "grads"}, {"type": "decorator_list"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "upd"}, {"type": "Call", "children": [31, 32, 33, 34]}, {"type": "NameLoad", "value": "upd_dict"}, {"type": "NameLoad", "value": "w_all"}, {"type": "NameLoad", "value": "g_all"}, {"type": "NameLoad", "value": "lr"}], "funcs": ["OrderedDict", "zip", "upd_dict"], "neighbor_cells": [288502], "id": 288503, "header": "", "annotation": [" We even have to show theano how to do SGD so we set up this dictionary of updates to complete after every forward pass which apply to standard SGD update rule to every weight "]}
{"funcs": ["list", "format", "format", "head"], "file": "/projects/bdata/jupyter/target/nb_755215.py", "target_func": "none_func", "context": "\nfeature_cols = list(student_data.columns[:(-1)])\n\ntarget_col = student_data.columns[(-1)]\n\nprint 'Feature columns:\\n{}'.format(feature_cols)\n\nprint '\\nTarget column: {}'.format(target_col)\n\nX_all = student_data[feature_cols]\n\ny_all = student_data[target_col]\n\nprint '\\nFeature values:'\n\nprint X_all.head()\n", "target_lineno": 80, "nodes": [{"type": "Module", "children": [1, 11, 19, 25, 31, 37, 43, 45]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "feature_cols"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "list"}, {"type": "SubscriptLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "student_data"}, {"type": "attr", "value": "columns"}, {"type": "Slice", "children": [10]}, {"type": "Num", "value": "-1"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "target_col"}, {"type": "SubscriptLoad", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "student_data"}, {"type": "attr", "value": "columns"}, {"type": "Index", "children": [18]}, {"type": "Num", "value": "-1"}, {"type": "Print", "children": [20]}, {"type": "Call", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "Str", "value": "Feature columns:\n{}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "feature_cols"}, {"type": "Print", "children": [26]}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "Str", "value": "\nTarget column: {}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "target_col"}, {"type": "Assign", "children": [32, 33]}, {"type": "NameStore", "value": "X_all"}, {"type": "SubscriptLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "student_data"}, {"type": "Index", "children": [36]}, {"type": "NameLoad", "value": "feature_cols"}, {"type": "Assign", "children": [38, 39]}, {"type": "NameStore", "value": "y_all"}, {"type": "SubscriptLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "student_data"}, {"type": "Index", "children": [42]}, {"type": "NameLoad", "value": "target_col"}, {"type": "Print", "children": [44]}, {"type": "Str", "value": "\nFeature values:"}, {"type": "Print", "children": [46]}, {"type": "Call", "children": [47]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "X_all"}, {"type": "attr", "value": "head"}], "stage": null, "id": 1130319, "neighbor_cells": [1130318], "header": "", "annotation": [" Preparing the Data", " In this section we will prepare the data for modeling training and testing ", " ", " Identify feature and target columns", " It is often the case that the data you obtain contains non numeric features This can be a problem as most machine learning algorithms expect numeric data to perform computations with ", " ", " Run the code cell below to separate the student data into feature and target columns to see if any features are non numeric "]}
{"target_lineno": 410, "file": "/projects/bdata/jupyter/target/nb_299607.py", "context": "\ncorrect_cats = np.where(((preds == 0) & (preds == val_labels[:, 1])))[0]\n\nmost_correct_cats = np.argsort(probs[correct_cats])[::(- 1)][:n_view]\n\nplots_idx(correct_cats[most_correct_cats], probs[correct_cats][most_correct_cats])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 22, 39]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "correct_cats"}, {"type": "SubscriptLoad", "children": [4, 20]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "where"}, {"type": "BinOpBitAnd", "children": [9, 12]}, {"type": "CompareEq", "children": [10, 11]}, {"type": "NameLoad", "value": "preds"}, {"type": "Num", "value": "0"}, {"type": "CompareEq", "children": [13, 14]}, {"type": "NameLoad", "value": "preds"}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "val_labels"}, {"type": "ExtSlice", "children": [17, 18]}, {"type": "Slice"}, {"type": "Index", "children": [19]}, {"type": "Num", "value": "1"}, {"type": "Index", "children": [21]}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "most_correct_cats"}, {"type": "SubscriptLoad", "children": [25, 37]}, {"type": "SubscriptLoad", "children": [26, 34]}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "argsort"}, {"type": "SubscriptLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "probs"}, {"type": "Index", "children": [33]}, {"type": "NameLoad", "value": "correct_cats"}, {"type": "Slice", "children": [35]}, {"type": "UnaryOpUSub", "children": [36]}, {"type": "Num", "value": "1"}, {"type": "Slice", "children": [38]}, {"type": "NameLoad", "value": "n_view"}, {"type": "Expr", "children": [40]}, {"type": "Call", "children": [41, 42, 46]}, {"type": "NameLoad", "value": "plots_idx"}, {"type": "SubscriptLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "correct_cats"}, {"type": "Index", "children": [45]}, {"type": "NameLoad", "value": "most_correct_cats"}, {"type": "SubscriptLoad", "children": [47, 51]}, {"type": "SubscriptLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "probs"}, {"type": "Index", "children": [50]}, {"type": "NameLoad", "value": "correct_cats"}, {"type": "Index", "children": [52]}, {"type": "NameLoad", "value": "most_correct_cats"}], "funcs": ["numpy.where", "numpy.argsort", "plots_idx"], "neighbor_cells": [30885], "id": 30886, "header": "", "annotation": []}
{"funcs": ["make_all_cv_plots"], "file": "/projects/bdata/jupyter/target/nb_883887.py", "target_func": "none_func", "context": "\nmake_all_cv_plots(exp1RawPt1, exp1RawPt2, ['whole', 'eyes', 'mouth'], 'exp1 cv plot')\n", "target_lineno": 413, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 6, 10]}, {"type": "NameLoad", "value": "make_all_cv_plots"}, {"type": "NameLoad", "value": "exp1RawPt1"}, {"type": "NameLoad", "value": "exp1RawPt2"}, {"type": "ListLoad", "children": [7, 8, 9]}, {"type": "Str", "value": "whole"}, {"type": "Str", "value": "eyes"}, {"type": "Str", "value": "mouth"}, {"type": "Str", "value": "exp1 cv plot"}], "stage": null, "id": 8364, "neighbor_cells": [8363], "header": "", "annotation": []}
{"funcs": ["open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "zip", "open.close"], "file": "/projects/bdata/jupyter/target/nb_687826.py", "target_func": "none_func", "context": "\nimport csv\n\npredictions_file = open('extc2_rcv.csv', 'w')\n\nopen_file_object = csv.writer(predictions_file)\n\nopen_file_object.writerow(['ID', 'PredictedProb'])\n\nopen_file_object.writerows(zip(ids, preds))\n\npredictions_file.close()\n", "target_lineno": 189, "nodes": [{"type": "Module", "children": [1, 3, 9, 16, 24, 33]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "csv"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "predictions_file"}, {"type": "Call", "children": [6, 7, 8]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "extc2_rcv.csv"}, {"type": "Str", "value": "w"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "open_file_object"}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "csv"}, {"type": "attr", "value": "writer"}, {"type": "NameLoad", "value": "predictions_file"}, {"type": "Expr", "children": [17]}, {"type": "Call", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "open_file_object"}, {"type": "attr", "value": "writerow"}, {"type": "ListLoad", "children": [22, 23]}, {"type": "Str", "value": "ID"}, {"type": "Str", "value": "PredictedProb"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "open_file_object"}, {"type": "attr", "value": "writerows"}, {"type": "Call", "children": [30, 31, 32]}, {"type": "NameLoad", "value": "zip"}, {"type": "NameLoad", "value": "ids"}, {"type": "NameLoad", "value": "preds"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "predictions_file"}, {"type": "attr", "value": "close"}], "stage": null, "id": 233992, "neighbor_cells": [233991], "header": "", "annotation": []}
{"funcs": ["sklearn.cross_validation.train_test_split", "sklearn.cross_validation.train_test_split", "len", "len", "len"], "file": "/projects/bdata/jupyter/target/nb_532468.py", "target_func": "none_func", "context": "\nfrom sklearn.cross_validation import train_test_split\n\n(X_train_feature, X_deploy, y_train_feature, y_deploy) = train_test_split(X, y, test_size=0.2, random_state=17)\n\n(X_train, X_test, y_train, y_test) = train_test_split(X_train_feature, y_train_feature, test_size=0.2, random_state=17)\n\nprint 'Number of training examples', len(X_train)\n\nprint 'Number of validation examples', len(X_test)\n\nprint 'Number of testing examples', len(X_deploy)\n", "target_lineno": 137, "nodes": [{"type": "Module", "children": [1, 3, 17, 31, 36, 41]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "train_test_split"}, {"type": "Assign", "children": [4, 9]}, {"type": "TupleStore", "children": [5, 6, 7, 8]}, {"type": "NameStore", "value": "X_train_feature"}, {"type": "NameStore", "value": "X_deploy"}, {"type": "NameStore", "value": "y_train_feature"}, {"type": "NameStore", "value": "y_deploy"}, {"type": "Call", "children": [10, 11, 12, 13, 15]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "children": [14], "value": "test_size"}, {"type": "Num", "value": "0.2"}, {"type": "keyword", "children": [16], "value": "random_state"}, {"type": "Num", "value": "17"}, {"type": "Assign", "children": [18, 23]}, {"type": "TupleStore", "children": [19, 20, 21, 22]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [24, 25, 26, 27, 29]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "X_train_feature"}, {"type": "NameLoad", "value": "y_train_feature"}, {"type": "keyword", "children": [28], "value": "test_size"}, {"type": "Num", "value": "0.2"}, {"type": "keyword", "children": [30], "value": "random_state"}, {"type": "Num", "value": "17"}, {"type": "Print", "children": [32, 33]}, {"type": "Str", "value": "Number of training examples"}, {"type": "Call", "children": [34, 35]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "X_train"}, {"type": "Print", "children": [37, 38]}, {"type": "Str", "value": "Number of validation examples"}, {"type": "Call", "children": [39, 40]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Print", "children": [42, 43]}, {"type": "Str", "value": "Number of testing examples"}, {"type": "Call", "children": [44, 45]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "X_deploy"}], "stage": null, "id": 224485, "neighbor_cells": [224484], "header": "", "annotation": []}
{"target_lineno": 29, "file": "/projects/bdata/jupyter/target/nb_118063.py", "context": "\nds = machine.search(Strain='ura3', **{\n    'mM PQ': [0.0, 0.083],\n})\n\nds.log()\n\nds.filter()\n\nds.trim(5)\n\nds.poly_scale(2, groupby=['plate', 'mM PQ'])\n\nds.data = ds.data.iloc[::3, :]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 15, 20, 25, 31, 41]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ds"}, {"type": "Call", "children": [4, 7, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "machine"}, {"type": "attr", "value": "search"}, {"type": "keyword", "value": "Strain", "children": [8]}, {"type": "Str", "value": "ura3"}, {"type": "keyword", "value": "None", "children": [10]}, {"type": "Dict", "children": [11, 12]}, {"type": "Str", "value": "mM PQ"}, {"type": "ListLoad", "children": [13, 14]}, {"type": "Num", "value": "0.0"}, {"type": "Num", "value": "0.083"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "ds"}, {"type": "attr", "value": "log"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "ds"}, {"type": "attr", "value": "filter"}, {"type": "Expr", "children": [26]}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "ds"}, {"type": "attr", "value": "trim"}, {"type": "Num", "value": "5"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 36, 37]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "ds"}, {"type": "attr", "value": "poly_scale"}, {"type": "Num", "value": "2"}, {"type": "keyword", "value": "groupby", "children": [38]}, {"type": "ListLoad", "children": [39, 40]}, {"type": "Str", "value": "plate"}, {"type": "Str", "value": "mM PQ"}, {"type": "Assign", "children": [42, 45]}, {"type": "AttributeStore", "children": [43, 44]}, {"type": "NameLoad", "value": "ds"}, {"type": "attr", "value": "data"}, {"type": "SubscriptLoad", "children": [46, 51]}, {"type": "AttributeLoad", "children": [47, 50]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "ds"}, {"type": "attr", "value": "data"}, {"type": "attr", "value": "iloc"}, {"type": "ExtSlice", "children": [52, 54]}, {"type": "Slice", "children": [53]}, {"type": "Num", "value": "3"}, {"type": "Slice"}], "funcs": ["popmachine.Machine.search", "popmachine.Machine.search.log", "popmachine.Machine.search.filter", "popmachine.Machine.search.trim", "popmachine.Machine.search.poly_scale"], "neighbor_cells": [1244788], "id": 1244789, "header": "", "annotation": []}
{"target_lineno": 128, "file": "/projects/bdata/jupyter/target/nb_650756.py", "context": "\nNMFmaps.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "NMFmaps"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [932551], "id": 932552, "header": "", "annotation": []}
{"funcs": ["sys.path.append"], "file": "/projects/bdata/jupyter/target/nb_435484.py", "target_func": "none_func", "context": "\nimport sys\n\nsys.path.append('../../common_tools/')\n\nfrom holo_specs import *\n", "target_lineno": 92, "nodes": [{"type": "Module", "children": [1, 3, 11]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "sys"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 10]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "sys"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "append"}, {"type": "Str", "value": "../../common_tools/"}, {"type": "ImportFrom", "children": [12], "value": "holo_specs"}, {"type": "alias", "value": "*"}], "stage": null, "id": 145737, "neighbor_cells": [145736], "header": "", "annotation": []}
{"target_lineno": 73, "file": "/projects/bdata/jupyter/target/nb_475546.py", "context": "\noutcome = train.open_account_flg\n\ntrain.drop(['client_id', 'open_account_flg'], axis=1, inplace=True)\n\ntestID = test.client_id\n\ntest.drop(['client_id'], axis=1, inplace=True)\n\ntrain['test'] = False\n\ntest['test'] = True\n\ndata = pd.concat([train, test], ignore_index=True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 18, 23, 34, 40, 46]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "outcome"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "open_account_flg"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8, 11, 14, 16]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "drop"}, {"type": "ListLoad", "children": [12, 13]}, {"type": "Str", "value": "client_id"}, {"type": "Str", "value": "open_account_flg"}, {"type": "keyword", "value": "axis", "children": [15]}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "inplace", "children": [17]}, {"type": "NameConstant"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "testID"}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "client_id"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 28, 30, 32]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "drop"}, {"type": "ListLoad", "children": [29]}, {"type": "Str", "value": "client_id"}, {"type": "keyword", "value": "axis", "children": [31]}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "inplace", "children": [33]}, {"type": "NameConstant"}, {"type": "Assign", "children": [35, 39]}, {"type": "SubscriptStore", "children": [36, 37]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [38]}, {"type": "Str", "value": "test"}, {"type": "NameConstant"}, {"type": "Assign", "children": [41, 45]}, {"type": "SubscriptStore", "children": [42, 43]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [44]}, {"type": "Str", "value": "test"}, {"type": "NameConstant"}, {"type": "Assign", "children": [47, 48]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [49, 52, 55]}, {"type": "AttributeLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "concat"}, {"type": "ListLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "train"}, {"type": "NameLoad", "value": "test"}, {"type": "keyword", "value": "ignore_index", "children": [56]}, {"type": "NameConstant"}], "funcs": ["pandas.read_csv.drop", "pandas.read_csv.drop", "pandas.concat"], "neighbor_cells": [548471], "id": 548472, "header": "", "annotation": []}
{"funcs": ["sklearn.ensemble.RandomForestClassifier", "sklearn.ensemble.RandomForestClassifier.fit", "sklearn.ensemble.RandomForestClassifier.predict", "UseChallenge3Predictions"], "file": "/projects/bdata/jupyter/target/nb_321971.py", "target_func": "none_func", "context": "\nparams = {\n    'trees': 150,\n    'criterion': 'entropy',\n    'random_state': None,\n}\n\ntrees = params['trees']\n\ncrit = params['criterion']\n\nseed = params['random_state']\n\nclf = RandomForestClassifier(n_estimators=trees, criterion=crit, random_state=seed)\n\nclf.fit(tfidfTrain, YTrain)\n\nYPred = clf.predict(tfidfTest)\n\nUseChallenge3Predictions(YPred)\n", "target_lineno": 857, "nodes": [{"type": "Module", "children": [1, 10, 16, 22, 28, 38, 45, 52]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "params"}, {"type": "Dict", "children": [4, 5, 6, 7, 8, 9]}, {"type": "Str", "value": "trees"}, {"type": "Str", "value": "criterion"}, {"type": "Str", "value": "random_state"}, {"type": "Num", "value": "150"}, {"type": "Str", "value": "entropy"}, {"type": "NameLoad", "value": "None"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "trees"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "params"}, {"type": "Index", "children": [15]}, {"type": "Str", "value": "trees"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "crit"}, {"type": "SubscriptLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "params"}, {"type": "Index", "children": [21]}, {"type": "Str", "value": "criterion"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "seed"}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "params"}, {"type": "Index", "children": [27]}, {"type": "Str", "value": "random_state"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "clf"}, {"type": "Call", "children": [31, 32, 34, 36]}, {"type": "NameLoad", "value": "RandomForestClassifier"}, {"type": "keyword", "children": [33], "value": "n_estimators"}, {"type": "NameLoad", "value": "trees"}, {"type": "keyword", "children": [35], "value": "criterion"}, {"type": "NameLoad", "value": "crit"}, {"type": "keyword", "children": [37], "value": "random_state"}, {"type": "NameLoad", "value": "seed"}, {"type": "Expr", "children": [39]}, {"type": "Call", "children": [40, 43, 44]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "tfidfTrain"}, {"type": "NameLoad", "value": "YTrain"}, {"type": "Assign", "children": [46, 47]}, {"type": "NameStore", "value": "YPred"}, {"type": "Call", "children": [48, 51]}, {"type": "AttributeLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "tfidfTest"}, {"type": "Expr", "children": [53]}, {"type": "Call", "children": [54, 55]}, {"type": "NameLoad", "value": "UseChallenge3Predictions"}, {"type": "NameLoad", "value": "YPred"}], "stage": null, "id": 441861, "neighbor_cells": [441860], "header": " Hence we choose 50 Trees with Entropy as a criterion for our Random Forest classifier ", "annotation": [" Hence we choose 50 Trees with Entropy as a criterion for our Random Forest classifier "]}
{"target_lineno": 131, "file": "/projects/bdata/jupyter/target/nb_781976.py", "context": "\nget_ipython().run_cell_magic('time', '', 'doc_classification_map = pickle.load(open(doc_classifications_map_file))\\nsections = pickle.load(open(sections_file))\\nclasses = pickle.load(open(classes_file))\\nsubclasses = pickle.load(open(subclasses_file))\\nvalid_classes = pickle.load(open(valid_classes_file))\\nvalid_subclasses = pickle.load(open(valid_subclasses_file))\\ntraining_docs_list = pickle.load(open(training_docs_list_file))\\nvalidation_docs_list = pickle.load(open(validation_docs_list_file))\\ntest_docs_list = pickle.load(open(test_docs_list_file))')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8, 9]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_cell_magic"}, {"type": "Str", "value": "time"}, {"type": "Str", "value": ""}, {"type": "Str", "value": "doc_classification_map = pickle.load(open(doc_classifications_map_file))\nsections = pickle.load(open(sections_file))\nclasses = pickle.load(open(classes_file))\nsubclasses = pickle.load(open(subclasses_file))\nvalid_classes = pickle.load(open(valid_classes_file))\nvalid_subclasses = pickle.load(open(valid_subclasses_file))\ntraining_docs_list = pickle.load(open(training_docs_list_file))\nvalidation_docs_list = pickle.load(open(validation_docs_list_file))\ntest_docs_list = pickle.load(open(test_docs_list_file))"}], "funcs": ["get_ipython.run_cell_magic", "get_ipython"], "neighbor_cells": [978097], "id": 978098, "header": "", "annotation": []}
{"funcs": ["open", "pickle.dump"], "file": "/projects/bdata/jupyter/target/nb_837272.py", "target_func": "none_func", "context": "\nwith open('/home/isabela/Documents/linew_data/datafiles/pickles/ppv/w2/w2_0812_subsample_props.pickle', 'w') as f:\n    pickle.dump([timevec, date, dpth, mdpth, ppv_cub, sal_cub, tmp_cub, up_cub, neutbnd, neutind], f)\n", "target_lineno": 597, "nodes": [{"type": "Module", "children": [1]}, {"type": "With", "children": [2, 6, 7]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "/home/isabela/Documents/linew_data/datafiles/pickles/ppv/w2/w2_0812_subsample_props.pickle"}, {"type": "Str", "value": "w"}, {"type": "NameStore", "value": "f"}, {"type": "body", "children": [8]}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 13, 24]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "dump"}, {"type": "ListLoad", "children": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23]}, {"type": "NameLoad", "value": "timevec"}, {"type": "NameLoad", "value": "date"}, {"type": "NameLoad", "value": "dpth"}, {"type": "NameLoad", "value": "mdpth"}, {"type": "NameLoad", "value": "ppv_cub"}, {"type": "NameLoad", "value": "sal_cub"}, {"type": "NameLoad", "value": "tmp_cub"}, {"type": "NameLoad", "value": "up_cub"}, {"type": "NameLoad", "value": "neutbnd"}, {"type": "NameLoad", "value": "neutind"}, {"type": "NameLoad", "value": "f"}], "stage": null, "id": 903111, "neighbor_cells": [903110], "header": " Pickle results before any filtering averaging for extension", "annotation": [" Pickle results before any filtering averaging for extension"]}
{"funcs": ["sklearn.svm.SVC.predict"], "file": "/projects/bdata/jupyter/target/nb_582667.py", "target_func": "none_func", "context": "\nc.predict(walk_freq[3])\n", "target_lineno": 126, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "c"}, {"type": "attr", "value": "predict"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "walk_freq"}, {"type": "Index", "children": [9]}, {"type": "Num", "value": "3"}], "stage": null, "id": 46348, "neighbor_cells": [46347], "header": "", "annotation": []}
{"target_lineno": 312, "file": "/projects/bdata/jupyter/target/nb_303168.py", "context": "\nM = np.array([[1, 0, 0, 0], [0, 3, 0, 0], [0, 1, 1, 0], [1, 0, 0, 1]])\n\nM\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 28]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "M"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [8, 13, 18, 23]}, {"type": "ListLoad", "children": [9, 10, 11, 12]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "ListLoad", "children": [14, 15, 16, 17]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "ListLoad", "children": [19, 20, 21, 22]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "ListLoad", "children": [24, 25, 26, 27]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [29]}, {"type": "NameLoad", "value": "M"}], "funcs": ["numpy.array"], "neighbor_cells": [947595], "id": 947596, "header": "", "annotation": []}
{"target_lineno": 18, "file": "/projects/bdata/jupyter/target/nb_173943.py", "context": "\nmnist = fetch_mldata('MNIST original')\n\n(mnist_X, mnist_y) = shuffle(mnist.data.astype('float32'), mnist.target.astype('int32'), random_state=42)\n\nmnist_X = (mnist_X / 255.0)\n\n(train_X, test_X, train_y, test_y) = train_test_split(mnist_X, mnist_y, test_size=0.2, random_state=43)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 28, 33]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mnist"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "fetch_mldata"}, {"type": "Str", "value": "MNIST original"}, {"type": "Assign", "children": [7, 10]}, {"type": "TupleStore", "children": [8, 9]}, {"type": "NameStore", "value": "mnist_X"}, {"type": "NameStore", "value": "mnist_y"}, {"type": "Call", "children": [11, 12, 19, 26]}, {"type": "NameLoad", "value": "shuffle"}, {"type": "Call", "children": [13, 18]}, {"type": "AttributeLoad", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "mnist"}, {"type": "attr", "value": "data"}, {"type": "attr", "value": "astype"}, {"type": "Str", "value": "float32"}, {"type": "Call", "children": [20, 25]}, {"type": "AttributeLoad", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "mnist"}, {"type": "attr", "value": "target"}, {"type": "attr", "value": "astype"}, {"type": "Str", "value": "int32"}, {"type": "keyword", "value": "random_state", "children": [27]}, {"type": "Num", "value": "42"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "mnist_X"}, {"type": "BinOpDiv", "children": [31, 32]}, {"type": "NameLoad", "value": "mnist_X"}, {"type": "Num", "value": "255.0"}, {"type": "Assign", "children": [34, 39]}, {"type": "TupleStore", "children": [35, 36, 37, 38]}, {"type": "NameStore", "value": "train_X"}, {"type": "NameStore", "value": "test_X"}, {"type": "NameStore", "value": "train_y"}, {"type": "NameStore", "value": "test_y"}, {"type": "Call", "children": [40, 41, 42, 43, 45]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "mnist_X"}, {"type": "NameLoad", "value": "mnist_y"}, {"type": "keyword", "value": "test_size", "children": [44]}, {"type": "Num", "value": "0.2"}, {"type": "keyword", "value": "random_state", "children": [46]}, {"type": "Num", "value": "43"}], "funcs": ["sklearn.datasets.fetch_mldata", "sklearn.utils.shuffle", "sklearn.datasets.fetch_mldata.data.astype", "sklearn.datasets.fetch_mldata.target.astype", "sklearn.cross_validation.train_test_split"], "neighbor_cells": [788051], "id": 788052, "header": "", "annotation": []}
{"target_lineno": 32, "file": "/projects/bdata/jupyter/target/nb_2222.py", "context": "\nImage('images/ml-model.png', width=500)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "Image"}, {"type": "Str", "value": "images/ml-model.png"}, {"type": "keyword", "value": "width", "children": [6]}, {"type": "Num", "value": "500"}], "funcs": ["IPython.display.Image"], "neighbor_cells": [906191], "id": 906192, "header": "", "annotation": []}
{"funcs": ["Gauss_Newton.rotate_coords_transformation_m"], "file": "/projects/bdata/jupyter/target/nb_22643.py", "target_func": "none_func", "context": "\nfrom Gauss_Newton import rotate_coords_transformation_m\n\np = [1.0070618260934048, 0.006985800340610231, 0.027866808064760742, 0.001284595171892761, (-0.0005381302579664845), 0.0010074739466495368]\n\n(ox, oy, oz) = (15.5, 15.5, 15.5)\n\n(dest_x, dest_y, dest_z) = rotate_coords_transformation_m(xx, yy, zz, p, ox, oy, oz, 1)\n", "target_lineno": 1028, "nodes": [{"type": "Module", "children": [1, 3, 12, 21]}, {"type": "ImportFrom", "children": [2], "value": "Gauss_Newton"}, {"type": "alias", "value": "rotate_coords_transformation_m"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "p"}, {"type": "ListLoad", "children": [6, 7, 8, 9, 10, 11]}, {"type": "Num", "value": "1.00706182609"}, {"type": "Num", "value": "0.00698580034061"}, {"type": "Num", "value": "0.0278668080648"}, {"type": "Num", "value": "0.00128459517189"}, {"type": "Num", "value": "-0.000538130257966"}, {"type": "Num", "value": "0.00100747394665"}, {"type": "Assign", "children": [13, 17]}, {"type": "TupleStore", "children": [14, 15, 16]}, {"type": "NameStore", "value": "ox"}, {"type": "NameStore", "value": "oy"}, {"type": "NameStore", "value": "oz"}, {"type": "TupleLoad", "children": [18, 19, 20]}, {"type": "Num", "value": "15.5"}, {"type": "Num", "value": "15.5"}, {"type": "Num", "value": "15.5"}, {"type": "Assign", "children": [22, 26]}, {"type": "TupleStore", "children": [23, 24, 25]}, {"type": "NameStore", "value": "dest_x"}, {"type": "NameStore", "value": "dest_y"}, {"type": "NameStore", "value": "dest_z"}, {"type": "Call", "children": [27, 28, 29, 30, 31, 32, 33, 34, 35]}, {"type": "NameLoad", "value": "rotate_coords_transformation_m"}, {"type": "NameLoad", "value": "xx"}, {"type": "NameLoad", "value": "yy"}, {"type": "NameLoad", "value": "zz"}, {"type": "NameLoad", "value": "p"}, {"type": "NameLoad", "value": "ox"}, {"type": "NameLoad", "value": "oy"}, {"type": "NameLoad", "value": "oz"}, {"type": "Num", "value": "1"}], "stage": null, "id": 982144, "neighbor_cells": [982143], "header": "", "annotation": []}
{"target_lineno": 1096, "file": "/projects/bdata/jupyter/target/nb_88140.py", "context": "\nXs = []\n\nys = []\n\nfor hop_i in range(n_hops):\n    frames = mag[(hop_i * frame_hops):((hop_i * frame_hops) + n_frames)]\n    Xs.append(np.log((np.abs(frames[(..., np.newaxis)]) + 1e-10)))\n    ys.append(0)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "Xs"}, {"type": "ListLoad"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "ys"}, {"type": "ListLoad"}, {"type": "For", "children": [8, 9, 12]}, {"type": "NameStore", "value": "hop_i"}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "range"}, {"type": "NameLoad", "value": "n_hops"}, {"type": "body", "children": [13, 26, 49]}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "frames"}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "mag"}, {"type": "Slice", "children": [18, 21]}, {"type": "BinOpMult", "children": [19, 20]}, {"type": "NameLoad", "value": "hop_i"}, {"type": "NameLoad", "value": "frame_hops"}, {"type": "BinOpAdd", "children": [22, 25]}, {"type": "BinOpMult", "children": [23, 24]}, {"type": "NameLoad", "value": "hop_i"}, {"type": "NameLoad", "value": "frame_hops"}, {"type": "NameLoad", "value": "n_frames"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "Xs"}, {"type": "attr", "value": "append"}, {"type": "Call", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "log"}, {"type": "BinOpAdd", "children": [36, 48]}, {"type": "Call", "children": [37, 40]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "abs"}, {"type": "SubscriptLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "frames"}, {"type": "Index", "children": [43]}, {"type": "TupleLoad", "children": [44, 45]}, {"type": "Ellipsis"}, {"type": "AttributeLoad", "children": [46, 47]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "newaxis"}, {"type": "Num", "value": "1e-10"}, {"type": "Expr", "children": [50]}, {"type": "Call", "children": [51, 54]}, {"type": "AttributeLoad", "children": [52, 53]}, {"type": "NameLoad", "value": "ys"}, {"type": "attr", "value": "append"}, {"type": "Num", "value": "0"}], "funcs": ["range", "append", "numpy.log", "numpy.abs", "append"], "neighbor_cells": [651099], "id": 651100, "header": "", "annotation": [" Now we can collect all the sliding windows into a list of Xs and label them based on being music as 0 or speech as 1 into a collection of ys "]}
{"funcs": ["pandas.read_csv.corr"], "file": "/projects/bdata/jupyter/target/nb_126874.py", "target_func": "none_func", "context": "\ndata.corr()\n", "target_lineno": 37, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "corr"}], "stage": null, "id": 1071488, "neighbor_cells": [1071487], "header": "", "annotation": []}
{"funcs": ["open", "cPickle.dump", "lasagne.layers.get_all_param_values", "theano.tensor.sum", "theano.tensor.sum", "theano.tensor.sum"], "file": "/projects/bdata/jupyter/target/nb_240274.py", "target_func": "none_func", "context": "\n\ndef save_params(model, fn):\n    with open(fn, 'w') as wr:\n        pickle.dump(lasagne.layers.get_all_param_values(model), wr)\n\n\ndef dice_loss(predictions, targets):\n    dice_index = ((2 * T.sum((predictions * targets))) / (T.sum(predictions) + T.sum(targets)))\n    return (- dice_index)\n", "target_lineno": 396, "nodes": [{"type": "Module", "children": [1, 29]}, {"type": "FunctionDef", "children": [2, 7, 28], "value": "save_params"}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "NameParam", "value": "model"}, {"type": "NameParam", "value": "fn"}, {"type": "defaults"}, {"type": "body", "children": [8]}, {"type": "With", "children": [9, 13, 14]}, {"type": "Call", "children": [10, 11, 12]}, {"type": "NameLoad", "value": "open"}, {"type": "NameLoad", "value": "fn"}, {"type": "Str", "value": "w"}, {"type": "NameStore", "value": "wr"}, {"type": "body", "children": [15]}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 20, 27]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "dump"}, {"type": "Call", "children": [21, 26]}, {"type": "AttributeLoad", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "lasagne"}, {"type": "attr", "value": "layers"}, {"type": "attr", "value": "get_all_param_values"}, {"type": "NameLoad", "value": "model"}, {"type": "NameLoad", "value": "wr"}, {"type": "decorator_list"}, {"type": "FunctionDef", "children": [30, 35, 62], "value": "dice_loss"}, {"type": "arguments", "children": [31, 34]}, {"type": "args", "children": [32, 33]}, {"type": "NameParam", "value": "predictions"}, {"type": "NameParam", "value": "targets"}, {"type": "defaults"}, {"type": "body", "children": [36, 59]}, {"type": "Assign", "children": [37, 38]}, {"type": "NameStore", "value": "dice_index"}, {"type": "BinOpDiv", "children": [39, 48]}, {"type": "BinOpMult", "children": [40, 41]}, {"type": "Num", "value": "2"}, {"type": "Call", "children": [42, 45]}, {"type": "AttributeLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "T"}, {"type": "attr", "value": "sum"}, {"type": "BinOpMult", "children": [46, 47]}, {"type": "NameLoad", "value": "predictions"}, {"type": "NameLoad", "value": "targets"}, {"type": "BinOpAdd", "children": [49, 54]}, {"type": "Call", "children": [50, 53]}, {"type": "AttributeLoad", "children": [51, 52]}, {"type": "NameLoad", "value": "T"}, {"type": "attr", "value": "sum"}, {"type": "NameLoad", "value": "predictions"}, {"type": "Call", "children": [55, 58]}, {"type": "AttributeLoad", "children": [56, 57]}, {"type": "NameLoad", "value": "T"}, {"type": "attr", "value": "sum"}, {"type": "NameLoad", "value": "targets"}, {"type": "Return", "children": [60]}, {"type": "UnaryOpUSub", "children": [61]}, {"type": "NameLoad", "value": "dice_index"}, {"type": "decorator_list"}], "stage": null, "id": 1013077, "neighbor_cells": [1013076], "header": "", "annotation": []}
{"target_lineno": 75, "file": "/projects/bdata/jupyter/target/nb_122859.py", "context": "\nfrom sklearn.naive_bayes import GaussianNB\n\nclf5 = GaussianNB().fit(x, y)\n\nclf5.predict(input)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 12]}, {"type": "ImportFrom", "value": "sklearn.naive_bayes", "children": [2]}, {"type": "alias", "value": "GaussianNB"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "clf5"}, {"type": "Call", "children": [6, 10, 11]}, {"type": "AttributeLoad", "children": [7, 9]}, {"type": "Call", "children": [8]}, {"type": "NameLoad", "value": "GaussianNB"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "x"}, {"type": "NameLoad", "value": "y"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "clf5"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "input"}], "funcs": ["sklearn.naive_bayes.GaussianNB.fit", "sklearn.naive_bayes.GaussianNB", "sklearn.naive_bayes.GaussianNB.fit.predict"], "neighbor_cells": [1056253], "id": 1056254, "header": " Gaussian Naive Bayes", "annotation": [" Gaussian Naive Bayes"]}
{"funcs": ["numpy.random.uniform", "model.Obama.values.reshape", "model.Votes.values.reshape", "sum"], "file": "/projects/bdata/jupyter/target/nb_546697.py", "target_func": "none_func", "context": "\n\ndef simulate_election(model, n_sim):\n    simulations = np.random.uniform(size=(51, n_sim))\n    obama_votes = ((simulations < model.Obama.values.reshape((-1), 1)) * model.Votes.values.reshape((-1), 1))\n    return obama_votes.sum(axis=0)\n", "target_lineno": 144, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 7, 52], "value": "simulate_election"}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "NameParam", "value": "model"}, {"type": "NameParam", "value": "n_sim"}, {"type": "defaults"}, {"type": "body", "children": [8, 20, 45]}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "simulations"}, {"type": "Call", "children": [11, 16]}, {"type": "AttributeLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "random"}, {"type": "attr", "value": "uniform"}, {"type": "keyword", "children": [17], "value": "size"}, {"type": "TupleLoad", "children": [18, 19]}, {"type": "Num", "value": "51"}, {"type": "NameLoad", "value": "n_sim"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "obama_votes"}, {"type": "BinOpMult", "children": [23, 35]}, {"type": "CompareLt", "children": [24, 25]}, {"type": "NameLoad", "value": "simulations"}, {"type": "Call", "children": [26, 33, 34]}, {"type": "AttributeLoad", "children": [27, 32]}, {"type": "AttributeLoad", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "Obama"}, {"type": "attr", "value": "values"}, {"type": "attr", "value": "reshape"}, {"type": "Num", "value": "-1"}, {"type": "Num", "value": "1"}, {"type": "Call", "children": [36, 43, 44]}, {"type": "AttributeLoad", "children": [37, 42]}, {"type": "AttributeLoad", "children": [38, 41]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "Votes"}, {"type": "attr", "value": "values"}, {"type": "attr", "value": "reshape"}, {"type": "Num", "value": "-1"}, {"type": "Num", "value": "1"}, {"type": "Return", "children": [46]}, {"type": "Call", "children": [47, 50]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "obama_votes"}, {"type": "attr", "value": "sum"}, {"type": "keyword", "children": [51], "value": "axis"}, {"type": "Num", "value": "0"}, {"type": "decorator_list"}], "stage": null, "id": 46742, "neighbor_cells": [46741], "header": "", "annotation": [" Each row is the probability predicted by Predictwise that Romney or Obama would win a state The votes column lists the number of electoral college votes in that state ", " ", " Remember that simulation is used in different ways in the modelling process Simulations might be used to propagate differential equations which describe the weather from different initial conditions In this case they are used to create the model In the coin flips case they are used to illustrate the predictions of the model of a fair coin This example is in the same spirit we are given a somehow obtained list of win probabilities for the states of the US ", " In the case of the tossed coins even though we had a model which said that the probability of heads was 0 5 there were sequences of flips in which more or less than half the flips were heads Similarly here if the probability of Romney winning in Arizona is 0 938 it means that if somehow there were 10000 replications with an election each Romney would win in 938 of those Arizonas on the average across the replications And there would be some samples with Romney winning more and some with less We can run these simulated universes on a computer though not in real life ", " ", " Simulating the model", " ", " To do this ", " we will assume that the outcome in each state is the result of an independent coin flip whose probability of coming up Obama is given by the Predictwise state wise win probabilities Lets write a function simulate election that uses this predictive model to simulate the outcome of the election given a table of probabilities ", " ", " In the code below each column simulates a single outcome from the 50 states DC by choosing a random number between 0 and 1 Obama wins that simulation if the random number is the win probability If he wins that simulation we add in the electoral votes for that state otherwise we dont We do this n sim times and return a list of total Obama electoral votes in each simulation "]}
{"target_lineno": 480, "file": "/projects/bdata/jupyter/target/nb_344925.py", "context": "\nprint(('Bernoulli Naive Bayes Accuracy Score: %f' % accuracy_container['b_naive_bayes']))\n\nprint(('Training Time: %f' % training_time_container['b_naive_bayes']))\n\nprint(('Prediction Time: %f' % prediction_time_container['b_naive_bayes']))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10, 19]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [5, 6]}, {"type": "Str", "value": "Bernoulli Naive Bayes Accuracy Score: %f"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "accuracy_container"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "b_naive_bayes"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [14, 15]}, {"type": "Str", "value": "Training Time: %f"}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "training_time_container"}, {"type": "Index", "children": [18]}, {"type": "Str", "value": "b_naive_bayes"}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21, 22]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [23, 24]}, {"type": "Str", "value": "Prediction Time: %f"}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "prediction_time_container"}, {"type": "Index", "children": [27]}, {"type": "Str", "value": "b_naive_bayes"}], "funcs": ["print", "print", "print"], "neighbor_cells": [465302], "id": 465303, "header": "", "annotation": []}
{"target_lineno": 3, "file": "/projects/bdata/jupyter/target/nb_591735.py", "context": "\nfrom sklearn import linear_model, datasets\n\nimport tensorflow as tf\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 13]}, {"type": "ImportFrom", "value": "sklearn", "children": [2, 3]}, {"type": "alias", "value": "linear_model"}, {"type": "alias", "value": "datasets"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "tensorflow", "children": [6]}, {"type": "identifier", "value": "tf"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "numpy", "children": [9]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [12]}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 19, 20]}, {"type": "AttributeLoad", "children": [16, 18]}, {"type": "Call", "children": [17]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 765803, "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"funcs": ["pandas.concat.filter", "pandas.concat.filter.as_matrix", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit"], "file": "/projects/bdata/jupyter/target/nb_754291.py", "target_func": "none_func", "context": "\nfrom sklearn import linear_model\n\ntrain_df = df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')\n\ntrain_np = train_df.as_matrix()\n\ny = train_np[:, 0]\n\nX = train_np[:, 1:]\n\nclf = linear_model.LogisticRegression(C=1.0, penalty='l1', tol=1e-06)\n\nclf.fit(X, y)\n\nclf\n", "target_lineno": 226, "nodes": [{"type": "Module", "children": [1, 3, 11, 17, 25, 33, 45, 52]}, {"type": "ImportFrom", "children": [2], "value": "sklearn"}, {"type": "alias", "value": "linear_model"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "train_df"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "filter"}, {"type": "keyword", "children": [10], "value": "regex"}, {"type": "Str", "value": "Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "train_np"}, {"type": "Call", "children": [14]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "train_df"}, {"type": "attr", "value": "as_matrix"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "y"}, {"type": "SubscriptLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "train_np"}, {"type": "ExtSlice", "children": [22, 23]}, {"type": "Slice"}, {"type": "Index", "children": [24]}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [26, 27]}, {"type": "NameStore", "value": "X"}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "train_np"}, {"type": "ExtSlice", "children": [30, 31]}, {"type": "Slice"}, {"type": "Slice", "children": [32]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [34, 35]}, {"type": "NameStore", "value": "clf"}, {"type": "Call", "children": [36, 39, 41, 43]}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "linear_model"}, {"type": "attr", "value": "LogisticRegression"}, {"type": "keyword", "children": [40], "value": "C"}, {"type": "Num", "value": "1.0"}, {"type": "keyword", "children": [42], "value": "penalty"}, {"type": "Str", "value": "l1"}, {"type": "keyword", "children": [44], "value": "tol"}, {"type": "Num", "value": "1e-06"}, {"type": "Expr", "children": [46]}, {"type": "Call", "children": [47, 50, 51]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "Expr", "children": [53]}, {"type": "NameLoad", "value": "clf"}], "stage": null, "id": 1126039, "neighbor_cells": [1126038], "header": "", "annotation": []}
{"target_lineno": 491, "file": "/projects/bdata/jupyter/target/nb_935710.py", "context": "\nlayer_conv2\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "layer_conv2"}], "funcs": [], "neighbor_cells": [621483], "id": 621484, "header": "", "annotation": [" Check the shape of the tensor that will be output from this convolutional layer The shape is 7 7 36 where the again means that there is an arbitrary number of images with each image having width and height of 7 pixels and there are 36 channels one for each filter "]}
{"funcs": ["pandas.read_csv"], "file": "/projects/bdata/jupyter/target/nb_906365.py", "target_func": "none_func", "context": "\nimport pandas as pd\n\nurl = '../data/beer.txt'\n\nbeer = pd.read_csv(url, sep=' ')\n\nbeer\n", "target_lineno": 11, "nodes": [{"type": "Module", "children": [1, 4, 7, 16]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "url"}, {"type": "Str", "value": "../data/beer.txt"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "beer"}, {"type": "Call", "children": [10, 13, 14]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "NameLoad", "value": "url"}, {"type": "keyword", "children": [15], "value": "sep"}, {"type": "Str", "value": " "}, {"type": "Expr", "children": [17]}, {"type": "NameLoad", "value": "beer"}], "stage": null, "id": 1010371, "neighbor_cells": [-1], "header": "", "annotation": [" coding utf 8", " Clustering", " Agenda ", " ", " 1 K means clustering", " 2 Clustering evaluation", " 3 DBSCAN clustering"]}
{"funcs": ["resample.head", "len"], "file": "/projects/bdata/jupyter/target/nb_872247.py", "target_func": "none_func", "context": "\ndataframe_train = dataframe.head((len(dataframe.values) / 2))\n", "target_lineno": 242, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dataframe_train"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "dataframe"}, {"type": "attr", "value": "head"}, {"type": "BinOpDiv", "children": [8, 13]}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "len"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "dataframe"}, {"type": "attr", "value": "values"}, {"type": "Num", "value": "2"}], "stage": null, "id": 337925, "neighbor_cells": [337924], "header": "", "annotation": []}
{"target_lineno": 67, "file": "/projects/bdata/jupyter/target/nb_558009.py", "context": "\ndf_gas_prices.columns = ['Date_gp', 'Gas Prices ($/mmbtu)']\n\ndf_gas_prices\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 5]}, {"type": "AttributeStore", "children": [3, 4]}, {"type": "NameLoad", "value": "df_gas_prices"}, {"type": "attr", "value": "columns"}, {"type": "ListLoad", "children": [6, 7]}, {"type": "Str", "value": "Date_gp"}, {"type": "Str", "value": "Gas Prices ($/mmbtu)"}, {"type": "Expr", "children": [9]}, {"type": "NameLoad", "value": "df_gas_prices"}], "funcs": [], "neighbor_cells": [240446], "id": 240447, "header": "", "annotation": []}
{"funcs": ["train_and_evaluate"], "file": "/projects/bdata/jupyter/target/nb_868701.py", "target_func": "none_func", "context": "\ntrain_and_evaluate(clf, X_train, X_test, y_train, y_test)\n", "target_lineno": 643, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 6, 7, 8]}, {"type": "NameLoad", "value": "train_and_evaluate"}, {"type": "NameLoad", "value": "clf"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_train"}, {"type": "NameLoad", "value": "y_test"}], "stage": null, "id": 611448, "neighbor_cells": [611447], "header": "", "annotation": []}
{"target_lineno": 71, "file": "/projects/bdata/jupyter/target/nb_906204.py", "context": "\ndf_10 = pd.read_csv('grouped10.csv')\n\ndf_10.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "df_10"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "grouped10.csv"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "df_10"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv", "pandas.read_csv.head"], "neighbor_cells": [942872], "id": 942873, "header": " Open data frame only with car models appearing more than 10 times 30 pictures per class ", "annotation": [" Open data frame only with car models appearing more than 10 times 30 pictures per class "]}
{"target_lineno": 263, "file": "/projects/bdata/jupyter/target/nb_587748.py", "context": "\nlr = LogisticRegression()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "lr"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "LogisticRegression"}], "funcs": ["sklearn.linear_model.LogisticRegression"], "neighbor_cells": [27813], "id": 27814, "header": " Logistic Regression", "annotation": [" Logistic Regression"]}
{"funcs": ["bokeh.plotting.output_file", "bokeh.plotting.figure", "bokeh.plotting.figure.line", "bokeh.plotting.show"], "file": "/projects/bdata/jupyter/target/nb_231348.py", "target_func": "none_func", "context": "\nfrom bokeh.plotting import figure, output_file, show\n\nx = [1, 2, 3, 4, 5]\n\ny = [6, 7, 2, 4, 5]\n\noutput_file('lines.html', title='line plot example')\n\np = figure(title='simple line example', x_axis_label='x', y_axis_label='y')\n\np.line(x, y, legend='Temp.', line_width=2)\n\nshow(p)\n", "target_lineno": 35, "nodes": [{"type": "Module", "children": [1, 5, 13, 21, 27, 37, 48]}, {"type": "ImportFrom", "children": [2, 3, 4], "value": "bokeh.plotting"}, {"type": "alias", "value": "figure"}, {"type": "alias", "value": "output_file"}, {"type": "alias", "value": "show"}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "x"}, {"type": "ListLoad", "children": [8, 9, 10, 11, 12]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "4"}, {"type": "Num", "value": "5"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "y"}, {"type": "ListLoad", "children": [16, 17, 18, 19, 20]}, {"type": "Num", "value": "6"}, {"type": "Num", "value": "7"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "4"}, {"type": "Num", "value": "5"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 24, 25]}, {"type": "NameLoad", "value": "output_file"}, {"type": "Str", "value": "lines.html"}, {"type": "keyword", "children": [26], "value": "title"}, {"type": "Str", "value": "line plot example"}, {"type": "Assign", "children": [28, 29]}, {"type": "NameStore", "value": "p"}, {"type": "Call", "children": [30, 31, 33, 35]}, {"type": "NameLoad", "value": "figure"}, {"type": "keyword", "children": [32], "value": "title"}, {"type": "Str", "value": "simple line example"}, {"type": "keyword", "children": [34], "value": "x_axis_label"}, {"type": "Str", "value": "x"}, {"type": "keyword", "children": [36], "value": "y_axis_label"}, {"type": "Str", "value": "y"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 42, 43, 44, 46]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "p"}, {"type": "attr", "value": "line"}, {"type": "NameLoad", "value": "x"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "children": [45], "value": "legend"}, {"type": "Str", "value": "Temp."}, {"type": "keyword", "children": [47], "value": "line_width"}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [49]}, {"type": "Call", "children": [50, 51]}, {"type": "NameLoad", "value": "show"}, {"type": "NameLoad", "value": "p"}], "stage": null, "id": 335003, "neighbor_cells": [335002], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_948073.py", "target_func": "none_func", "context": "\nfsr_results\n", "target_lineno": 653, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "fsr_results"}], "stage": null, "id": 28173, "neighbor_cells": [28172], "header": "", "annotation": []}
{"target_lineno": 161, "file": "/projects/bdata/jupyter/target/nb_606493.py", "context": "\nX_train = sm.add_constant(df.student2)\n\ny = df.default2\n\nest = smf.Logit(y, X_train).fit()\n\nest.summary().tables[1]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10, 15, 26]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X_train"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "sm"}, {"type": "attr", "value": "add_constant"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "student2"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "y"}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "default2"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "est"}, {"type": "Call", "children": [18]}, {"type": "AttributeLoad", "children": [19, 25]}, {"type": "Call", "children": [20, 23, 24]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "smf"}, {"type": "attr", "value": "Logit"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "X_train"}, {"type": "attr", "value": "fit"}, {"type": "Expr", "children": [27]}, {"type": "SubscriptLoad", "children": [28, 34]}, {"type": "AttributeLoad", "children": [29, 33]}, {"type": "Call", "children": [30]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "est"}, {"type": "attr", "value": "summary"}, {"type": "attr", "value": "tables"}, {"type": "Index", "children": [35]}, {"type": "Num", "value": "1"}], "funcs": ["statsmodels.api.add_constant", "statsmodels.formula.api.Logit.fit", "statsmodels.formula.api.Logit", "statsmodels.formula.api.Logit.fit.summary"], "neighbor_cells": [789584], "id": 789585, "header": " Table 4 2", "annotation": [" Table 4 2"]}
{"target_lineno": 821, "file": "/projects/bdata/jupyter/target/nb_856429.py", "context": "\nA[::2, ::2]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "A"}, {"type": "ExtSlice", "children": [5, 7]}, {"type": "Slice", "children": [6]}, {"type": "Num", "value": "2"}, {"type": "Slice", "children": [8]}, {"type": "Num", "value": "2"}], "funcs": [], "neighbor_cells": [883927], "id": 883928, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_103018.py", "target_func": "none_func", "context": "\nahypes\n", "target_lineno": 1302, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "ahypes"}], "stage": null, "id": 812333, "neighbor_cells": [812332], "header": "", "annotation": []}
{"target_lineno": 98, "file": "/projects/bdata/jupyter/target/nb_557703.py", "context": "\ndelays = data.groupby(['origin_city', 'destin_city'])[['ArrDelay', 'DepDelay']].mean().reset_index()\n\ndelays['Total_delay'] = (delays.ArrDelay + delays.DepDelay)\n\ndelays.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 21, 33]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "delays"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 20]}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 19]}, {"type": "SubscriptLoad", "children": [8, 15]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "groupby"}, {"type": "ListLoad", "children": [13, 14]}, {"type": "Str", "value": "origin_city"}, {"type": "Str", "value": "destin_city"}, {"type": "Index", "children": [16]}, {"type": "ListLoad", "children": [17, 18]}, {"type": "Str", "value": "ArrDelay"}, {"type": "Str", "value": "DepDelay"}, {"type": "attr", "value": "mean"}, {"type": "attr", "value": "reset_index"}, {"type": "Assign", "children": [22, 26]}, {"type": "SubscriptStore", "children": [23, 24]}, {"type": "NameLoad", "value": "delays"}, {"type": "Index", "children": [25]}, {"type": "Str", "value": "Total_delay"}, {"type": "BinOpAdd", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "delays"}, {"type": "attr", "value": "ArrDelay"}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "delays"}, {"type": "attr", "value": "DepDelay"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "delays"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.merge.groupby", "pandas.read_csv.merge.groupby", "mean.reset_index", "pandas.read_csv.merge.groupby", "mean", "pandas.read_csv.merge.groupby", "mean.reset_index.head"], "neighbor_cells": [195944], "id": 195945, "header": "", "annotation": [" The following data set comprises the average arrival departure and total delay between every existing origin destination pair in 2008 "]}
{"target_lineno": 54, "file": "/projects/bdata/jupyter/target/nb_252159.py", "context": "\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n\nlabelEncoder = LabelEncoder()\n\nX[:, 3] = labelEncoder.fit_transform(X[:, 3])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 8]}, {"type": "ImportFrom", "value": "sklearn.preprocessing", "children": [2, 3]}, {"type": "alias", "value": "LabelEncoder"}, {"type": "alias", "value": "OneHotEncoder"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "labelEncoder"}, {"type": "Call", "children": [7]}, {"type": "NameLoad", "value": "LabelEncoder"}, {"type": "Assign", "children": [9, 15]}, {"type": "SubscriptStore", "children": [10, 11]}, {"type": "NameLoad", "value": "X"}, {"type": "ExtSlice", "children": [12, 13]}, {"type": "Slice"}, {"type": "Index", "children": [14]}, {"type": "Num", "value": "3"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "labelEncoder"}, {"type": "attr", "value": "fit_transform"}, {"type": "SubscriptLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "X"}, {"type": "ExtSlice", "children": [22, 23]}, {"type": "Slice"}, {"type": "Index", "children": [24]}, {"type": "Num", "value": "3"}], "funcs": ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit_transform"], "neighbor_cells": [831630], "id": 831631, "header": "", "annotation": []}
{"target_lineno": 534, "file": "/projects/bdata/jupyter/target/nb_799039.py", "context": "\nfrom xgboost import XGBClassifier\n\nxgb = XGBClassifier(n_estimators=5000, max_depth=3, min_child_weight=6, learning_rate=0.01, colsample_bytree=0.5, subsample=0.6, gamma=0.0, nthread=(- 1), max_delta_step=1, objective='multi:softmax')\n\nxgb.fit(X_train, y_train, sample_weight=([1] * len(y_train)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 28]}, {"type": "ImportFrom", "value": "xgboost", "children": [2]}, {"type": "alias", "value": "XGBClassifier"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "xgb"}, {"type": "Call", "children": [6, 7, 9, 11, 13, 15, 17, 19, 21, 24, 26]}, {"type": "NameLoad", "value": "XGBClassifier"}, {"type": "keyword", "value": "n_estimators", "children": [8]}, {"type": "Num", "value": "5000"}, {"type": "keyword", "value": "max_depth", "children": [10]}, {"type": "Num", "value": "3"}, {"type": "keyword", "value": "min_child_weight", "children": [12]}, {"type": "Num", "value": "6"}, {"type": "keyword", "value": "learning_rate", "children": [14]}, {"type": "Num", "value": "0.01"}, {"type": "keyword", "value": "colsample_bytree", "children": [16]}, {"type": "Num", "value": "0.5"}, {"type": "keyword", "value": "subsample", "children": [18]}, {"type": "Num", "value": "0.6"}, {"type": "keyword", "value": "gamma", "children": [20]}, {"type": "Num", "value": "0.0"}, {"type": "keyword", "value": "nthread", "children": [22]}, {"type": "UnaryOpUSub", "children": [23]}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "max_delta_step", "children": [25]}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "objective", "children": [27]}, {"type": "Str", "value": "multi:softmax"}, {"type": "Expr", "children": [29]}, {"type": "Call", "children": [30, 33, 34, 35]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "xgb"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "keyword", "value": "sample_weight", "children": [36]}, {"type": "BinOpMult", "children": [37, 39]}, {"type": "ListLoad", "children": [38]}, {"type": "Num", "value": "1"}, {"type": "Call", "children": [40, 41]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "y_train"}], "funcs": ["xgboost.XGBClassifier", "xgboost.XGBClassifier.fit", "len"], "neighbor_cells": [1270761], "id": 1270762, "header": "", "annotation": []}
{"target_lineno": 135, "file": "/projects/bdata/jupyter/target/nb_743887.py", "context": "\nsql = '\\nSELECT\\n\\tr.region,\\n\\tSUM(if(rj.matched_at IS NOT NULL, 1, 0)) as claimed,\\n\\tSUM(if(b.id IS NOT NULL, 1, 0)) as completed,\\n\\tSUM(if(b.id IS NULL, 1, 0)) as not_completed,\\n\\tSUM(if(b.id IS NOT NULL, 1, 0)) / SUM(if(rj.matched_at IS NOT NULL, 1, 0)) * 100 AS completed_rate    # completed / claimed * 100\\nFROM \\n\\trecommended_jobs rj\\n\\tLEFT JOIN booking b ON \\n\\t\\trj.booking_id = b.id \\n\\t\\tAND rj.provider_id = b.provider_id\\n\\t\\tAND b.when_cancelled IS NULL\\n\\t\\tAND b.confirmed = 1\\n\\t\\tAND b.date_start < NOW()\\n\\tLEFT JOIN booking b2 ON   -- To get region\\n\\t\\trj.booking_id = b2.id \\n\\tLEFT JOIN l_region r ON \\n\\t\\tr.region_id = b2.region_id\\nWHERE \\n\\trj.matched_at IS NOT NULL\\nGROUP BY \\n\\tr.region_id\\n'\n\ncompleted_rates_by_regions = pd.read_sql(sql, conn)\n\ncompleted_rates_by_regions\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 12]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "sql"}, {"type": "Str", "value": "\nSELECT\n\tr.region,\n\tSUM(if(rj.matched_at IS NOT NULL, 1, 0)) as claimed,\n\tSUM(if(b.id IS NOT NULL, 1, 0)) as completed,\n\tSUM(if(b.id IS NULL, 1, 0)) as not_completed,\n\tSUM(if(b.id IS NOT NULL, 1, 0)) / SUM(if(rj.matched_at IS NOT NULL, 1, 0)) * 100 AS completed_rate    # completed / claimed * 100\nFROM \n\trecommended_jobs rj\n\tLEFT JOIN booking b ON \n\t\trj.booking_id = b.id \n\t\tAND rj.provider_id = b.provider_id\n\t\tAND b.when_cancelled IS NULL\n\t\tAND b.confirmed = 1\n\t\tAND b.date_start < NOW()\n\tLEFT JOIN booking b2 ON   -- To get region\n\t\trj.booking_id = b2.id \n\tLEFT JOIN l_region r ON \n\t\tr.region_id = b2.region_id\nWHERE \n\trj.matched_at IS NOT NULL\nGROUP BY \n\tr.region_id\n"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "completed_rates_by_regions"}, {"type": "Call", "children": [7, 10, 11]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_sql"}, {"type": "NameLoad", "value": "sql"}, {"type": "NameLoad", "value": "conn"}, {"type": "Expr", "children": [13]}, {"type": "NameLoad", "value": "completed_rates_by_regions"}], "funcs": ["pandas.read_sql"], "neighbor_cells": [12557], "id": 12558, "header": "", "annotation": []}
{"target_lineno": 774, "file": "/projects/bdata/jupyter/target/nb_3282.py", "context": "\nmodel.fit(oh_x_rnn, oh_y_rnn, batch_size=64, nb_epoch=8)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7, 8, 10]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "oh_x_rnn"}, {"type": "NameLoad", "value": "oh_y_rnn"}, {"type": "keyword", "value": "batch_size", "children": [9]}, {"type": "Num", "value": "64"}, {"type": "keyword", "value": "nb_epoch", "children": [11]}, {"type": "Num", "value": "8"}], "funcs": ["Sequential.fit"], "neighbor_cells": [502518], "id": 502519, "header": "", "annotation": []}
{"funcs": ["numpy.linalg.svd", "numpy.linalg.svd", "range", "plotImage"], "file": "/projects/bdata/jupyter/target/nb_974376.py", "target_func": "none_func", "context": "\n(U, D, V) = np.linalg.svd(trainData, full_matrices=0)\n\n(Utest, Dtest, Vtest) = np.linalg.svd(testData, full_matrices=0)\n\n\ndef displayEigenFace(matrix, numFaces):\n    '\\n    displayEigenFace plots the first numFaces(number of faces)faces\\n    '\n    for i in range(numFaces):\n        plotImage(matrix[i, :])\n", "target_lineno": 112, "nodes": [{"type": "Module", "children": [1, 15, 29]}, {"type": "Assign", "children": [2, 6]}, {"type": "TupleStore", "children": [3, 4, 5]}, {"type": "NameStore", "value": "U"}, {"type": "NameStore", "value": "D"}, {"type": "NameStore", "value": "V"}, {"type": "Call", "children": [7, 12, 13]}, {"type": "AttributeLoad", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "linalg"}, {"type": "attr", "value": "svd"}, {"type": "NameLoad", "value": "trainData"}, {"type": "keyword", "children": [14], "value": "full_matrices"}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [16, 20]}, {"type": "TupleStore", "children": [17, 18, 19]}, {"type": "NameStore", "value": "Utest"}, {"type": "NameStore", "value": "Dtest"}, {"type": "NameStore", "value": "Vtest"}, {"type": "Call", "children": [21, 26, 27]}, {"type": "AttributeLoad", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "linalg"}, {"type": "attr", "value": "svd"}, {"type": "NameLoad", "value": "testData"}, {"type": "keyword", "children": [28], "value": "full_matrices"}, {"type": "Num", "value": "0"}, {"type": "FunctionDef", "children": [30, 35, 53], "value": "displayEigenFace"}, {"type": "arguments", "children": [31, 34]}, {"type": "args", "children": [32, 33]}, {"type": "NameParam", "value": "matrix"}, {"type": "NameParam", "value": "numFaces"}, {"type": "defaults"}, {"type": "body", "children": [36, 38]}, {"type": "Expr", "children": [37]}, {"type": "Str", "value": "\n    displayEigenFace plots the first numFaces(number of faces)faces\n    "}, {"type": "For", "children": [39, 40, 43]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [41, 42]}, {"type": "NameLoad", "value": "range"}, {"type": "NameLoad", "value": "numFaces"}, {"type": "body", "children": [44]}, {"type": "Expr", "children": [45]}, {"type": "Call", "children": [46, 47]}, {"type": "NameLoad", "value": "plotImage"}, {"type": "SubscriptLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "matrix"}, {"type": "ExtSlice", "children": [50, 52]}, {"type": "Index", "children": [51]}, {"type": "NameLoad", "value": "i"}, {"type": "Slice"}, {"type": "decorator_list"}], "stage": null, "id": 560886, "neighbor_cells": [560885], "header": " e Eigenface", "annotation": [" e Eigenface"]}
{"target_lineno": 205, "file": "/projects/bdata/jupyter/target/nb_931015.py", "context": "\n\ndef foo(x, a=1, b=False):\n    'This function has two optional arguments'\n    print('x = {}, a={}, b={}'.format(x, a, b))\n\nfoo(10)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 24]}, {"type": "FunctionDef", "value": "foo", "children": [2, 10, 23]}, {"type": "arguments", "children": [3, 7]}, {"type": "args", "children": [4, 5, 6]}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults", "children": [8, 9]}, {"type": "Num", "value": "1"}, {"type": "NameConstant"}, {"type": "body", "children": [11, 13]}, {"type": "Expr", "children": [12]}, {"type": "Str", "value": "This function has two optional arguments"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [17, 20, 21, 22]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "Str", "value": "x = {}, a={}, b={}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "x"}, {"type": "NameLoad", "value": "a"}, {"type": "NameLoad", "value": "b"}, {"type": "decorator_list"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 27]}, {"type": "NameLoad", "value": "foo"}, {"type": "Num", "value": "10"}], "funcs": ["print", "format", "foo"], "neighbor_cells": [169472], "id": 169473, "header": "", "annotation": [" One of the really cool features in python is the support of keyword arguments Keyword arguments provide both a nice looking syntax for setting default values as well for handing arguments to the function "]}
{"funcs": ["pandas.read_csv.groupby.mean", "pandas.read_csv.groupby"], "file": "/projects/bdata/jupyter/target/nb_158013.py", "target_func": "none_func", "context": "\nbeer.groupby('cluster').mean()\n", "target_lineno": 256, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 9]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "beer"}, {"type": "attr", "value": "groupby"}, {"type": "Str", "value": "cluster"}, {"type": "attr", "value": "mean"}], "stage": null, "id": 418761, "neighbor_cells": [418760], "header": "", "annotation": []}
{"target_lineno": 60, "file": "/projects/bdata/jupyter/target/nb_730869.py", "context": "\ndf_raw.columns.values\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df_raw"}, {"type": "attr", "value": "columns"}, {"type": "attr", "value": "values"}], "funcs": [], "neighbor_cells": [626790], "id": 626791, "header": "", "annotation": []}
{"target_lineno": 362, "file": "/projects/bdata/jupyter/target/nb_773161.py", "context": "\ndf[(df['Concentration'] == df['Concentration'].min())].sort('Max power')[::(- 1)][0:5]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 26]}, {"type": "SubscriptLoad", "children": [4, 23]}, {"type": "Call", "children": [5, 22]}, {"type": "AttributeLoad", "children": [6, 21]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [9]}, {"type": "CompareEq", "children": [10, 14]}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [13]}, {"type": "Str", "value": "Concentration"}, {"type": "Call", "children": [15]}, {"type": "AttributeLoad", "children": [16, 20]}, {"type": "SubscriptLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [19]}, {"type": "Str", "value": "Concentration"}, {"type": "attr", "value": "min"}, {"type": "attr", "value": "sort"}, {"type": "Str", "value": "Max power"}, {"type": "Slice", "children": [24]}, {"type": "UnaryOpUSub", "children": [25]}, {"type": "Num", "value": "1"}, {"type": "Slice", "children": [27, 28]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "5"}], "funcs": ["min", "sort", "min"], "neighbor_cells": [1299407], "id": 1299408, "header": "", "annotation": []}
{"target_lineno": 190, "file": "/projects/bdata/jupyter/target/nb_497931.py", "context": "\n\ndef get_generattion(before, after, mid):\n    dic = {\n        batch_before: before,\n        batch_after: after,\n        batch_mid: mid,\n        is_training: False,\n    }\n    gen_batch = sess.run(G_batch, dic)\n    (gen_batch, loss) = sess.run([G_batch, G_loss], dic)\n    return (gen_batch, loss)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "get_generattion", "children": [2, 8, 44]}, {"type": "arguments", "children": [3, 7]}, {"type": "args", "children": [4, 5, 6]}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [9, 20, 28, 40]}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "dic"}, {"type": "Dict", "children": [12, 13, 14, 15, 16, 17, 18, 19]}, {"type": "NameLoad", "value": "batch_before"}, {"type": "NameLoad", "value": "batch_after"}, {"type": "NameLoad", "value": "batch_mid"}, {"type": "NameLoad", "value": "is_training"}, {"type": "NameLoad", "value": "before"}, {"type": "NameLoad", "value": "after"}, {"type": "NameLoad", "value": "mid"}, {"type": "NameConstant"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "gen_batch"}, {"type": "Call", "children": [23, 26, 27]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "sess"}, {"type": "attr", "value": "run"}, {"type": "NameLoad", "value": "G_batch"}, {"type": "NameLoad", "value": "dic"}, {"type": "Assign", "children": [29, 32]}, {"type": "TupleStore", "children": [30, 31]}, {"type": "NameStore", "value": "gen_batch"}, {"type": "NameStore", "value": "loss"}, {"type": "Call", "children": [33, 36, 39]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "sess"}, {"type": "attr", "value": "run"}, {"type": "ListLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "G_batch"}, {"type": "NameLoad", "value": "G_loss"}, {"type": "NameLoad", "value": "dic"}, {"type": "Return", "children": [41]}, {"type": "TupleLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "gen_batch"}, {"type": "NameLoad", "value": "loss"}, {"type": "decorator_list"}], "funcs": ["sess.run", "sess.run"], "neighbor_cells": [930905], "id": 930906, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_188005.py", "target_func": "none_func", "context": "\nsteam1['no_user'][0]\n", "target_lineno": 36, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 7]}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "steam1"}, {"type": "Index", "children": [6]}, {"type": "Str", "value": "no_user"}, {"type": "Index", "children": [8]}, {"type": "Num", "value": "0"}], "stage": null, "id": 1076672, "neighbor_cells": [1076671], "header": "", "annotation": []}
{"target_lineno": 85, "file": "/projects/bdata/jupyter/target/nb_213286.py", "context": "\ndf.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.head"], "neighbor_cells": [40349], "id": 40350, "header": "", "annotation": []}
{"funcs": ["matplotlib.pyplot.imshow"], "file": "/projects/bdata/jupyter/target/nb_890000.py", "target_func": "none_func", "context": "\nplt.imshow(imageData)\n", "target_lineno": 214, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "NameLoad", "value": "imageData"}], "stage": null, "id": 791973, "neighbor_cells": [791972], "header": "", "annotation": []}
{"target_lineno": 17, "file": "/projects/bdata/jupyter/target/nb_977737.py", "context": "\nimport pandas as pd\n\nimport numpy as np\n\nimport time\n\nimport datetime as dt\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn import tree\n\nfrom sklearn.model_selection import train_test_split\n\nget_ipython().magic('matplotlib inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 9, 12, 15, 17, 19]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pandas", "children": [3]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "numpy", "children": [6]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "time"}, {"type": "Import", "children": [10]}, {"type": "alias", "value": "datetime", "children": [11]}, {"type": "identifier", "value": "dt"}, {"type": "Import", "children": [13]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [14]}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "value": "sklearn", "children": [16]}, {"type": "alias", "value": "tree"}, {"type": "ImportFrom", "value": "sklearn.model_selection", "children": [18]}, {"type": "alias", "value": "train_test_split"}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21, 25]}, {"type": "AttributeLoad", "children": [22, 24]}, {"type": "Call", "children": [23]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [774035], "id": 774036, "header": "", "annotation": []}
{"target_lineno": 115, "file": "/projects/bdata/jupyter/target/nb_996903.py", "context": "\nget_ipython().magic('matplotlib inline')\n\nimport numpy as np\n\nimport scipy.io\n\nimport scipy.cluster\n\nimport matplotlib.pyplot as plt\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\npresorted = {k: v for (k, v) in scipy.io.loadmat('spike_waveforms').items() if (k in ('sig118a_wf', 'sig118b_wf', 'sig118c_wf'))}\n\npresorted = [presorted['sig118a_wf'], presorted['sig118b_wf'], presorted['sig118c_wf']]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 11, 13, 15, 18, 20, 45]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "Import", "children": [9]}, {"type": "alias", "value": "numpy", "children": [10]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [12]}, {"type": "alias", "value": "scipy.io"}, {"type": "Import", "children": [14]}, {"type": "alias", "value": "scipy.cluster"}, {"type": "Import", "children": [16]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [17]}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "value": "mpl_toolkits.mplot3d", "children": [19]}, {"type": "alias", "value": "Axes3D"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "presorted"}, {"type": "DictComp", "children": [23, 24, 25]}, {"type": "NameLoad", "value": "k"}, {"type": "NameLoad", "value": "v"}, {"type": "comprehension", "children": [26, 29, 39]}, {"type": "TupleStore", "children": [27, 28]}, {"type": "NameStore", "value": "k"}, {"type": "NameStore", "value": "v"}, {"type": "Call", "children": [30]}, {"type": "AttributeLoad", "children": [31, 38]}, {"type": "Call", "children": [32, 37]}, {"type": "AttributeLoad", "children": [33, 36]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "scipy"}, {"type": "attr", "value": "io"}, {"type": "attr", "value": "loadmat"}, {"type": "Str", "value": "spike_waveforms"}, {"type": "attr", "value": "items"}, {"type": "CompareIn", "children": [40, 41]}, {"type": "NameLoad", "value": "k"}, {"type": "TupleLoad", "children": [42, 43, 44]}, {"type": "Str", "value": "sig118a_wf"}, {"type": "Str", "value": "sig118b_wf"}, {"type": "Str", "value": "sig118c_wf"}, {"type": "Assign", "children": [46, 47]}, {"type": "NameStore", "value": "presorted"}, {"type": "ListLoad", "children": [48, 52, 56]}, {"type": "SubscriptLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "presorted"}, {"type": "Index", "children": [51]}, {"type": "Str", "value": "sig118a_wf"}, {"type": "SubscriptLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "presorted"}, {"type": "Index", "children": [55]}, {"type": "Str", "value": "sig118b_wf"}, {"type": "SubscriptLoad", "children": [57, 58]}, {"type": "NameLoad", "value": "presorted"}, {"type": "Index", "children": [59]}, {"type": "Str", "value": "sig118c_wf"}], "funcs": ["get_ipython.magic", "get_ipython", "scipy.io.loadmat.items", "scipy.io.loadmat"], "neighbor_cells": [-1], "id": 233913, "header": "", "annotation": [" A spike occurs when the potential passes a certain threshold in a neuron In our data set each recorded waveform contains N 32 samples taken at a sampling frequency of 40kHz which means the time difference between each consecutive sample is 800 mu s We can represent each vector exactly with any 32 dimensional basis as long as the vectors making up the basis are linearly independent However we want to compute a minimal set of basis vectors that brings out the features of the data using Principal Component Analysis PCA ", " ", " For this lab we will work with data from a single electrode which records the activity of up to 3 different neurons We provide both training and test sets with two and three neurons The two neuron data set lets us visualize using a 2D scatter plot while the three neuron data set requres a 3D scatter plots The neurons have also been presorted using a professional software so we can check our model against presorted data ", " ", " Import the data sets and see the average waveform for each presorted neuron by running the following cell "]}
{"funcs": ["range", "float"], "file": "/projects/bdata/jupyter/target/nb_241717.py", "target_func": "none_func", "context": "\ncount = 0\n\nfor ix in range(labels_test.shape[0]):\n    if (preds[ix] == labels_test[ix]):\n        count += 1\n\nprint 'Accuracy:', (float((count * 100)) / labels_test.shape[0])\n", "target_lineno": 294, "nodes": [{"type": "Module", "children": [1, 4, 29]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "count"}, {"type": "Num", "value": "0"}, {"type": "For", "children": [5, 6, 14]}, {"type": "NameStore", "value": "ix"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "range"}, {"type": "SubscriptLoad", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "labels_test"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [13]}, {"type": "Num", "value": "0"}, {"type": "body", "children": [15]}, {"type": "If", "children": [16, 25]}, {"type": "CompareEq", "children": [17, 21]}, {"type": "SubscriptLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "preds"}, {"type": "Index", "children": [20]}, {"type": "NameLoad", "value": "ix"}, {"type": "SubscriptLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "labels_test"}, {"type": "Index", "children": [24]}, {"type": "NameLoad", "value": "ix"}, {"type": "body", "children": [26]}, {"type": "AugAssignAdd", "children": [27, 28]}, {"type": "NameStore", "value": "count"}, {"type": "Num", "value": "1"}, {"type": "Print", "children": [30, 31]}, {"type": "Str", "value": "Accuracy:"}, {"type": "BinOpDiv", "children": [32, 37]}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "float"}, {"type": "BinOpMult", "children": [35, 36]}, {"type": "NameLoad", "value": "count"}, {"type": "Num", "value": "100"}, {"type": "SubscriptLoad", "children": [38, 41]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "labels_test"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [42]}, {"type": "Num", "value": "0"}], "stage": null, "id": 239854, "neighbor_cells": [239853], "header": "", "annotation": []}
{"funcs": ["train_predict", "train_predict", "train_predict"], "file": "/projects/bdata/jupyter/target/nb_492757.py", "target_func": "none_func", "context": "\ntrain_predict(clf_A, X_train_100, y_train_100, X_test, y_test)\n\ntrain_predict(clf_A, X_train_200, y_train_200, X_test, y_test)\n\ntrain_predict(clf_A, X_train_300, y_train_300, X_test, y_test)\n", "target_lineno": 329, "nodes": [{"type": "Module", "children": [1, 9, 17]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 6, 7, 8]}, {"type": "NameLoad", "value": "train_predict"}, {"type": "NameLoad", "value": "clf_A"}, {"type": "NameLoad", "value": "X_train_100"}, {"type": "NameLoad", "value": "y_train_100"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 12, 13, 14, 15, 16]}, {"type": "NameLoad", "value": "train_predict"}, {"type": "NameLoad", "value": "clf_A"}, {"type": "NameLoad", "value": "X_train_200"}, {"type": "NameLoad", "value": "y_train_200"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 20, 21, 22, 23, 24]}, {"type": "NameLoad", "value": "train_predict"}, {"type": "NameLoad", "value": "clf_A"}, {"type": "NameLoad", "value": "X_train_300"}, {"type": "NameLoad", "value": "y_train_300"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_test"}], "stage": null, "id": 591206, "neighbor_cells": [591205], "header": " DecisionTreeClassifier", "annotation": [" Execute the train predict function for each classifier each training set size", " DecisionTreeClassifier"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_47891.py", "target_func": "none_func", "context": "\nids = []\n", "target_lineno": 490, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ids"}, {"type": "ListLoad"}], "stage": null, "id": 750133, "neighbor_cells": [750132], "header": "", "annotation": []}
{"target_lineno": 172, "file": "/projects/bdata/jupyter/target/nb_977422.py", "context": "\nax = plot_train_history({\n    'dense': history_dense,\n    'conv': history_conv,\n})\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "plot_train_history"}, {"type": "Dict", "children": [6, 7, 8, 9]}, {"type": "Str", "value": "dense"}, {"type": "Str", "value": "conv"}, {"type": "NameLoad", "value": "history_dense"}, {"type": "NameLoad", "value": "history_conv"}], "funcs": ["plot_utils.plot_train_history"], "neighbor_cells": [5271], "id": 5272, "header": "", "annotation": []}
{"target_lineno": 537, "file": "/projects/bdata/jupyter/target/nb_104536.py", "context": "\ndata['LOAN_MAX_DLQ_AMT'] = functions.split_best_iv(data, 'LOAN_MAX_DLQ_AMT', 'TARGET')\n\ndata['LOAN_MAX_DLQ_AMT'].fillna(data['LOAN_MAX_DLQ_AMT'].cat.categories[0], inplace=True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "LOAN_MAX_DLQ_AMT"}, {"type": "Call", "children": [7, 10, 11, 12]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "functions"}, {"type": "attr", "value": "split_best_iv"}, {"type": "NameLoad", "value": "data"}, {"type": "Str", "value": "LOAN_MAX_DLQ_AMT"}, {"type": "Str", "value": "TARGET"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 21, 32]}, {"type": "AttributeLoad", "children": [16, 20]}, {"type": "SubscriptLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [19]}, {"type": "Str", "value": "LOAN_MAX_DLQ_AMT"}, {"type": "attr", "value": "fillna"}, {"type": "SubscriptLoad", "children": [22, 30]}, {"type": "AttributeLoad", "children": [23, 29]}, {"type": "AttributeLoad", "children": [24, 28]}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [27]}, {"type": "Str", "value": "LOAN_MAX_DLQ_AMT"}, {"type": "attr", "value": "cat"}, {"type": "attr", "value": "categories"}, {"type": "Index", "children": [31]}, {"type": "Num", "value": "0"}, {"type": "keyword", "value": "inplace", "children": [33]}, {"type": "NameConstant"}], "funcs": ["functions.split_best_iv", "fillna"], "neighbor_cells": [804657], "id": 804658, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_7731.py", "target_func": "none_func", "context": "\ny\n", "target_lineno": 137, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "y"}], "stage": null, "id": 677731, "neighbor_cells": [677730], "header": "", "annotation": []}
{"target_lineno": 207, "file": "/projects/bdata/jupyter/target/nb_560383.py", "context": "\nconfus_matrix = metrics.confusion_matrix(y, (~ np.argmax(r, axis=1).astype(bool)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "confus_matrix"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y"}, {"type": "UnaryOpInvert", "children": [9]}, {"type": "Call", "children": [10, 19]}, {"type": "AttributeLoad", "children": [11, 18]}, {"type": "Call", "children": [12, 15, 16]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "argmax"}, {"type": "NameLoad", "value": "r"}, {"type": "keyword", "value": "axis", "children": [17]}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "astype"}, {"type": "NameLoad", "value": "bool"}], "funcs": ["sklearn.metrics.confusion_matrix", "numpy.argmax.astype", "numpy.argmax"], "neighbor_cells": [617956], "id": 617957, "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.Ridge.fit"], "file": "/projects/bdata/jupyter/target/nb_482539.py", "target_func": "none_func", "context": "\nTlf.fit(X_train, y_train)\n", "target_lineno": 106, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "Tlf"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}], "stage": null, "id": 580795, "neighbor_cells": [580794], "header": "", "annotation": []}
{"funcs": ["mBag.predict_proba"], "file": "/projects/bdata/jupyter/target/nb_29537.py", "target_func": "none_func", "context": "\npred_y = mBag.predict_proba(test_x)\n\nprint pred_y[0:5, :]\n", "target_lineno": 511, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "pred_y"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "mBag"}, {"type": "attr", "value": "predict_proba"}, {"type": "NameLoad", "value": "test_x"}, {"type": "Print", "children": [9]}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "pred_y"}, {"type": "ExtSlice", "children": [12, 15]}, {"type": "Slice", "children": [13, 14]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "5"}, {"type": "Slice"}], "stage": null, "id": 276471, "neighbor_cells": [276470], "header": " Bagging", "annotation": [" Bagging"]}
{"funcs": ["matplotlib.pyplot.scatter"], "file": "/projects/bdata/jupyter/target/nb_966266.py", "target_func": "none_func", "context": "\nplt.scatter(trainX[:, 0], trainX[:, 1], marker='o', c=fp.labels_, cmap='ocean')\n", "target_lineno": 103, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 12, 18, 20, 24]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "trainX"}, {"type": "ExtSlice", "children": [9, 10]}, {"type": "Slice"}, {"type": "Index", "children": [11]}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "trainX"}, {"type": "ExtSlice", "children": [15, 16]}, {"type": "Slice"}, {"type": "Index", "children": [17]}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [19], "value": "marker"}, {"type": "Str", "value": "o"}, {"type": "keyword", "children": [21], "value": "c"}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "fp"}, {"type": "attr", "value": "labels_"}, {"type": "keyword", "children": [25], "value": "cmap"}, {"type": "Str", "value": "ocean"}], "stage": null, "id": 224044, "neighbor_cells": [224043], "header": "", "annotation": []}
{"target_lineno": 128, "file": "/projects/bdata/jupyter/target/nb_522986.py", "context": "\nfrom mpl_toolkits.mplot3d import Axes3D\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "value": "mpl_toolkits.mplot3d", "children": [2]}, {"type": "alias", "value": "Axes3D"}], "funcs": [], "neighbor_cells": [1328933], "id": 1328934, "header": "", "annotation": []}
{"target_lineno": 563, "file": "/projects/bdata/jupyter/target/nb_417152.py", "context": "\ncross_val_score(clf, df3[features], df3.vacant, cv=10, scoring='accuracy').mean()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 18]}, {"type": "Call", "children": [5, 6, 7, 11, 14, 16]}, {"type": "NameLoad", "value": "cross_val_score"}, {"type": "NameLoad", "value": "clf"}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "df3"}, {"type": "Index", "children": [10]}, {"type": "NameLoad", "value": "features"}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "df3"}, {"type": "attr", "value": "vacant"}, {"type": "keyword", "value": "cv", "children": [15]}, {"type": "Num", "value": "10"}, {"type": "keyword", "value": "scoring", "children": [17]}, {"type": "Str", "value": "accuracy"}, {"type": "attr", "value": "mean"}], "funcs": ["sklearn.cross_validation.cross_val_score.mean", "sklearn.cross_validation.cross_val_score"], "neighbor_cells": [638390], "id": 638391, "header": "", "annotation": []}
{"target_lineno": 121, "file": "/projects/bdata/jupyter/target/nb_319196.py", "context": "\nfn_H1 = 'H-H1_LOSC_4_V1-1126259446-32.hdf5'\n\n(strain_H1, time_H1, chan_dict_H1) = rl.loaddata(fn_H1, 'H1')\n\nfn_L1 = 'L-L1_LOSC_4_V1-1126259446-32.hdf5'\n\n(strain_L1, time_L1, chan_dict_L1) = rl.loaddata(fn_L1, 'L1')\n\nfs = 4096\n\ntime = time_H1\n\ndt = (time[1] - time[0])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 15, 18, 29, 32, 35]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "fn_H1"}, {"type": "Str", "value": "H-H1_LOSC_4_V1-1126259446-32.hdf5"}, {"type": "Assign", "children": [5, 9]}, {"type": "TupleStore", "children": [6, 7, 8]}, {"type": "NameStore", "value": "strain_H1"}, {"type": "NameStore", "value": "time_H1"}, {"type": "NameStore", "value": "chan_dict_H1"}, {"type": "Call", "children": [10, 13, 14]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "rl"}, {"type": "attr", "value": "loaddata"}, {"type": "NameLoad", "value": "fn_H1"}, {"type": "Str", "value": "H1"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "fn_L1"}, {"type": "Str", "value": "L-L1_LOSC_4_V1-1126259446-32.hdf5"}, {"type": "Assign", "children": [19, 23]}, {"type": "TupleStore", "children": [20, 21, 22]}, {"type": "NameStore", "value": "strain_L1"}, {"type": "NameStore", "value": "time_L1"}, {"type": "NameStore", "value": "chan_dict_L1"}, {"type": "Call", "children": [24, 27, 28]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "rl"}, {"type": "attr", "value": "loaddata"}, {"type": "NameLoad", "value": "fn_L1"}, {"type": "Str", "value": "L1"}, {"type": "Assign", "children": [30, 31]}, {"type": "NameStore", "value": "fs"}, {"type": "Num", "value": "4096"}, {"type": "Assign", "children": [33, 34]}, {"type": "NameStore", "value": "time"}, {"type": "NameLoad", "value": "time_H1"}, {"type": "Assign", "children": [36, 37]}, {"type": "NameStore", "value": "dt"}, {"type": "BinOpSub", "children": [38, 42]}, {"type": "SubscriptLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "time"}, {"type": "Index", "children": [41]}, {"type": "Num", "value": "1"}, {"type": "SubscriptLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "time"}, {"type": "Index", "children": [45]}, {"type": "Num", "value": "0"}], "funcs": ["readligo.loaddata", "readligo.loaddata"], "neighbor_cells": [485878], "id": 485879, "header": "", "annotation": [" NOTE that in general LIGO strain time series data has gaps filled with NaNs when the detectors are not taking valid science quality data Analyzing these data requires the user to loop over segments of valid data stretches In https losc ligo org segments we provide example code to do this ", " ", " However the 4096 seconds of released data around GW150914 is one unbroken segment with no gaps So for now we will read it all in and treat it as one valid data segment ignoring the extra complexity mentioned above ", " ", " This won t work for other LOSC data releases See https losc ligo org segments for a more general way to find valid data segments in LOSC data "]}
{"target_lineno": 221, "file": "/projects/bdata/jupyter/target/nb_757807.py", "context": "\nX_test[(y_test < y_pred_class)].head(10)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 11]}, {"type": "AttributeLoad", "children": [4, 10]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "X_test"}, {"type": "Index", "children": [7]}, {"type": "CompareLt", "children": [8, 9]}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred_class"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "10"}], "funcs": ["head"], "neighbor_cells": [26912], "id": 26913, "header": "", "annotation": [" Task 7 Challenge ", " ", " Browse through the review text of some of the false positives and false negatives Based on your knowledge of how Naive Bayes works do you have any ideas about why the model is incorrectly classifying these reviews ", " ", " Hint Evaluating a classification model https github com justmarkham scikit learn videos blob master 09 classification metrics ipynb explains the definitions of false positives and false negatives ", " Hint Think about what a false positive means in this context and what a false negative means in this context What has scikit learn defined as the positive class "]}
{"funcs": ["seaborn.jointplot", "matplotlib.pyplot.show"], "file": "/projects/bdata/jupyter/target/nb_654793.py", "target_func": "none_func", "context": "\nsns.jointplot(dataFrame.Weight, dataFrame.Height, kind='hex', stat_func=None)\n\nplt.show()\n", "target_lineno": 359, "nodes": [{"type": "Module", "children": [1, 16]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 9, 12, 14]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "jointplot"}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "dataFrame"}, {"type": "attr", "value": "Weight"}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "dataFrame"}, {"type": "attr", "value": "Height"}, {"type": "keyword", "children": [13], "value": "kind"}, {"type": "Str", "value": "hex"}, {"type": "keyword", "children": [15], "value": "stat_func"}, {"type": "NameLoad", "value": "None"}, {"type": "Expr", "children": [17]}, {"type": "Call", "children": [18]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "stage": null, "id": 788344, "neighbor_cells": [788343], "header": "", "annotation": [" Seaborn is very convenient to visualize the joint and marginal together "]}
{"target_lineno": 84, "file": "/projects/bdata/jupyter/target/nb_744224.py", "context": "\nprint(accuracy_score(y_test, y_pred))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 6, 7]}, {"type": "NameLoad", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred"}], "funcs": ["print", "sklearn.metrics.accuracy_score"], "neighbor_cells": [1073157], "id": 1073158, "header": "", "annotation": []}
{"target_lineno": 44, "file": "/projects/bdata/jupyter/target/nb_334096.py", "context": "\nwith model:\n    start = pm.find_MAP(fmin=sp.optimize.fmin_powell)\n    N = 30000\n    trace = pm.sample(N, start=start)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "With", "children": [2, 5]}, {"type": "items", "children": [3]}, {"type": "withitem", "children": [4]}, {"type": "NameLoad", "value": "model"}, {"type": "body", "children": [6, 18, 21]}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "start"}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "pm"}, {"type": "attr", "value": "find_MAP"}, {"type": "keyword", "value": "fmin", "children": [13]}, {"type": "AttributeLoad", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "sp"}, {"type": "attr", "value": "optimize"}, {"type": "attr", "value": "fmin_powell"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "N"}, {"type": "Num", "value": "30000"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "trace"}, {"type": "Call", "children": [24, 27, 28]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "pm"}, {"type": "attr", "value": "sample"}, {"type": "NameLoad", "value": "N"}, {"type": "keyword", "value": "start", "children": [29]}, {"type": "NameLoad", "value": "start"}], "funcs": ["pymc3.find_MAP", "pymc3.sample"], "neighbor_cells": [289867], "id": 289868, "header": "", "annotation": []}
{"funcs": ["sklearn.metrics.r2_score"], "file": "/projects/bdata/jupyter/target/nb_427082.py", "target_func": "none_func", "context": "\n\ndef performance_metric(y_true, y_predict):\n    ' Calculates and returns the performance score between \\n        true and predicted values based on the metric chosen. '\n    from sklearn.metrics import r2_score\n    score = r2_score(y_true, y_predict)\n    return score\n", "target_lineno": 119, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 7, 20], "value": "performance_metric"}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "NameParam", "value": "y_true"}, {"type": "NameParam", "value": "y_predict"}, {"type": "defaults"}, {"type": "body", "children": [8, 10, 12, 18]}, {"type": "Expr", "children": [9]}, {"type": "Str", "value": " Calculates and returns the performance score between \n        true and predicted values based on the metric chosen. "}, {"type": "ImportFrom", "children": [11], "value": "sklearn.metrics"}, {"type": "alias", "value": "r2_score"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "score"}, {"type": "Call", "children": [15, 16, 17]}, {"type": "NameLoad", "value": "r2_score"}, {"type": "NameLoad", "value": "y_true"}, {"type": "NameLoad", "value": "y_predict"}, {"type": "Return", "children": [19]}, {"type": "NameLoad", "value": "score"}, {"type": "decorator_list"}], "stage": null, "id": 604171, "neighbor_cells": [604170], "header": "", "annotation": [" Question 1 Feature Observation", " As a reminder we are using three features from the Boston housing dataset RM LSTAT and PTRATIO For each data point neighborhood ", " RM is the average number of rooms among homes in the neighborhood ", " LSTAT is the percentage of homeowners in the neighborhood considered lower class working poor ", " PTRATIO is the ratio of students to teachers in primary and secondary schools in the neighborhood ", " ", " Using your intuition for each of the three features above do you think that an increase in the value of that feature would lead to an increase in the value of MEDV or a decrease in the value of MEDV Justify your answer for each ", " Hint Would you expect a home that has an RM value of 6 be worth more or less than a home that has an RM value of 7 ", " Variable Expected relation of house price with respect to variable ", " ", " RM positive ", " LSTAT negative ", " PTRATO positive ", " ", " The relations I would expect to exist in the data are summarized in the table above I will explain the reasoning behind each conclusion next I expect that the average number of rooms in a neighborhood will have a positive relation on MEDV I base this on the observation that an increase in number of rooms will most likely mean a higher surface of the house Since the price per square foot is always positive a higher surface will lead to a higher house price ", " ", " I expect the LSTAT to have a negative impact on MEDV I base this on the assumption that a higher percentage of lower class home owners will likely mean that they have less income to spend on purchasing a house As a result the house prices in these neighbourhoods will likely be lower than a neighborhood where homeowners are richer ", " ", " I expect that PTRATIO the ratio of students to teachers will have a negative impact on the house prices I base this assumption on the premise that home owners would be willing to pay more for houses close to a school were less students are assigned per teacher than for a house close to a school were there are more students assigned per teacher Since the number will likely be within the range of 1 40 1 10 or 0 025 0 1 we may need to take the x text PTRATO tick left x text PTRATO right 1 transformation Applying this transformation would scale our variable from 10 40 In that case the sign would flip ", " ", " ", " Developing a Model", " In this second section of the project you will develop the tools and techniques necessary for a model to make a prediction Being able to make accurate evaluations of each model s performance through the use of these tools and techniques helps to greatly reinforce the confidence in your predictions ", " Implementation Define a Performance Metric", " It is difficult to measure the quality of a given model without quantifying its performance over training and testing This is typically done using some type of performance metric whether it is through calculating some type of error the goodness of fit or some other useful measurement For this project you will be calculating the coefficient of determination http stattrek com statistics dictionary aspx definition coefficient of determination R sup 2 sup to quantify your model s performance The coefficient of determination for a model is a useful statistic in regression analysis as it often describes how good that model is at making predictions ", " ", " The values for R sup 2 sup range from 0 to 1 which captures the percentage of squared correlation between the predicted and actual values of the target variable A model with an R sup 2 sup of 0 always fails to predict the target variable whereas a model with an R sup 2 sup of 1 perfectly predicts the target variable Any value between 0 and 1 indicates what percentage of the target variable using this model can be explained by the features A model can be given a negative R sup 2 sup as well which indicates that the model is no better than one that naively predicts the mean of the target variable ", " ", " For the performance metric function in the code cell below you will need to implement the following ", " Use r2 score from sklearn metrics to perform a performance calculation between y true and y predict ", " Assign the performance score to the score variable "]}
{"funcs": ["value_counts"], "file": "/projects/bdata/jupyter/target/nb_378488.py", "target_func": "none_func", "context": "\nmccormack_df['Ad_Issue'].value_counts()\n", "target_lineno": 2415, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "mccormack_df"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "Ad_Issue"}, {"type": "attr", "value": "value_counts"}], "stage": null, "id": 857823, "neighbor_cells": [857822], "header": "", "annotation": []}
{"funcs": ["get_ipython.run_cell_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_747128.py", "target_func": "none_func", "context": "\nget_ipython().run_cell_magic('time', '', 'accuracies = []\\nfor feature in features:\\n    crf = CRF(train, test, FEATURES=[feature])\\n    accuracy = crf.train()\\n    accuracies.append(accuracy)\\n    print \"Accuracy with only %s: %.6f\" % (feature, accuracy*100)')\n", "target_lineno": 341, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8, 9]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_cell_magic"}, {"type": "Str", "value": "time"}, {"type": "Str", "value": ""}, {"type": "Str", "value": "accuracies = []\nfor feature in features:\n    crf = CRF(train, test, FEATURES=[feature])\n    accuracy = crf.train()\n    accuracies.append(accuracy)\n    print \"Accuracy with only %s: %.6f\" % (feature, accuracy*100)"}], "stage": null, "id": 665506, "neighbor_cells": [665505], "header": "", "annotation": []}
{"funcs": ["arange", "subplots", "step", "scipy.stats.poisson.pmf", "step", "scipy.stats.poisson.cdf", "hist", "scipy.stats.poisson.rvs"], "file": "/projects/bdata/jupyter/target/nb_658870.py", "target_func": "none_func", "context": "\nn = arange(0, 15)\n\n(fig, axes) = subplots(3, 1, sharex=True)\n\naxes[0].step(n, X.pmf(n))\n\naxes[1].step(n, X.cdf(n))\n\naxes[2].hist(X.rvs(size=1000))\n", "target_lineno": 982, "nodes": [{"type": "Module", "children": [1, 7, 17, 31, 45]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "n"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "arange"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "15"}, {"type": "Assign", "children": [8, 11]}, {"type": "TupleStore", "children": [9, 10]}, {"type": "NameStore", "value": "fig"}, {"type": "NameStore", "value": "axes"}, {"type": "Call", "children": [12, 13, 14, 15]}, {"type": "NameLoad", "value": "subplots"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [16], "value": "sharex"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 25, 26]}, {"type": "AttributeLoad", "children": [20, 24]}, {"type": "SubscriptLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "axes"}, {"type": "Index", "children": [23]}, {"type": "Num", "value": "0"}, {"type": "attr", "value": "step"}, {"type": "NameLoad", "value": "n"}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "pmf"}, {"type": "NameLoad", "value": "n"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 39, 40]}, {"type": "AttributeLoad", "children": [34, 38]}, {"type": "SubscriptLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "axes"}, {"type": "Index", "children": [37]}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "step"}, {"type": "NameLoad", "value": "n"}, {"type": "Call", "children": [41, 44]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "cdf"}, {"type": "NameLoad", "value": "n"}, {"type": "Expr", "children": [46]}, {"type": "Call", "children": [47, 53]}, {"type": "AttributeLoad", "children": [48, 52]}, {"type": "SubscriptLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "axes"}, {"type": "Index", "children": [51]}, {"type": "Num", "value": "2"}, {"type": "attr", "value": "hist"}, {"type": "Call", "children": [54, 57]}, {"type": "AttributeLoad", "children": [55, 56]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "rvs"}, {"type": "keyword", "children": [58], "value": "size"}, {"type": "Num", "value": "1000"}], "stage": null, "id": 1059551, "neighbor_cells": [1059550], "header": "", "annotation": []}
{"target_lineno": 256, "file": "/projects/bdata/jupyter/target/nb_104442.py", "context": "\nz_sample = np.array([[(- 5), (- 6)]])\n\nx_decoded = generator.predict(z_sample)\n\nplt.imshow(x_decoded.reshape(28, 28), cmap='Greys_r')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13, 20]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "z_sample"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [8]}, {"type": "ListLoad", "children": [9, 11]}, {"type": "UnaryOpUSub", "children": [10]}, {"type": "Num", "value": "5"}, {"type": "UnaryOpUSub", "children": [12]}, {"type": "Num", "value": "6"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "x_decoded"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "generator"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "z_sample"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 25, 31]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "Call", "children": [26, 29, 30]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "x_decoded"}, {"type": "attr", "value": "reshape"}, {"type": "Num", "value": "28"}, {"type": "Num", "value": "28"}, {"type": "keyword", "value": "cmap", "children": [32]}, {"type": "Str", "value": "Greys_r"}], "funcs": ["numpy.array", "keras.models.Model.predict", "matplotlib.pyplot.imshow", "keras.models.Model.predict.reshape"], "neighbor_cells": [718668], "id": 718669, "header": " Q2 latent vector ", "annotation": [" Q2 latent vector "]}
{"target_lineno": 56, "file": "/projects/bdata/jupyter/target/nb_33742.py", "context": "\ndata.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [82905], "id": 82906, "header": "", "annotation": []}
{"funcs": ["sklearn.tree.DecisionTreeClassifier", "sklearn.tree.DecisionTreeClassifier.fit"], "file": "/projects/bdata/jupyter/target/nb_395761.py", "target_func": "none_func", "context": "\nfrom sklearn.tree import DecisionTreeClassifier\n\ntreeclf = DecisionTreeClassifier(max_depth=3, random_state=1)\n\ntreeclf.fit(X, y)\n", "target_lineno": 444, "nodes": [{"type": "Module", "children": [1, 3, 11]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.tree"}, {"type": "alias", "value": "DecisionTreeClassifier"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "treeclf"}, {"type": "Call", "children": [6, 7, 9]}, {"type": "NameLoad", "value": "DecisionTreeClassifier"}, {"type": "keyword", "children": [8], "value": "max_depth"}, {"type": "Num", "value": "3"}, {"type": "keyword", "children": [10], "value": "random_state"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16, 17]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "treeclf"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}], "stage": null, "id": 773714, "neighbor_cells": [773713], "header": "", "annotation": []}
{"funcs": ["hist"], "file": "/projects/bdata/jupyter/target/nb_760096.py", "target_func": "none_func", "context": "\np_fake[(p_fake < 0.45)].hist(bins=100)\n", "target_lineno": 577, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 11]}, {"type": "AttributeLoad", "children": [4, 10]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "p_fake"}, {"type": "Index", "children": [7]}, {"type": "CompareLt", "children": [8, 9]}, {"type": "NameLoad", "value": "p_fake"}, {"type": "Num", "value": "0.45"}, {"type": "attr", "value": "hist"}, {"type": "keyword", "children": [12], "value": "bins"}, {"type": "Num", "value": "100"}], "stage": null, "id": 946416, "neighbor_cells": [946415], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.groupby.size.unstack.groupby.apply", "pandas.read_csv.groupby.size.unstack.groupby", "pandas.read_csv.groupby.size.unstack.sum"], "file": "/projects/bdata/jupyter/target/nb_984744.py", "target_func": "none_func", "context": "\npct_sex = ss.groupby(level=0).apply((lambda x: ((100 * x) / ss.sum())))\n\npct_sex\n", "target_lineno": 159, "nodes": [{"type": "Module", "children": [1, 25]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "pct_sex"}, {"type": "Call", "children": [4, 12]}, {"type": "AttributeLoad", "children": [5, 11]}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "ss"}, {"type": "attr", "value": "groupby"}, {"type": "keyword", "children": [10], "value": "level"}, {"type": "Num", "value": "0"}, {"type": "attr", "value": "apply"}, {"type": "Lambda", "children": [13, 17]}, {"type": "arguments", "children": [14, 16]}, {"type": "args", "children": [15]}, {"type": "NameParam", "value": "x"}, {"type": "defaults"}, {"type": "BinOpDiv", "children": [18, 21]}, {"type": "BinOpMult", "children": [19, 20]}, {"type": "Num", "value": "100"}, {"type": "NameLoad", "value": "x"}, {"type": "Call", "children": [22]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "ss"}, {"type": "attr", "value": "sum"}, {"type": "Expr", "children": [26]}, {"type": "NameLoad", "value": "pct_sex"}], "stage": null, "id": 379695, "neighbor_cells": [379694], "header": "", "annotation": [" Again we need to calculate the percentage because the number of males is more than the number of females "]}
{"funcs": ["numpy.mean", "min", "min", "max", "pandas.DataFrame.applymap"], "file": "/projects/bdata/jupyter/target/nb_800453.py", "target_func": "none_func", "context": "\ncurrent_corr = np.mean(historic_correlations['^GSPC'])\n\ndistance_from_midcycle = (0.6 - current_corr)\n\nadjustment_factor = min(2.0, (1.0 / (1.0 + (2 * distance_from_midcycle))))\n\ncycle_adjustment = (lambda x: min(max(0.05, (x ** adjustment_factor)), 1))\n\nexp_corrs = historic_correlations.applymap(cycle_adjustment)\n", "target_lineno": 360, "nodes": [{"type": "Module", "children": [1, 11, 16, 28, 44]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "current_corr"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "historic_correlations"}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "^GSPC"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "distance_from_midcycle"}, {"type": "BinOpSub", "children": [14, 15]}, {"type": "Num", "value": "0.6"}, {"type": "NameLoad", "value": "current_corr"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "adjustment_factor"}, {"type": "Call", "children": [19, 20, 21]}, {"type": "NameLoad", "value": "min"}, {"type": "Num", "value": "2.0"}, {"type": "BinOpDiv", "children": [22, 23]}, {"type": "Num", "value": "1.0"}, {"type": "BinOpAdd", "children": [24, 25]}, {"type": "Num", "value": "1.0"}, {"type": "BinOpMult", "children": [26, 27]}, {"type": "Num", "value": "2"}, {"type": "NameLoad", "value": "distance_from_midcycle"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "cycle_adjustment"}, {"type": "Lambda", "children": [31, 35]}, {"type": "arguments", "children": [32, 34]}, {"type": "args", "children": [33]}, {"type": "NameParam", "value": "x"}, {"type": "defaults"}, {"type": "Call", "children": [36, 37, 43]}, {"type": "NameLoad", "value": "min"}, {"type": "Call", "children": [38, 39, 40]}, {"type": "NameLoad", "value": "max"}, {"type": "Num", "value": "0.05"}, {"type": "BinOpPow", "children": [41, 42]}, {"type": "NameLoad", "value": "x"}, {"type": "NameLoad", "value": "adjustment_factor"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [45, 46]}, {"type": "NameStore", "value": "exp_corrs"}, {"type": "Call", "children": [47, 50]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "historic_correlations"}, {"type": "attr", "value": "applymap"}, {"type": "NameLoad", "value": "cycle_adjustment"}], "stage": null, "id": 67650, "neighbor_cells": [67649], "header": "", "annotation": [" Adjusting correlations back towards mid cycle The S P 500 has historically had a correlation between stocks of N 0 6 0 1 "]}
{"target_lineno": 330, "file": "/projects/bdata/jupyter/target/nb_388587.py", "context": "\ntempbyday = groupbyday[('T', 'F')].sum()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "tempbyday"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 11]}, {"type": "SubscriptLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "groupbyday"}, {"type": "Index", "children": [8]}, {"type": "TupleLoad", "children": [9, 10]}, {"type": "Str", "value": "T"}, {"type": "Str", "value": "F"}, {"type": "attr", "value": "sum"}], "funcs": ["sum"], "neighbor_cells": [577437], "id": 577438, "header": "", "annotation": []}
{"funcs": ["pandas.concat.drop_duplicates"], "file": "/projects/bdata/jupyter/target/nb_340711.py", "target_func": "none_func", "context": "\nldf = mod_df\n\nldf = mod_df.drop_duplicates(['Title'])\n", "target_lineno": 329, "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ldf"}, {"type": "NameLoad", "value": "mod_df"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "ldf"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "mod_df"}, {"type": "attr", "value": "drop_duplicates"}, {"type": "ListLoad", "children": [11]}, {"type": "Str", "value": "Title"}], "stage": null, "id": 30866, "neighbor_cells": [30865], "header": "", "annotation": []}
{"target_lineno": 230, "file": "/projects/bdata/jupyter/target/nb_955198.py", "context": "\nfrom keras.models import Sequential\n\nfrom keras.layers import Dense, Activation\n\nnb_classes = 3\n\nmodel = Sequential()\n\nmodel.add(Dense(3, input_shape=(2,)))\n\nmodel.add(Activation('softmax'))\n\nmodel.summary()\n\nmodel.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])\n\nhistory = model.fit(x_data, y_data, epochs=1000, verbose=0)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 6, 9, 13, 24, 32, 37, 49]}, {"type": "ImportFrom", "value": "keras.models", "children": [2]}, {"type": "alias", "value": "Sequential"}, {"type": "ImportFrom", "value": "keras.layers", "children": [4, 5]}, {"type": "alias", "value": "Dense"}, {"type": "alias", "value": "Activation"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "nb_classes"}, {"type": "Num", "value": "3"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [12]}, {"type": "NameLoad", "value": "Sequential"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "add"}, {"type": "Call", "children": [19, 20, 21]}, {"type": "NameLoad", "value": "Dense"}, {"type": "Num", "value": "3"}, {"type": "keyword", "value": "input_shape", "children": [22]}, {"type": "TupleLoad", "children": [23]}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "add"}, {"type": "Call", "children": [30, 31]}, {"type": "NameLoad", "value": "Activation"}, {"type": "Str", "value": "softmax"}, {"type": "Expr", "children": [33]}, {"type": "Call", "children": [34]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "summary"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 42, 44, 46]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "compile"}, {"type": "keyword", "value": "loss", "children": [43]}, {"type": "Str", "value": "categorical_crossentropy"}, {"type": "keyword", "value": "optimizer", "children": [45]}, {"type": "Str", "value": "sgd"}, {"type": "keyword", "value": "metrics", "children": [47]}, {"type": "ListLoad", "children": [48]}, {"type": "Str", "value": "accuracy"}, {"type": "Assign", "children": [50, 51]}, {"type": "NameStore", "value": "history"}, {"type": "Call", "children": [52, 55, 56, 57, 59]}, {"type": "AttributeLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "x_data"}, {"type": "NameLoad", "value": "y_data"}, {"type": "keyword", "value": "epochs", "children": [58]}, {"type": "Num", "value": "1000"}, {"type": "keyword", "value": "verbose", "children": [60]}, {"type": "Num", "value": "0"}], "funcs": ["keras.models.Sequential", "keras.models.Sequential.add", "keras.layers.Dense", "keras.models.Sequential.add", "keras.layers.Activation", "keras.models.Sequential.summary", "keras.models.Sequential.compile", "keras.models.Sequential.fit"], "neighbor_cells": [589308], "id": 589309, "header": " Keras Implementation", "annotation": [" Keras Implementation"]}
{"target_lineno": 980, "file": "/projects/bdata/jupyter/target/nb_693221.py", "context": "\nx_reproj = project_x(x_new, X, alphas=alphas, lambdas=lambdas)\n\nx_reproj\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x_reproj"}, {"type": "Call", "children": [4, 5, 6, 7, 9]}, {"type": "NameLoad", "value": "project_x"}, {"type": "NameLoad", "value": "x_new"}, {"type": "NameLoad", "value": "X"}, {"type": "keyword", "value": "alphas", "children": [8]}, {"type": "NameLoad", "value": "alphas"}, {"type": "keyword", "value": "lambdas", "children": [10]}, {"type": "NameLoad", "value": "lambdas"}, {"type": "Expr", "children": [12]}, {"type": "NameLoad", "value": "x_reproj"}], "funcs": ["project_x"], "neighbor_cells": [195495], "id": 195496, "header": "", "annotation": []}
{"target_lineno": 125, "file": "/projects/bdata/jupyter/target/nb_356965.py", "context": "\nscipy.stats.ttest_ind(temp_F, temp_M)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 8, 9]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "scipy"}, {"type": "attr", "value": "stats"}, {"type": "attr", "value": "ttest_ind"}, {"type": "NameLoad", "value": "temp_F"}, {"type": "NameLoad", "value": "temp_M"}], "funcs": ["scipy.stats.ttest_ind"], "neighbor_cells": [188512], "id": 188513, "header": "", "annotation": [" With a two sample t test below we compute p value 2 4 The result is a little less extreme and may be worth discussion on whether there is a true difference "]}
{"funcs": ["sklearn.decomposition.NMF", "sklearn.decomposition.NMF.fit"], "file": "/projects/bdata/jupyter/target/nb_155702.py", "target_func": "none_func", "context": "\nnmf = decomposition.NMF(init='random', n_components=5, max_iter=1000, alpha=0.5, l1_ratio=0.5)\n\nnmf_fit = nmf.fit(imp_allele_matrix.T)\n", "target_lineno": 648, "nodes": [{"type": "Module", "children": [1, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "nmf"}, {"type": "Call", "children": [4, 7, 9, 11, 13, 15]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "decomposition"}, {"type": "attr", "value": "NMF"}, {"type": "keyword", "children": [8], "value": "init"}, {"type": "Str", "value": "random"}, {"type": "keyword", "children": [10], "value": "n_components"}, {"type": "Num", "value": "5"}, {"type": "keyword", "children": [12], "value": "max_iter"}, {"type": "Num", "value": "1000"}, {"type": "keyword", "children": [14], "value": "alpha"}, {"type": "Num", "value": "0.5"}, {"type": "keyword", "children": [16], "value": "l1_ratio"}, {"type": "Num", "value": "0.5"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "nmf_fit"}, {"type": "Call", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "nmf"}, {"type": "attr", "value": "fit"}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "imp_allele_matrix"}, {"type": "attr", "value": "T"}], "stage": null, "id": 884264, "neighbor_cells": [884263], "header": "", "annotation": []}
{"target_lineno": 112, "file": "/projects/bdata/jupyter/target/nb_298567.py", "context": "\ngauss_rate = gaussian_convolution(spikes, dt, gaussian_kernel, scaling_factor)\n\nplt.plot(gauss_rate)\n\nplt.xlabel('time steps')\n\nplt.ylabel('fire rate')\n\nmean_fire_rate_2 = np.mean(gauss_rate)\n\nprint('the mean fire rate is', mean_fire_rate_2)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 15, 21, 27, 34]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "gauss_rate"}, {"type": "Call", "children": [4, 5, 6, 7, 8]}, {"type": "NameLoad", "value": "gaussian_convolution"}, {"type": "NameLoad", "value": "spikes"}, {"type": "NameLoad", "value": "dt"}, {"type": "NameLoad", "value": "gaussian_kernel"}, {"type": "NameLoad", "value": "scaling_factor"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "gauss_rate"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "time steps"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "fire rate"}, {"type": "Assign", "children": [28, 29]}, {"type": "NameStore", "value": "mean_fire_rate_2"}, {"type": "Call", "children": [30, 33]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "NameLoad", "value": "gauss_rate"}, {"type": "Expr", "children": [35]}, {"type": "Call", "children": [36, 37, 38]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "the mean fire rate is"}, {"type": "NameLoad", "value": "mean_fire_rate_2"}], "funcs": ["gaussian_convolution", "matplotlib.pyplot.plot", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "numpy.mean", "print"], "neighbor_cells": [1158178], "id": 1158179, "header": "", "annotation": []}
{"funcs": ["h5py.File", "numpy.mean"], "file": "/projects/bdata/jupyter/target/nb_300173.py", "target_func": "none_func", "context": "\nfor fname in fnames:\n    with h5py.File(fname, 'r') as f:\n        mov = f['current_statestep2/corrected'][10:(-10), 10:(-10), :]\n    print fname\n    print np.mean(mov)\n", "target_lineno": 575, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 4]}, {"type": "NameStore", "value": "fname"}, {"type": "NameLoad", "value": "fnames"}, {"type": "body", "children": [5, 29, 31]}, {"type": "With", "children": [6, 12, 13]}, {"type": "Call", "children": [7, 10, 11]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "h5py"}, {"type": "attr", "value": "File"}, {"type": "NameLoad", "value": "fname"}, {"type": "Str", "value": "r"}, {"type": "NameStore", "value": "f"}, {"type": "body", "children": [14]}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "mov"}, {"type": "SubscriptLoad", "children": [17, 21]}, {"type": "SubscriptLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "f"}, {"type": "Index", "children": [20]}, {"type": "Str", "value": "current_statestep2/corrected"}, {"type": "ExtSlice", "children": [22, 25, 28]}, {"type": "Slice", "children": [23, 24]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "-10"}, {"type": "Slice", "children": [26, 27]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "-10"}, {"type": "Slice"}, {"type": "Print", "children": [30]}, {"type": "NameLoad", "value": "fname"}, {"type": "Print", "children": [32]}, {"type": "Call", "children": [33, 36]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "NameLoad", "value": "mov"}], "stage": null, "id": 470275, "neighbor_cells": [470274], "header": "", "annotation": []}
{"funcs": ["LogisticRegressionCV"], "file": "/projects/bdata/jupyter/target/nb_518702.py", "target_func": "none_func", "context": "\ntrain_data = washed_df.values\n\nlog_cv = LogisticRegressionCV(n_jobs=(-1))\n", "target_lineno": 60, "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "train_data"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "washed_df"}, {"type": "attr", "value": "values"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "log_cv"}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "LogisticRegressionCV"}, {"type": "keyword", "children": [11], "value": "n_jobs"}, {"type": "Num", "value": "-1"}], "stage": null, "id": 583668, "neighbor_cells": [583667], "header": "", "annotation": []}
{"target_lineno": 35, "file": "/projects/bdata/jupyter/target/nb_31190.py", "context": "\nobservations.columns\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "observations"}, {"type": "attr", "value": "columns"}], "funcs": [], "neighbor_cells": [424500], "id": 424501, "header": "", "annotation": []}
{"target_lineno": 155, "file": "/projects/bdata/jupyter/target/nb_91789.py", "context": "\nmetrics.accuracy_score(target, predicted)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "target"}, {"type": "NameLoad", "value": "predicted"}], "funcs": ["sklearn.metrics.accuracy_score"], "neighbor_cells": [762621], "id": 762622, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_540181.py", "target_func": "none_func", "context": "\nprint date_obs\n\nprint 'exposure = ', exposure, 'seconds'\n", "target_lineno": 116, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "date_obs"}, {"type": "Print", "children": [4, 5, 6]}, {"type": "Str", "value": "exposure = "}, {"type": "NameLoad", "value": "exposure"}, {"type": "Str", "value": "seconds"}], "stage": null, "id": 74635, "neighbor_cells": [74634], "header": "", "annotation": []}
{"target_lineno": 26, "file": "/projects/bdata/jupyter/target/nb_263187.py", "context": "\nfit = smf.ols('mpg ~ horsepower', data=auto).fit()\n\nprint(fit.summary())\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "fit"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 12]}, {"type": "Call", "children": [6, 9, 10]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "smf"}, {"type": "attr", "value": "ols"}, {"type": "Str", "value": "mpg ~ horsepower"}, {"type": "keyword", "value": "data", "children": [11]}, {"type": "NameLoad", "value": "auto"}, {"type": "attr", "value": "fit"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "fit"}, {"type": "attr", "value": "summary"}], "funcs": ["statsmodels.formula.api.ols.fit", "statsmodels.formula.api.ols", "print", "statsmodels.formula.api.ols.fit.summary"], "neighbor_cells": [54273], "id": 54274, "header": "", "annotation": []}
{"target_lineno": 79, "file": "/projects/bdata/jupyter/target/nb_601403.py", "context": "\ndataset = df['close'].values\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dataset"}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "close"}, {"type": "attr", "value": "values"}], "funcs": [], "neighbor_cells": [586452], "id": 586453, "header": "", "annotation": []}
{"target_lineno": 55, "file": "/projects/bdata/jupyter/target/nb_345919.py", "context": "\ntrain['date_start'] = pd.to_datetime(train['date_start'])\n\ntrain['weekday'] = train['date_start'].map((lambda x: x.weekday_name))\n\ntrain['hour_start'] = pd.to_datetime(train['time_start'], format='%H:%M', errors='coerce').dt.hour\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 14, 34]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "date_start"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "to_datetime"}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [13]}, {"type": "Str", "value": "date_start"}, {"type": "Assign", "children": [15, 19]}, {"type": "SubscriptStore", "children": [16, 17]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [18]}, {"type": "Str", "value": "weekday"}, {"type": "Call", "children": [20, 26]}, {"type": "AttributeLoad", "children": [21, 25]}, {"type": "SubscriptLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [24]}, {"type": "Str", "value": "date_start"}, {"type": "attr", "value": "map"}, {"type": "Lambda", "children": [27, 31]}, {"type": "arguments", "children": [28, 30]}, {"type": "args", "children": [29]}, {"type": "arg"}, {"type": "defaults"}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "x"}, {"type": "attr", "value": "weekday_name"}, {"type": "Assign", "children": [35, 39]}, {"type": "SubscriptStore", "children": [36, 37]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [38]}, {"type": "Str", "value": "hour_start"}, {"type": "AttributeLoad", "children": [40, 54]}, {"type": "AttributeLoad", "children": [41, 53]}, {"type": "Call", "children": [42, 45, 49, 51]}, {"type": "AttributeLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "to_datetime"}, {"type": "SubscriptLoad", "children": [46, 47]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [48]}, {"type": "Str", "value": "time_start"}, {"type": "keyword", "value": "format", "children": [50]}, {"type": "Str", "value": "%H:%M"}, {"type": "keyword", "value": "errors", "children": [52]}, {"type": "Str", "value": "coerce"}, {"type": "attr", "value": "dt"}, {"type": "attr", "value": "hour"}], "funcs": ["pandas.to_datetime", "map", "pandas.to_datetime"], "neighbor_cells": [40045], "id": 40046, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_994805.py", "target_func": "none_func", "context": "\n(390 * 3)\n", "target_lineno": 66, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpMult", "children": [3, 4]}, {"type": "Num", "value": "390"}, {"type": "Num", "value": "3"}], "stage": null, "id": 197684, "neighbor_cells": [197683], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_793402.py", "target_func": "none_func", "context": "\nc0df[(c0df.rid == 'T2zItRCqolfzSZR2Io0OZg')]\n", "target_lineno": 175, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "c0df"}, {"type": "Index", "children": [5]}, {"type": "CompareEq", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "c0df"}, {"type": "attr", "value": "rid"}, {"type": "Str", "value": "T2zItRCqolfzSZR2Io0OZg"}], "stage": null, "id": 943015, "neighbor_cells": [943014], "header": "", "annotation": [" Explain why these answers could be very different from the priorp and priorn we calculated earlier ", " These answers are very different from priorp and priorn because the probability is calculated within the context of these topic clustters ", " A single example ", " For the business id T2zItRCqolfzSZR2Io0OZg let us see what our class0 and class1 probability distributions look like"]}
{"target_lineno": 84, "file": "/projects/bdata/jupyter/target/nb_731657.py", "context": "\nperiods = adjacencies_agg.keys()\n\nperiods = sorted(periods)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "periods"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "adjacencies_agg"}, {"type": "attr", "value": "keys"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "periods"}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "sorted"}, {"type": "NameLoad", "value": "periods"}], "funcs": ["adjacencies_agg.keys", "sorted"], "neighbor_cells": [1197363], "id": 1197364, "header": "", "annotation": []}
{"target_lineno": 447, "file": "/projects/bdata/jupyter/target/nb_902142.py", "context": "\n(X, Y) = generateX(True, True, tf, idf, locRates, N, dic_index, gDicList, V2dicCode, True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "X"}, {"type": "NameStore", "value": "Y"}, {"type": "Call", "children": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}, {"type": "NameLoad", "value": "generateX"}, {"type": "NameConstant"}, {"type": "NameConstant"}, {"type": "NameLoad", "value": "tf"}, {"type": "NameLoad", "value": "idf"}, {"type": "NameLoad", "value": "locRates"}, {"type": "NameLoad", "value": "N"}, {"type": "NameLoad", "value": "dic_index"}, {"type": "NameLoad", "value": "gDicList"}, {"type": "NameLoad", "value": "V2dicCode"}, {"type": "NameConstant"}], "funcs": ["generateX"], "neighbor_cells": [273678], "id": 273679, "header": "", "annotation": []}
{"target_lineno": 115, "file": "/projects/bdata/jupyter/target/nb_61370.py", "context": "\nimport numpy as np\n\nfrom sklearn import preprocessing\n\n\ndef one_hot_encode(x):\n    '\\n    One hot encode a list of sample labels. Return a one-hot encoded vector for each label.\\n    : x: List of sample Labels\\n    : return: Numpy array of one-hot encoded labels\\n    '\n    rows = len(x)\n    onehot = np.zeros([rows, 10])\n    for (idx, v) in enumerate(x):\n        onehot[idx][v] = 1\n    return onehot\n\n\"\\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\\n\"\n\ntests.test_one_hot_encode(one_hot_encode)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 6, 48, 50]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "value": "sklearn", "children": [5]}, {"type": "alias", "value": "preprocessing"}, {"type": "FunctionDef", "value": "one_hot_encode", "children": [7, 11, 47]}, {"type": "arguments", "children": [8, 10]}, {"type": "args", "children": [9]}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [12, 14, 19, 28, 45]}, {"type": "Expr", "children": [13]}, {"type": "Str", "value": "\n    One hot encode a list of sample labels. Return a one-hot encoded vector for each label.\n    : x: List of sample Labels\n    : return: Numpy array of one-hot encoded labels\n    "}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "rows"}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "x"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "onehot"}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "zeros"}, {"type": "ListLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "rows"}, {"type": "Num", "value": "10"}, {"type": "For", "children": [29, 32, 35]}, {"type": "TupleStore", "children": [30, 31]}, {"type": "NameStore", "value": "idx"}, {"type": "NameStore", "value": "v"}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "enumerate"}, {"type": "NameLoad", "value": "x"}, {"type": "body", "children": [36]}, {"type": "Assign", "children": [37, 44]}, {"type": "SubscriptStore", "children": [38, 42]}, {"type": "SubscriptLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "onehot"}, {"type": "Index", "children": [41]}, {"type": "NameLoad", "value": "idx"}, {"type": "Index", "children": [43]}, {"type": "NameLoad", "value": "v"}, {"type": "Num", "value": "1"}, {"type": "Return", "children": [46]}, {"type": "NameLoad", "value": "onehot"}, {"type": "decorator_list"}, {"type": "Expr", "children": [49]}, {"type": "Str", "value": "\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n"}, {"type": "Expr", "children": [51]}, {"type": "Call", "children": [52, 55]}, {"type": "AttributeLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "tests"}, {"type": "attr", "value": "test_one_hot_encode"}, {"type": "NameLoad", "value": "one_hot_encode"}], "funcs": ["len", "numpy.zeros", "enumerate", "problem_unittests.test_one_hot_encode"], "neighbor_cells": [57000], "id": 57001, "header": "", "annotation": [" One hot encode", " Just like the previous code cell you ll be implementing a function for preprocessing This time you ll implement the one hot encode function The input x are a list of labels Implement the function to return the list of labels as One Hot encoded Numpy array The possible values for labels are 0 to 9 The one hot encoding function should return the same encoding for each value between each call to one hot encode Make sure to save the map of encodings outside the function ", " ", " Hint Don t reinvent the wheel "]}
{"target_lineno": 109, "file": "/projects/bdata/jupyter/target/nb_445307.py", "context": "\nfilename = 'malimg-vgg16features.npy'\n\nif os.path.exists(filename):\n    print(('Loading VGG16 extracted features from %s ...' % filename))\n    vgg16features = np.load(filename)\nelse:\n    print('Extracting features from VGG16 layers ...')\n    vgg16features = base_model.predict(X)\n    print(('Saving VGG16 extracted features into %s ...' % filename))\n    np.save(filename, vgg16features)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "filename"}, {"type": "Str", "value": "malimg-vgg16features.npy"}, {"type": "If", "children": [5, 12, 26]}, {"type": "Call", "children": [6, 11]}, {"type": "AttributeLoad", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "exists"}, {"type": "NameLoad", "value": "filename"}, {"type": "body", "children": [13, 19]}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [17, 18]}, {"type": "Str", "value": "Loading VGG16 extracted features from %s ..."}, {"type": "NameLoad", "value": "filename"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "vgg16features"}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "load"}, {"type": "NameLoad", "value": "filename"}, {"type": "orelse", "children": [27, 31, 38, 44]}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 30]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "Extracting features from VGG16 layers ..."}, {"type": "Assign", "children": [32, 33]}, {"type": "NameStore", "value": "vgg16features"}, {"type": "Call", "children": [34, 37]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "base_model"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X"}, {"type": "Expr", "children": [39]}, {"type": "Call", "children": [40, 41]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [42, 43]}, {"type": "Str", "value": "Saving VGG16 extracted features into %s ..."}, {"type": "NameLoad", "value": "filename"}, {"type": "Expr", "children": [45]}, {"type": "Call", "children": [46, 49, 50]}, {"type": "AttributeLoad", "children": [47, 48]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "save"}, {"type": "NameLoad", "value": "filename"}, {"type": "NameLoad", "value": "vgg16features"}], "funcs": ["os.path.exists", "print", "numpy.load", "print", "keras.applications.vgg16.VGG16.predict", "print", "numpy.save"], "neighbor_cells": [996915], "id": 996916, "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.groupby", "pandas.DataFrame", "pandas.read_csv.groupby.count"], "file": "/projects/bdata/jupyter/target/nb_892873.py", "target_func": "none_func", "context": "\ng = data_train.groupby(['SibSp', 'Survived'])\n\ndf = pd.DataFrame(g.count()['PassengerId'])\n\ndf\n", "target_lineno": 233, "nodes": [{"type": "Module", "children": [1, 10, 23]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "g"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "data_train"}, {"type": "attr", "value": "groupby"}, {"type": "ListLoad", "children": [8, 9]}, {"type": "Str", "value": "SibSp"}, {"type": "Str", "value": "Survived"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "SubscriptLoad", "children": [17, 21]}, {"type": "Call", "children": [18]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "g"}, {"type": "attr", "value": "count"}, {"type": "Index", "children": [22]}, {"type": "Str", "value": "PassengerId"}, {"type": "Expr", "children": [24]}, {"type": "NameLoad", "value": "df"}], "stage": null, "id": 139688, "neighbor_cells": [139687], "header": "", "annotation": [" http 7xo0y8 com1 z0 glb clouddn com 2 titanic 11 png imageView 2 w 700 q 100 ", " font color red font ", " font color red font br "]}
{"funcs": ["RandomizedSearchCV", "RandomizedSearchCV.fit"], "file": "/projects/bdata/jupyter/target/nb_232343.py", "target_func": "none_func", "context": "\ngrid_logreg = RandomizedSearchCV(n_iter=500, estimator=model_logreg, param_distributions=params_logreg, n_jobs=2, cv=5, refit=True, verbose=1, scoring='log_loss')\n\ngrid_logreg.fit(train_l1_holdout_blend_v1, train_y_l1_holdout.target)\n", "target_lineno": 767, "nodes": [{"type": "Module", "children": [1, 21]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "grid_logreg"}, {"type": "Call", "children": [4, 5, 7, 9, 11, 13, 15, 17, 19]}, {"type": "NameLoad", "value": "RandomizedSearchCV"}, {"type": "keyword", "children": [6], "value": "n_iter"}, {"type": "Num", "value": "500"}, {"type": "keyword", "children": [8], "value": "estimator"}, {"type": "NameLoad", "value": "model_logreg"}, {"type": "keyword", "children": [10], "value": "param_distributions"}, {"type": "NameLoad", "value": "params_logreg"}, {"type": "keyword", "children": [12], "value": "n_jobs"}, {"type": "Num", "value": "2"}, {"type": "keyword", "children": [14], "value": "cv"}, {"type": "Num", "value": "5"}, {"type": "keyword", "children": [16], "value": "refit"}, {"type": "NameLoad", "value": "True"}, {"type": "keyword", "children": [18], "value": "verbose"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [20], "value": "scoring"}, {"type": "Str", "value": "log_loss"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26, 27]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "grid_logreg"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "train_l1_holdout_blend_v1"}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "train_y_l1_holdout"}, {"type": "attr", "value": "target"}], "stage": null, "id": 874880, "neighbor_cells": [874879], "header": "", "annotation": []}
{"target_lineno": 139, "file": "/projects/bdata/jupyter/target/nb_146642.py", "context": "\nlda = models.LdaModel(corpus, id2word=dictionary, num_topics=100)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "lda"}, {"type": "Call", "children": [4, 7, 8, 10]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "models"}, {"type": "attr", "value": "LdaModel"}, {"type": "NameLoad", "value": "corpus"}, {"type": "keyword", "value": "id2word", "children": [9]}, {"type": "NameLoad", "value": "dictionary"}, {"type": "keyword", "value": "num_topics", "children": [11]}, {"type": "Num", "value": "100"}], "funcs": ["gensim.models.LdaModel"], "neighbor_cells": [337643], "id": 337644, "header": "", "annotation": []}
{"target_lineno": 310, "file": "/projects/bdata/jupyter/target/nb_593838.py", "context": "\nmodel.predict([np.array([3]), np.array([6])])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "predict"}, {"type": "ListLoad", "children": [7, 13]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [12]}, {"type": "Num", "value": "3"}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [18]}, {"type": "Num", "value": "6"}], "funcs": ["Model.predict", "np.array", "np.array"], "neighbor_cells": [1080195], "id": 1080196, "header": "", "annotation": [" We can use the model to generate predictions by passing a pair of ints a user id and a movie id For instance this predicts that user 3 would really enjoy movie 6 "]}
{"target_lineno": 445, "file": "/projects/bdata/jupyter/target/nb_549582.py", "context": "\nimport json\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "json"}], "funcs": [], "neighbor_cells": [314256], "id": 314257, "header": "", "annotation": []}
{"funcs": ["numpy.loadtxt", "len", "pandas.DataFrame.head", "pandas.DataFrame"], "file": "/projects/bdata/jupyter/target/nb_360496.py", "target_func": "none_func", "context": "\ndata_00 = np.loadtxt('datasets/dataset_1_year_2000.txt')\n\nprint 'n =', len(data_00)\n\nx_00 = data_00[:, 0:2]\n\ny_00 = data_00[:, 2]\n\npd.DataFrame(data_00).head()\n", "target_lineno": 385, "nodes": [{"type": "Module", "children": [1, 8, 13, 22, 30]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data_00"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "loadtxt"}, {"type": "Str", "value": "datasets/dataset_1_year_2000.txt"}, {"type": "Print", "children": [9, 10]}, {"type": "Str", "value": "n ="}, {"type": "Call", "children": [11, 12]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "data_00"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "x_00"}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "data_00"}, {"type": "ExtSlice", "children": [18, 19]}, {"type": "Slice"}, {"type": "Slice", "children": [20, 21]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "2"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "y_00"}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "data_00"}, {"type": "ExtSlice", "children": [27, 28]}, {"type": "Slice"}, {"type": "Index", "children": [29]}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32]}, {"type": "AttributeLoad", "children": [33, 38]}, {"type": "Call", "children": [34, 37]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "NameLoad", "value": "data_00"}, {"type": "attr", "value": "head"}], "stage": null, "id": 576784, "neighbor_cells": [576783], "header": "", "annotation": [" As mentioned before when looking at the Beta prior with a b 2 we can see that movies with a small number of ratings are penalized And so we no longer have movies in the top 25 that only have 2 ratings As a result this top 25 list is much better than the previous one ", " ", " However one draw back of this method is that we are assinging every individual the same probability of liking each movie If we incorporated individual s preferences into the model by we could potentially get more accurate estimates One way we could do that is by grouping users into different categories based on their prefernces and then have a different set of theta text movie estimates for each group ", " ", " Problem 2 Predicting Urban Demographic Changes", " ", " Part 2 a Temporal patterns in urban demographics", " ", " In this problem you ll work with some neighborhood demographics of a region in Boston from the years 2000 to 2010 ", " ", " The data you need are in the files dataset 1 year 2000 txt dataset 1 year 2010 txt The first two columns of each dataset contain the adjusted latitude and longitude of some randomly sampled houses The last column contains economic status of a household ", " ", " 0 low income ", " ", " 1 middle class ", " ", " 2 high income ", " ", " Due to the migration of people in and out of the city the distribution of each economic group over this region changes over the years The city of Boston estimates that in this region there is approximately a 25 yearly increase in high income households and a 25 decrease in the remaining population with the decrease being roughly the same amongst both the middle class and lower income households ", " ", " Your task is to build a model for the city of Boston that is capable of predicting the economic status of a household based on its geographical location Furthermore your method of prediction must be accurate over time through 2010 and beyond ", " ", " Hint look at data only from 2000 and consider using both Linear Discriminant Analysis LDA and Logistic Regression Is there a reason one method would more suited than the other for this task ", " ", " Hint how well do your two models do over the years Is it possible to make use of the estimated yearly changes in proportions of the three demographic groups to improve the predictive accuracy of each models over the years ", " ", " To help you visually interpret and assess the quality of your classifiers we are providing you a function to visualize a set of data along with the decision boundaries of a classifier "]}
{"target_lineno": 261, "file": "/projects/bdata/jupyter/target/nb_460133.py", "context": "\ngrid_search.best_params_\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "grid_search"}, {"type": "attr", "value": "best_params_"}], "funcs": [], "neighbor_cells": [520480], "id": 520481, "header": "", "annotation": []}
{"target_lineno": 102, "file": "/projects/bdata/jupyter/target/nb_323990.py", "context": "\nmodel.doesnt_match('breakfast cereal dinner lunch'.split())\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "doesnt_match"}, {"type": "Call", "children": [7]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "Str", "value": "breakfast cereal dinner lunch"}, {"type": "attr", "value": "split"}], "funcs": ["gensim.models.KeyedVectors.load_word2vec_format.doesnt_match", "split"], "neighbor_cells": [28596], "id": 28597, "header": "", "annotation": [" It can also detect words that don t belong in a sequence "]}
{"target_lineno": 314, "file": "/projects/bdata/jupyter/target/nb_817723.py", "context": "\nchampids['81']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "champids"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "81"}], "funcs": [], "neighbor_cells": [938802], "id": 938803, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_159018.py", "target_func": "none_func", "context": "\n(93 / 243.0)\n", "target_lineno": 86, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpDiv", "children": [3, 4]}, {"type": "Num", "value": "93"}, {"type": "Num", "value": "243.0"}], "stage": null, "id": 2403, "neighbor_cells": [2402], "header": " 3 2 Now calculate the odds of admission if you did not attend a 1 ranked college", "annotation": [" 3 2 Now calculate the odds of admission if you did not attend a 1 ranked college"]}
{"target_lineno": 527, "file": "/projects/bdata/jupyter/target/nb_299422.py", "context": "\nget_ipython().run_line_magic('pinfo2', 'vgg.finetune')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "pinfo2"}, {"type": "Str", "value": "vgg.finetune"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [118839], "id": 118840, "header": "", "annotation": []}
{"target_lineno": 627, "file": "/projects/bdata/jupyter/target/nb_821576.py", "context": "\nsorted(dropcols)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "sorted"}, {"type": "NameLoad", "value": "dropcols"}], "funcs": ["sorted"], "neighbor_cells": [793434], "id": 793435, "header": "", "annotation": []}
{"target_lineno": 208, "file": "/projects/bdata/jupyter/target/nb_662071.py", "context": "\ndoc = ['bank', 'water', 'bank', 'finance', 'money', 'sell', 'river', 'fast', 'tree']\n\ncolor_words(model, doc)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "doc"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9, 10, 11, 12]}, {"type": "Str", "value": "bank"}, {"type": "Str", "value": "water"}, {"type": "Str", "value": "bank"}, {"type": "Str", "value": "finance"}, {"type": "Str", "value": "money"}, {"type": "Str", "value": "sell"}, {"type": "Str", "value": "river"}, {"type": "Str", "value": "fast"}, {"type": "Str", "value": "tree"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16, 17]}, {"type": "NameLoad", "value": "color_words"}, {"type": "NameLoad", "value": "model"}, {"type": "NameLoad", "value": "doc"}], "funcs": ["color_words"], "neighbor_cells": [451081], "id": 451082, "header": "", "annotation": [" What is fun to note here is that while bank was colored red in our first example it is now blue because of the financial context something which the numbers proved to us before "]}
{"target_lineno": 489, "file": "/projects/bdata/jupyter/target/nb_627443.py", "context": "\nplt.pcolormesh(po)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "pcolormesh"}, {"type": "NameLoad", "value": "po"}], "funcs": ["matplotlib.pyplot.pcolormesh"], "neighbor_cells": [643971], "id": 643972, "header": "", "annotation": []}
{"funcs": ["pandas.read_csv", "pandas.read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_492490.py", "target_func": "none_func", "context": "\nheader = ['user_id', 'item_id', 'rating', 'timestamp']\n\ndf = pd.read_csv('ml-100k/u.data', sep='\\t', names=header)\n\ndf.head()\n", "target_lineno": 409, "nodes": [{"type": "Module", "children": [1, 8, 19]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "header"}, {"type": "ListLoad", "children": [4, 5, 6, 7]}, {"type": "Str", "value": "user_id"}, {"type": "Str", "value": "item_id"}, {"type": "Str", "value": "rating"}, {"type": "Str", "value": "timestamp"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [11, 14, 15, 17]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "ml-100k/u.data"}, {"type": "keyword", "children": [16], "value": "sep"}, {"type": "Str", "value": "\t"}, {"type": "keyword", "children": [18], "value": "names"}, {"type": "NameLoad", "value": "header"}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "head"}], "stage": null, "id": 53438, "neighbor_cells": [53437], "header": "", "annotation": []}
{"target_lineno": 306, "file": "/projects/bdata/jupyter/target/nb_553683.py", "context": "\nf2_scorer = make_scorer(fbeta_score, beta=2, pos_label=True, average='binary')\n\nscores = [f2_scorer]\n\ntuned_parameters = {\n    'class_weight': ['balanced', {\n        True: 1000,\n    }, {\n        True: 2000,\n    }, {\n        True: 3000,\n    }],\n    'criterion': ['gini', 'entropy'],\n    'max_depth': [None, 5, 10],\n    'min_samples_leaf': [1, 5, 10],\n}\n\ntrained_estimator_df = train_model_by_grid_search_cv(X_train, X_test, y_train, y_test, estimator_dt, tuned_parameters, ts_iterable, scores)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12, 16, 45]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "f2_scorer"}, {"type": "Call", "children": [4, 5, 6, 8, 10]}, {"type": "NameLoad", "value": "make_scorer"}, {"type": "NameLoad", "value": "fbeta_score"}, {"type": "keyword", "value": "beta", "children": [7]}, {"type": "Num", "value": "2"}, {"type": "keyword", "value": "pos_label", "children": [9]}, {"type": "NameConstant"}, {"type": "keyword", "value": "average", "children": [11]}, {"type": "Str", "value": "binary"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "scores"}, {"type": "ListLoad", "children": [15]}, {"type": "NameLoad", "value": "f2_scorer"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "tuned_parameters"}, {"type": "Dict", "children": [19, 20, 21, 22, 23, 34, 37, 41]}, {"type": "Str", "value": "class_weight"}, {"type": "Str", "value": "criterion"}, {"type": "Str", "value": "max_depth"}, {"type": "Str", "value": "min_samples_leaf"}, {"type": "ListLoad", "children": [24, 25, 28, 31]}, {"type": "Str", "value": "balanced"}, {"type": "Dict", "children": [26, 27]}, {"type": "NameConstant"}, {"type": "Num", "value": "1000"}, {"type": "Dict", "children": [29, 30]}, {"type": "NameConstant"}, {"type": "Num", "value": "2000"}, {"type": "Dict", "children": [32, 33]}, {"type": "NameConstant"}, {"type": "Num", "value": "3000"}, {"type": "ListLoad", "children": [35, 36]}, {"type": "Str", "value": "gini"}, {"type": "Str", "value": "entropy"}, {"type": "ListLoad", "children": [38, 39, 40]}, {"type": "NameConstant"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "10"}, {"type": "ListLoad", "children": [42, 43, 44]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "10"}, {"type": "Assign", "children": [46, 47]}, {"type": "NameStore", "value": "trained_estimator_df"}, {"type": "Call", "children": [48, 49, 50, 51, 52, 53, 54, 55, 56]}, {"type": "NameLoad", "value": "train_model_by_grid_search_cv"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_train"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "estimator_dt"}, {"type": "NameLoad", "value": "tuned_parameters"}, {"type": "NameLoad", "value": "ts_iterable"}, {"type": "NameLoad", "value": "scores"}], "funcs": ["sklearn.metrics.make_scorer", "train_model_by_grid_search_cv"], "neighbor_cells": [807834], "id": 807835, "header": " Decision Tree Objective f2", "annotation": [" Decision Tree Objective f2"]}
{"funcs": ["test_generator.next", "getModelArch.predict_on_batch"], "file": "/projects/bdata/jupyter/target/nb_292471.py", "target_func": "none_func", "context": "\n(x, y) = test_generator.next()\n\nres = model.predict_on_batch(x)\n", "target_lineno": 195, "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "x"}, {"type": "NameStore", "value": "y"}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "test_generator"}, {"type": "attr", "value": "next"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "res"}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "predict_on_batch"}, {"type": "NameLoad", "value": "x"}], "stage": null, "id": 353386, "neighbor_cells": [353385], "header": "", "annotation": []}
{"target_lineno": 64, "file": "/projects/bdata/jupyter/target/nb_354193.py", "context": "\ntable3 = table2.value_counts()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "table3"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "table2"}, {"type": "attr", "value": "value_counts"}], "funcs": ["value_counts"], "neighbor_cells": [440331], "id": 440332, "header": "", "annotation": []}
{"target_lineno": 401, "file": "/projects/bdata/jupyter/target/nb_695868.py", "context": "\np = poly([(- 1j), 1j])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "p"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "poly"}, {"type": "ListLoad", "children": [6, 8]}, {"type": "UnaryOpUSub", "children": [7]}, {"type": "Num", "value": "1j"}, {"type": "Num", "value": "1j"}], "funcs": ["poly"], "neighbor_cells": [91186], "id": 91187, "header": "", "annotation": []}
{"funcs": ["numpy.sqrt", "sklearn.metrics.mean_squared_error"], "file": "/projects/bdata/jupyter/target/nb_219219.py", "target_func": "none_func", "context": "\nfrom sklearn.metrics import mean_squared_error as mse\n\n\ndef error_metric(y_true, y_pred):\n    error = np.sqrt(mse(y_true, y_pred))\n    return error\n", "target_lineno": 431, "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.metrics"}, {"type": "alias", "children": [3], "value": "mean_squared_error"}, {"type": "identifier", "value": "mse"}, {"type": "FunctionDef", "children": [5, 10, 23], "value": "error_metric"}, {"type": "arguments", "children": [6, 9]}, {"type": "args", "children": [7, 8]}, {"type": "NameParam", "value": "y_true"}, {"type": "NameParam", "value": "y_pred"}, {"type": "defaults"}, {"type": "body", "children": [11, 21]}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "error"}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sqrt"}, {"type": "Call", "children": [18, 19, 20]}, {"type": "NameLoad", "value": "mse"}, {"type": "NameLoad", "value": "y_true"}, {"type": "NameLoad", "value": "y_pred"}, {"type": "Return", "children": [22]}, {"type": "NameLoad", "value": "error"}, {"type": "decorator_list"}], "stage": null, "id": 494602, "neighbor_cells": [494601], "header": "", "annotation": [" RMSE is the metric we will be using to measure error "]}
{"target_lineno": 23, "file": "/projects/bdata/jupyter/target/nb_876430.py", "context": "\nimport sys\n\nsys.path.append(os.path.join(os.path.abspath(os.path.dirname('.')), '..', 'common'))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "sys"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 10]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "sys"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "append"}, {"type": "Call", "children": [11, 16, 29, 30]}, {"type": "AttributeLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "join"}, {"type": "Call", "children": [17, 22]}, {"type": "AttributeLoad", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "abspath"}, {"type": "Call", "children": [23, 28]}, {"type": "AttributeLoad", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "dirname"}, {"type": "Str", "value": "."}, {"type": "Str", "value": ".."}, {"type": "Str", "value": "common"}], "funcs": ["sys.path.append", "os.path.join", "os.path.abspath", "os.path.dirname"], "neighbor_cells": [173335], "id": 173336, "header": "", "annotation": []}
{"funcs": ["pandas.HDFStore", "pandas.HDFStore.select", "pandas.HDFStore.select.head"], "file": "/projects/bdata/jupyter/target/nb_929411.py", "target_func": "none_func", "context": "\nstreet2 = pd.HDFStore('street.h5')\n\nstreet = street2.select('/table')\n\nstreet.head()\n", "target_lineno": 74, "nodes": [{"type": "Module", "children": [1, 8, 15]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "street2"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "HDFStore"}, {"type": "Str", "value": "street.h5"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "street"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "street2"}, {"type": "attr", "value": "select"}, {"type": "Str", "value": "/table"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "street"}, {"type": "attr", "value": "head"}], "stage": null, "id": 540708, "neighbor_cells": [540707], "header": "", "annotation": []}
{"target_lineno": 593, "file": "/projects/bdata/jupyter/target/nb_849556.py", "context": "\n(tk2, tl2) = hcluster(sample_DW, 2)\n\ntl2\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "tk2"}, {"type": "NameStore", "value": "tl2"}, {"type": "Call", "children": [6, 7, 8]}, {"type": "NameLoad", "value": "hcluster"}, {"type": "NameLoad", "value": "sample_DW"}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [10]}, {"type": "NameLoad", "value": "tl2"}], "funcs": ["hcluster"], "neighbor_cells": [1022524], "id": 1022525, "header": "", "annotation": []}
{"funcs": ["numpy.logspace", "seaborn.distplot"], "file": "/projects/bdata/jupyter/target/nb_380392.py", "target_func": "none_func", "context": "\nalphas = np.logspace(start=(-10), stop=10, num=21)\n\nprint alphas\n\nprint sns.distplot(alphas, hist=True, kde=False, bins=100)\n", "target_lineno": 202, "nodes": [{"type": "Module", "children": [1, 13, 15]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "alphas"}, {"type": "Call", "children": [4, 7, 9, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "logspace"}, {"type": "keyword", "children": [8], "value": "start"}, {"type": "Num", "value": "-10"}, {"type": "keyword", "children": [10], "value": "stop"}, {"type": "Num", "value": "10"}, {"type": "keyword", "children": [12], "value": "num"}, {"type": "Num", "value": "21"}, {"type": "Print", "children": [14]}, {"type": "NameLoad", "value": "alphas"}, {"type": "Print", "children": [16]}, {"type": "Call", "children": [17, 20, 21, 23, 25]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "distplot"}, {"type": "NameLoad", "value": "alphas"}, {"type": "keyword", "children": [22], "value": "hist"}, {"type": "NameLoad", "value": "True"}, {"type": "keyword", "children": [24], "value": "kde"}, {"type": "NameLoad", "value": "False"}, {"type": "keyword", "children": [26], "value": "bins"}, {"type": "Num", "value": "100"}], "stage": null, "id": 994282, "neighbor_cells": [994281], "header": " Slide Understanding regularisation effects", "annotation": [" Slide Understanding regularisation effects"]}
{"funcs": ["pandas.read_csv", "pandas.read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_442339.py", "target_func": "none_func", "context": "\ndata = pd.read_csv('./assets/datasets/spam_base.csv')\n\ndata.head()\n", "target_lineno": 212, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "./assets/datasets/spam_base.csv"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "head"}], "stage": null, "id": 892327, "neighbor_cells": [892326], "header": "", "annotation": []}
{"target_lineno": 472, "file": "/projects/bdata/jupyter/target/nb_906118.py", "context": "\nclfdt = DecisionTreeClassifier()\n\n(clfdt, Xtrain, ytrain, Xtest, ytest) = do_classify(clfdt, {\n    'max_depth': list(range(1, 10, 1)),\n}, dfchurn, (colswewant_cont + colswewant_cat), 'Churn?', 'True.', reuse_split=reuse_split)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 5]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "clfdt"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "DecisionTreeClassifier"}, {"type": "Assign", "children": [6, 12]}, {"type": "TupleStore", "children": [7, 8, 9, 10, 11]}, {"type": "NameStore", "value": "clfdt"}, {"type": "NameStore", "value": "Xtrain"}, {"type": "NameStore", "value": "ytrain"}, {"type": "NameStore", "value": "Xtest"}, {"type": "NameStore", "value": "ytest"}, {"type": "Call", "children": [13, 14, 15, 24, 25, 28, 29, 30]}, {"type": "NameLoad", "value": "do_classify"}, {"type": "NameLoad", "value": "clfdt"}, {"type": "Dict", "children": [16, 17]}, {"type": "Str", "value": "max_depth"}, {"type": "Call", "children": [18, 19]}, {"type": "NameLoad", "value": "list"}, {"type": "Call", "children": [20, 21, 22, 23]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "1"}, {"type": "NameLoad", "value": "dfchurn"}, {"type": "BinOpAdd", "children": [26, 27]}, {"type": "NameLoad", "value": "colswewant_cont"}, {"type": "NameLoad", "value": "colswewant_cat"}, {"type": "Str", "value": "Churn?"}, {"type": "Str", "value": "True."}, {"type": "keyword", "value": "reuse_split", "children": [31]}, {"type": "NameLoad", "value": "reuse_split"}], "funcs": ["sklearn.tree.DecisionTreeClassifier", "do_classify", "list", "range"], "neighbor_cells": [1122798], "id": 1122799, "header": "", "annotation": [" We train a simple decision tree classifier "]}
{"target_lineno": 42, "file": "/projects/bdata/jupyter/target/nb_34257.py", "context": "\ndf_train['SalePrice'].describe()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df_train"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "SalePrice"}, {"type": "attr", "value": "describe"}], "funcs": ["describe"], "neighbor_cells": [1007302], "id": 1007303, "header": " Looking at SalePrice ", "annotation": [" Looking at SalePrice "]}
{"target_lineno": 188, "file": "/projects/bdata/jupyter/target/nb_53435.py", "context": "\nfig = pd.scatter_matrix(allfemales['all'][['Total with Income', '$2,500 to $4,999', 'Median income', 'Gini ratio']], linewidth=3, s=500, figsize=(15, 15), diagonal='kde')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "fig"}, {"type": "Call", "children": [4, 7, 18, 20, 22, 26]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "scatter_matrix"}, {"type": "SubscriptLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "allfemales"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "all"}, {"type": "Index", "children": [13]}, {"type": "ListLoad", "children": [14, 15, 16, 17]}, {"type": "Str", "value": "Total with Income"}, {"type": "Str", "value": "$2,500 to $4,999"}, {"type": "Str", "value": "Median income"}, {"type": "Str", "value": "Gini ratio"}, {"type": "keyword", "value": "linewidth", "children": [19]}, {"type": "Num", "value": "3"}, {"type": "keyword", "value": "s", "children": [21]}, {"type": "Num", "value": "500"}, {"type": "keyword", "value": "figsize", "children": [23]}, {"type": "TupleLoad", "children": [24, 25]}, {"type": "Num", "value": "15"}, {"type": "Num", "value": "15"}, {"type": "keyword", "value": "diagonal", "children": [27]}, {"type": "Str", "value": "kde"}], "funcs": ["pandas.scatter_matrix"], "neighbor_cells": [741346], "id": 741347, "header": " Figure 2 Scatter matrix Each numerical dataframe column is plotted against each other After the cleaning all four columns of data can be plotted ", "annotation": [" Figure 2 Scatter matrix Each numerical dataframe column is plotted against each other After the cleaning all four columns of data can be plotted "]}
{"funcs": ["isin"], "file": "/projects/bdata/jupyter/target/nb_370921.py", "target_func": "none_func", "context": "\nvice = pdf[pdf['Target'].isin(['BURGLARY', 'DRUG/NARCOTIC'])]\n", "target_lineno": 410, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "vice"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "pdf"}, {"type": "Index", "children": [6]}, {"type": "Call", "children": [7, 13]}, {"type": "AttributeLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "pdf"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "Target"}, {"type": "attr", "value": "isin"}, {"type": "ListLoad", "children": [14, 15]}, {"type": "Str", "value": "BURGLARY"}, {"type": "Str", "value": "DRUG/NARCOTIC"}], "stage": null, "id": 1014212, "neighbor_cells": [1014211], "header": " Select the appropriate rows", "annotation": [" Exercise", " ", " Using the data set pdf ", " Fit two models to predict between Burglary and Drug Narcotic crimes", " One model should use an L1 penalty and the other should use an L2 penalty", " Make sure to use train test split", " Print out a confusion matrix and a classification report for both models", " Finally build a third model that uses LogisticRegressionCV", " Print our a confusion matrix classification report and the best value of C", " Select the appropriate rows"]}
{"funcs": ["pandas.read_csv.groupby.review_id.count", "pandas.read_csv.groupby"], "file": "/projects/bdata/jupyter/target/nb_83479.py", "target_func": "none_func", "context": "\nyelp.groupby('business_id').review_id.count()\n", "target_lineno": 226, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 11]}, {"type": "AttributeLoad", "children": [5, 10]}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "yelp"}, {"type": "attr", "value": "groupby"}, {"type": "Str", "value": "business_id"}, {"type": "attr", "value": "review_id"}, {"type": "attr", "value": "count"}], "stage": null, "id": 138058, "neighbor_cells": [138057], "header": "", "annotation": [" Bonus Think of some new features you could create from the existing data that might be predictive of the response "]}
{"funcs": ["matplotlib.pyplot.plot"], "file": "/projects/bdata/jupyter/target/nb_976448.py", "target_func": "none_func", "context": "\nplt.plot(simspectra_data[2, :])\n", "target_lineno": 635, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "simspectra_data"}, {"type": "ExtSlice", "children": [9, 11]}, {"type": "Index", "children": [10]}, {"type": "Num", "value": "2"}, {"type": "Slice"}], "stage": null, "id": 487451, "neighbor_cells": [487450], "header": "", "annotation": []}
{"funcs": ["join", "join.head"], "file": "/projects/bdata/jupyter/target/nb_788628.py", "target_func": "none_func", "context": "\ncols_to_keep = ['admit', 'gre', 'gpa']\n\nhandCalc = df[cols_to_keep].join(dummy_ranks.ix[:, 'prestige_1':])\n\nprint handCalc.head()\n", "target_lineno": 62, "nodes": [{"type": "Module", "children": [1, 7, 24]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "cols_to_keep"}, {"type": "ListLoad", "children": [4, 5, 6]}, {"type": "Str", "value": "admit"}, {"type": "Str", "value": "gre"}, {"type": "Str", "value": "gpa"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "handCalc"}, {"type": "Call", "children": [10, 16]}, {"type": "AttributeLoad", "children": [11, 15]}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [14]}, {"type": "NameLoad", "value": "cols_to_keep"}, {"type": "attr", "value": "join"}, {"type": "SubscriptLoad", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "dummy_ranks"}, {"type": "attr", "value": "ix"}, {"type": "ExtSlice", "children": [21, 22]}, {"type": "Slice"}, {"type": "Slice", "children": [23]}, {"type": "Str", "value": "prestige_1"}, {"type": "Print", "children": [25]}, {"type": "Call", "children": [26]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "handCalc"}, {"type": "attr", "value": "head"}], "stage": null, "id": 382905, "neighbor_cells": [382904], "header": "", "annotation": [" 2 2 When modeling our class variables how many do we need ", " ", " ", " Answer 3", " Part 3 Hand calculating odds ratios", " ", " Develop your intuition about expected outcomes by hand calculating odds ratios "]}
{"funcs": ["get_ipython.run_line_magic", "get_ipython", "matplotlib.font_manager.FontProperties"], "file": "/projects/bdata/jupyter/target/nb_389904.py", "target_func": "none_func", "context": "\nimport networkx as nx\n\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport matplotlib\n\nfrom collections import defaultdict\n\nfrom collections import Counter\n\nimport random\n\nimport statsmodels.api as sm\n\nfrom scipy import optimize\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nimport matplotlib.font_manager as font_manager\n\npath = '/Users/zhicongchen/msyh.ttf'\n\nfontprop = font_manager.FontProperties(fname=path)\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 13, 15, 17, 19, 21, 24, 26, 34, 37, 40]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "networkx"}, {"type": "identifier", "value": "nx"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [8]}, {"type": "alias", "children": [9], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [11]}, {"type": "alias", "children": [12], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [14]}, {"type": "alias", "value": "matplotlib"}, {"type": "ImportFrom", "children": [16], "value": "collections"}, {"type": "alias", "value": "defaultdict"}, {"type": "ImportFrom", "children": [18], "value": "collections"}, {"type": "alias", "value": "Counter"}, {"type": "Import", "children": [20]}, {"type": "alias", "value": "random"}, {"type": "Import", "children": [22]}, {"type": "alias", "children": [23], "value": "statsmodels.api"}, {"type": "identifier", "value": "sm"}, {"type": "ImportFrom", "children": [25], "value": "scipy"}, {"type": "alias", "value": "optimize"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 32, 33]}, {"type": "AttributeLoad", "children": [29, 31]}, {"type": "Call", "children": [30]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Import", "children": [35]}, {"type": "alias", "children": [36], "value": "matplotlib.font_manager"}, {"type": "identifier", "value": "font_manager"}, {"type": "Assign", "children": [38, 39]}, {"type": "NameStore", "value": "path"}, {"type": "Str", "value": "/Users/zhicongchen/msyh.ttf"}, {"type": "Assign", "children": [41, 42]}, {"type": "NameStore", "value": "fontprop"}, {"type": "Call", "children": [43, 46]}, {"type": "AttributeLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "font_manager"}, {"type": "attr", "value": "FontProperties"}, {"type": "keyword", "children": [47], "value": "fname"}, {"type": "NameLoad", "value": "path"}], "stage": null, "id": 1033443, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"funcs": ["nibabel.load"], "file": "/projects/bdata/jupyter/target/nb_259198.py", "target_func": "none_func", "context": "\nimg2 = nb.load('../../../../../Desktop/result/dogsig1_gausig2.3/v100_ch0_tensordtk_dogsig1_gausig2.3_tensor.nii')\n\nimg2.shape\n", "target_lineno": 287, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "img2"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "nb"}, {"type": "attr", "value": "load"}, {"type": "Str", "value": "../../../../../Desktop/result/dogsig1_gausig2.3/v100_ch0_tensordtk_dogsig1_gausig2.3_tensor.nii"}, {"type": "Expr", "children": [9]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "img2"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 249632, "neighbor_cells": [249631], "header": "", "annotation": []}
{"target_lineno": 274, "file": "/projects/bdata/jupyter/target/nb_726335.py", "context": "\nfrom keras.layers import Input, Dense\n\nfrom keras.models import Model\n\n\ndef build_xor_model():\n    'Return a Keras Model.\\n    '\n    model = None\n    return model\n\ntests.test_xor_model(build_xor_model)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 6, 19]}, {"type": "ImportFrom", "value": "keras.layers", "children": [2, 3]}, {"type": "alias", "value": "Input"}, {"type": "alias", "value": "Dense"}, {"type": "ImportFrom", "value": "keras.models", "children": [5]}, {"type": "alias", "value": "Model"}, {"type": "FunctionDef", "value": "build_xor_model", "children": [7, 10, 18]}, {"type": "arguments", "children": [8, 9]}, {"type": "args"}, {"type": "defaults"}, {"type": "body", "children": [11, 13, 16]}, {"type": "Expr", "children": [12]}, {"type": "Str", "value": "Return a Keras Model.\n    "}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "model"}, {"type": "NameConstant"}, {"type": "Return", "children": [17]}, {"type": "NameLoad", "value": "model"}, {"type": "decorator_list"}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "tests"}, {"type": "attr", "value": "test_xor_model"}, {"type": "NameLoad", "value": "build_xor_model"}], "funcs": ["problem_unittests.test_xor_model"], "neighbor_cells": [-1], "id": 1017373, "header": "", "annotation": [" As we can see a simple line definitely cannot separate the blue and red points Thankfully a simple feedforward neural network with one hidden layer containing two neurons can solve the problem The artificial neural network we will implement in Keras can be seen below The two bias neurons are not necessary but have been added for completeness ", " ", " img src resources xor nn png alt XOR network width 250 ", " ", " The network above has a single hidden layer with two neurons and all activation functions are assumed to be logistic functions This network consist of two steps i transform the input to a different feature space this being the hidden layer and ii perform classification via this new feature space Our hope is that the feature space made by the hidden layer enables us to linearly separate the points ", " ", " div class alert alert success ", " Task Build the model in the figure above using the Keras functional guide https keras io getting started functional api guide ", " ul ", " li a href https keras io models model Input a li ", " li a href https keras io models model Dense a Bias nodes are by default on but can be removed by setting the use bias to False li ", " li a href https keras io models model Model a li ", " ul ", " All layers have to use the logistic function as their activation function This is achieved by giving Dense the argument activation sigmoid ", " div "]}
{"target_lineno": 96, "file": "/projects/bdata/jupyter/target/nb_836925.py", "context": "\nsns.boxplot(data=data, x='grow', y='t-1')\n\nplt.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 8, 10]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "boxplot"}, {"type": "keyword", "value": "data", "children": [7]}, {"type": "NameLoad", "value": "data"}, {"type": "keyword", "value": "x", "children": [9]}, {"type": "Str", "value": "grow"}, {"type": "keyword", "value": "y", "children": [11]}, {"type": "Str", "value": "t-1"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "funcs": ["seaborn.boxplot", "matplotlib.pyplot.show"], "neighbor_cells": [22317], "id": 22318, "header": " Growth of the previous period", "annotation": [" Growth of the previous period"]}
{"target_lineno": 171, "file": "/projects/bdata/jupyter/target/nb_326104.py", "context": "\nimport numpy as np\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\nfrom scipy.spatial.distance import cosine\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 6, 8]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "value": "sklearn.feature_extraction.text", "children": [5]}, {"type": "alias", "value": "CountVectorizer"}, {"type": "ImportFrom", "value": "sklearn.feature_extraction.text", "children": [7]}, {"type": "alias", "value": "TfidfTransformer"}, {"type": "ImportFrom", "value": "scipy.spatial.distance", "children": [9]}, {"type": "alias", "value": "cosine"}], "funcs": [], "neighbor_cells": [1306945], "id": 1306946, "header": "", "annotation": [" Homework 1 Apply PCA on the whole set of features and analyze its principal components ", " ", " ", " ", " ", " Exploratory Text Analysis", " ", " First let s import numpy and a couple other modules we ll need "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_984733.py", "target_func": "none_func", "context": "\nprint u[:, :450].shape\n\nu[:, :450]\n", "target_lineno": 370, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Print", "children": [2]}, {"type": "AttributeLoad", "children": [3, 9]}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "u"}, {"type": "ExtSlice", "children": [6, 7]}, {"type": "Slice"}, {"type": "Slice", "children": [8]}, {"type": "Num", "value": "450"}, {"type": "attr", "value": "shape"}, {"type": "Expr", "children": [11]}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "u"}, {"type": "ExtSlice", "children": [14, 15]}, {"type": "Slice"}, {"type": "Slice", "children": [16]}, {"type": "Num", "value": "450"}], "stage": null, "id": 580955, "neighbor_cells": [580954], "header": " Let s keep 450 books for the 90 of the total energy", "annotation": [" SVD", " K 450", " Let s keep 450 books for the 90 of the total energy"]}
{"funcs": ["get_ipython.run_line_magic", "get_ipython", "matplotlib.pyplot.scatter", "matplotlib.pyplot.show"], "file": "/projects/bdata/jupyter/target/nb_432121.py", "target_func": "none_func", "context": "\nget_ipython().run_line_magic('matplotlib', 'notebook')\n\nplt.scatter(points[:, 0], points[:, 1])\n\nplt.show()\n", "target_lineno": 95, "nodes": [{"type": "Module", "children": [1, 9, 26]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "notebook"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14, 20]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "points"}, {"type": "ExtSlice", "children": [17, 18]}, {"type": "Slice"}, {"type": "Index", "children": [19]}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "points"}, {"type": "ExtSlice", "children": [23, 24]}, {"type": "Slice"}, {"type": "Index", "children": [25]}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "stage": null, "id": 1087229, "neighbor_cells": [1087228], "header": "", "annotation": [" ", " "]}
{"funcs": ["list", "format", "format", "head"], "file": "/projects/bdata/jupyter/target/nb_485628.py", "target_func": "none_func", "context": "\nfeature_cols = list(student_data.columns[:(-1)])\n\ntarget_col = student_data.columns[(-1)]\n\nprint 'Feature columns:\\n{}'.format(feature_cols)\n\nprint '\\nTarget column: {}'.format(target_col)\n\nX_all = student_data[feature_cols]\n\ny_all = student_data[target_col]\n\nprint '\\nFeature values:'\n\nprint X_all.head()\n", "target_lineno": 78, "nodes": [{"type": "Module", "children": [1, 11, 19, 25, 31, 37, 43, 45]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "feature_cols"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "list"}, {"type": "SubscriptLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "student_data"}, {"type": "attr", "value": "columns"}, {"type": "Slice", "children": [10]}, {"type": "Num", "value": "-1"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "target_col"}, {"type": "SubscriptLoad", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "student_data"}, {"type": "attr", "value": "columns"}, {"type": "Index", "children": [18]}, {"type": "Num", "value": "-1"}, {"type": "Print", "children": [20]}, {"type": "Call", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "Str", "value": "Feature columns:\n{}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "feature_cols"}, {"type": "Print", "children": [26]}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "Str", "value": "\nTarget column: {}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "target_col"}, {"type": "Assign", "children": [32, 33]}, {"type": "NameStore", "value": "X_all"}, {"type": "SubscriptLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "student_data"}, {"type": "Index", "children": [36]}, {"type": "NameLoad", "value": "feature_cols"}, {"type": "Assign", "children": [38, 39]}, {"type": "NameStore", "value": "y_all"}, {"type": "SubscriptLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "student_data"}, {"type": "Index", "children": [42]}, {"type": "NameLoad", "value": "target_col"}, {"type": "Print", "children": [44]}, {"type": "Str", "value": "\nFeature values:"}, {"type": "Print", "children": [46]}, {"type": "Call", "children": [47]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "X_all"}, {"type": "attr", "value": "head"}], "stage": null, "id": 869457, "neighbor_cells": [869456], "header": "", "annotation": [" Preparing the Data", " In this section we will prepare the data for modeling training and testing ", " ", " Identify feature and target columns", " It is often the case that the data you obtain contains non numeric features This can be a problem as most machine learning algorithms expect numeric data to perform computations with ", " ", " Run the code cell below to separate the student data into feature and target columns to see if any features are non numeric "]}
{"funcs": ["figures.plot_linear_regression"], "file": "/projects/bdata/jupyter/target/nb_564325.py", "target_func": "none_func", "context": "\nfrom figures import plot_linear_regression\n\nplot_linear_regression()\n", "target_lineno": 65, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "figures"}, {"type": "alias", "value": "plot_linear_regression"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "plot_linear_regression"}], "stage": null, "id": 572811, "neighbor_cells": [572810], "header": "", "annotation": [" The next simple task we ll look at is a regression task a simple best fit line", " to a set of data "]}
{"target_lineno": 84, "file": "/projects/bdata/jupyter/target/nb_730363.py", "context": "\ncom_rec_la = com_rec_qtr.groupby('Authority').agg(np.sum).reset_index().drop(['Green garden waste only', 'Waste food only'], axis=1)\n\ncom_rec_la['sum_dry_rec'] = com_rec_la.sum(axis=1)\n\ncom_rec_la = com_rec_la[['Authority', 'Mixed glass', 'Mixed Plastic Bottles', 'Plastics', 'Mixed cans', 'Co mingled materials', 'sum_dry_rec']]\n\ncom_rec_la\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 25, 36, 49]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "com_rec_la"}, {"type": "Call", "children": [4, 20, 23]}, {"type": "AttributeLoad", "children": [5, 19]}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 18]}, {"type": "Call", "children": [8, 15]}, {"type": "AttributeLoad", "children": [9, 14]}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "com_rec_qtr"}, {"type": "attr", "value": "groupby"}, {"type": "Str", "value": "Authority"}, {"type": "attr", "value": "agg"}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sum"}, {"type": "attr", "value": "reset_index"}, {"type": "attr", "value": "drop"}, {"type": "ListLoad", "children": [21, 22]}, {"type": "Str", "value": "Green garden waste only"}, {"type": "Str", "value": "Waste food only"}, {"type": "keyword", "value": "axis", "children": [24]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [26, 30]}, {"type": "SubscriptStore", "children": [27, 28]}, {"type": "NameLoad", "value": "com_rec_la"}, {"type": "Index", "children": [29]}, {"type": "Str", "value": "sum_dry_rec"}, {"type": "Call", "children": [31, 34]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "com_rec_la"}, {"type": "attr", "value": "sum"}, {"type": "keyword", "value": "axis", "children": [35]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [37, 38]}, {"type": "NameStore", "value": "com_rec_la"}, {"type": "SubscriptLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "com_rec_la"}, {"type": "Index", "children": [41]}, {"type": "ListLoad", "children": [42, 43, 44, 45, 46, 47, 48]}, {"type": "Str", "value": "Authority"}, {"type": "Str", "value": "Mixed glass"}, {"type": "Str", "value": "Mixed Plastic Bottles"}, {"type": "Str", "value": "Plastics"}, {"type": "Str", "value": "Mixed cans"}, {"type": "Str", "value": "Co mingled materials"}, {"type": "Str", "value": "sum_dry_rec"}, {"type": "Expr", "children": [50]}, {"type": "NameLoad", "value": "com_rec_la"}], "funcs": ["pivot_table.reset_index.groupby.agg.reset_index.drop", "pivot_table.reset_index.groupby.agg.reset_index", "pivot_table.reset_index.groupby.agg", "pivot_table.reset_index.groupby", "sum"], "neighbor_cells": [205426], "id": 205427, "header": "", "annotation": []}
{"funcs": ["sklearn.grid_search.GridSearchCV.predict", "sklearn.metrics.accuracy_score", "sklearn.metrics.classification_report", "sklearn.metrics.confusion_matrix"], "file": "/projects/bdata/jupyter/target/nb_684767.py", "target_func": "none_func", "context": "\ny_pred_class = grid.predict(X_test)\n\nprint 'Accuracy score:', accuracy_score(y_test, y_pred_class)\n\nprint 'Classification report:', classification_report(y_test, y_pred_class)\n\nprint 'Confusion matrix:', confusion_matrix(y_test, y_pred_class)\n", "target_lineno": 160, "nodes": [{"type": "Module", "children": [1, 8, 14, 20]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y_pred_class"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "grid"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Print", "children": [9, 10]}, {"type": "Str", "value": "Accuracy score:"}, {"type": "Call", "children": [11, 12, 13]}, {"type": "NameLoad", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred_class"}, {"type": "Print", "children": [15, 16]}, {"type": "Str", "value": "Classification report:"}, {"type": "Call", "children": [17, 18, 19]}, {"type": "NameLoad", "value": "classification_report"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred_class"}, {"type": "Print", "children": [21, 22]}, {"type": "Str", "value": "Confusion matrix:"}, {"type": "Call", "children": [23, 24, 25]}, {"type": "NameLoad", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred_class"}], "stage": null, "id": 709293, "neighbor_cells": [709292], "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_723307.py", "target_func": "none_func", "context": "\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nfrom IPython.html.widgets import interact\n\nfrom scipy import stats\n\nimport seaborn as sns\n\nimport pandas as pd\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 9, 11, 13, 16]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "ImportFrom", "children": [10], "value": "IPython.html.widgets"}, {"type": "alias", "value": "interact"}, {"type": "ImportFrom", "children": [12], "value": "scipy"}, {"type": "alias", "value": "stats"}, {"type": "Import", "children": [14]}, {"type": "alias", "children": [15], "value": "seaborn"}, {"type": "identifier", "value": "sns"}, {"type": "Import", "children": [17]}, {"type": "alias", "children": [18], "value": "pandas"}, {"type": "identifier", "value": "pd"}], "stage": null, "id": 137537, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_817789.py", "target_func": "none_func", "context": "\nprint x[[0, 2]]\n", "target_lineno": 39, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "x"}, {"type": "Index", "children": [5]}, {"type": "ListLoad", "children": [6, 7]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "2"}], "stage": null, "id": 96826, "neighbor_cells": [96825], "header": "", "annotation": []}
{"funcs": ["matplotlib.pyplot.subplots", "ax.plot"], "file": "/projects/bdata/jupyter/target/nb_637316.py", "target_func": "none_func", "context": "\n(fig, ax) = plt.subplots(figsize=(25, 8))\n\nax.plot(t_pulse, current)\n", "target_lineno": 388, "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "fig"}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "subplots"}, {"type": "keyword", "children": [10], "value": "figsize"}, {"type": "TupleLoad", "children": [11, 12]}, {"type": "Num", "value": "25"}, {"type": "Num", "value": "8"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 18, 19]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "ax"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "t_pulse"}, {"type": "NameLoad", "value": "current"}], "stage": null, "id": 377007, "neighbor_cells": [377006], "header": "", "annotation": []}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_848415.py", "target_func": "none_func", "context": "\nget_ipython().magic(u'matplotlib inline')\n", "target_lineno": 33, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "stage": null, "id": 1044089, "neighbor_cells": [1044088], "header": "", "annotation": []}
{"funcs": ["enumerate", "list"], "file": "/projects/bdata/jupyter/target/nb_609619.py", "target_func": "none_func", "context": "\nindices = [i for (i, x) in enumerate(clf_final.feature_importances_) if (x > 0.0)]\n\nlist(X_all.columns[indices])\n", "target_lineno": 281, "nodes": [{"type": "Module", "children": [1, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "indices"}, {"type": "ListComp", "children": [4, 5]}, {"type": "NameLoad", "value": "i"}, {"type": "comprehension", "children": [6, 9, 14]}, {"type": "TupleStore", "children": [7, 8]}, {"type": "NameStore", "value": "i"}, {"type": "NameStore", "value": "x"}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "enumerate"}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "clf_final"}, {"type": "attr", "value": "feature_importances_"}, {"type": "CompareGt", "children": [15, 16]}, {"type": "NameLoad", "value": "x"}, {"type": "Num", "value": "0.0"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "list"}, {"type": "SubscriptLoad", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "X_all"}, {"type": "attr", "value": "columns"}, {"type": "Index", "children": [25]}, {"type": "NameLoad", "value": "indices"}], "stage": null, "id": 648476, "neighbor_cells": [648475], "header": "", "annotation": [" Extracting the column names of the most important features for prediction as determined by the optimized Decision Tree Classifier "]}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_801148.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nget_ipython().magic(u'matplotlib inline')\n\nfrom sklearn import linear_model\n", "target_lineno": 5, "nodes": [{"type": "Module", "children": [1, 4, 7, 14]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 13]}, {"type": "AttributeLoad", "children": [10, 12]}, {"type": "Call", "children": [11]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "ImportFrom", "children": [15], "value": "sklearn"}, {"type": "alias", "value": "linear_model"}], "stage": null, "id": 398652, "neighbor_cells": [-1], "header": " CLASSIFICATION USING LINEAR REGRESSION", "annotation": [" coding utf 8", " CLASSIFICATION USING LINEAR REGRESSION"]}
{"target_lineno": 255, "file": "/projects/bdata/jupyter/target/nb_437185.py", "context": "\ngames = games.assign(away_strength=games.away_team.map(strength), home_strength=games.home_team.map(strength))\n\ngames.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 23]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "games"}, {"type": "Call", "children": [4, 7, 15]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "games"}, {"type": "attr", "value": "assign"}, {"type": "keyword", "value": "away_strength", "children": [8]}, {"type": "Call", "children": [9, 14]}, {"type": "AttributeLoad", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "games"}, {"type": "attr", "value": "away_team"}, {"type": "attr", "value": "map"}, {"type": "NameLoad", "value": "strength"}, {"type": "keyword", "value": "home_strength", "children": [16]}, {"type": "Call", "children": [17, 22]}, {"type": "AttributeLoad", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "games"}, {"type": "attr", "value": "home_team"}, {"type": "attr", "value": "map"}, {"type": "NameLoad", "value": "strength"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "games"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.drop.set_index.assign.assign", "pandas.read_csv.drop.set_index.assign.away_team.map", "pandas.read_csv.drop.set_index.assign.home_team.map", "pandas.read_csv.drop.set_index.assign.head"], "neighbor_cells": [1202133], "id": 1202134, "header": "", "annotation": [" For python people"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_836683.py", "target_func": "none_func", "context": "\nimport george\n\nfrom george.kernels import MyDijetKernelSimp\n\nfrom lmfit import Parameters, minimize, fit_report\n\nfrom iminuit import Minuit\n\npl = plt\n\nimport math\n\nimport ROOT as r\n\nfrom numpy.linalg import LinAlgError\n\nimport warnings\n\nimport numpy as np\n\nimport emcee\n", "target_lineno": 9, "nodes": [{"type": "Module", "children": [1, 3, 5, 9, 11, 14, 16, 19, 21, 23, 26]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "george"}, {"type": "ImportFrom", "children": [4], "value": "george.kernels"}, {"type": "alias", "value": "MyDijetKernelSimp"}, {"type": "ImportFrom", "children": [6, 7, 8], "value": "lmfit"}, {"type": "alias", "value": "Parameters"}, {"type": "alias", "value": "minimize"}, {"type": "alias", "value": "fit_report"}, {"type": "ImportFrom", "children": [10], "value": "iminuit"}, {"type": "alias", "value": "Minuit"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "pl"}, {"type": "NameLoad", "value": "plt"}, {"type": "Import", "children": [15]}, {"type": "alias", "value": "math"}, {"type": "Import", "children": [17]}, {"type": "alias", "children": [18], "value": "ROOT"}, {"type": "identifier", "value": "r"}, {"type": "ImportFrom", "children": [20], "value": "numpy.linalg"}, {"type": "alias", "value": "LinAlgError"}, {"type": "Import", "children": [22]}, {"type": "alias", "value": "warnings"}, {"type": "Import", "children": [24]}, {"type": "alias", "children": [25], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [27]}, {"type": "alias", "value": "emcee"}], "stage": null, "id": 765197, "neighbor_cells": [765196], "header": "", "annotation": []}
{"funcs": ["enumerate"], "file": "/projects/bdata/jupyter/target/nb_28508.py", "target_func": "none_func", "context": "\nfor (i, pred) in enumerate(sample_preds):\n    print 'Sample point', i, 'predicted to be in Cluster', pred\n", "target_lineno": 531, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 5, 8]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "i"}, {"type": "NameStore", "value": "pred"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "enumerate"}, {"type": "NameLoad", "value": "sample_preds"}, {"type": "body", "children": [9]}, {"type": "Print", "children": [10, 11, 12, 13]}, {"type": "Str", "value": "Sample point"}, {"type": "NameLoad", "value": "i"}, {"type": "Str", "value": "predicted to be in Cluster"}, {"type": "NameLoad", "value": "pred"}], "stage": null, "id": 1024517, "neighbor_cells": [1024516], "header": "", "annotation": [" Question 8", " Consider the total purchase cost of each product category for the representative data points above and reference the statistical description of the dataset at the beginning of this project What set of establishments could each of the customer segments represent ", " Hint A customer who is assigned to Cluster X should best identify with the establishments represented by the feature set of Segment X ", " Answer ", " The observations for the segments are summarized ", " ", " Segment 0 ", " 1 This segment is heavy purchase lots of Grocery Milk and Detergents some amount on Fresh Deli and miniscule spend on Frozon ", " 2 The spend behaviour for this segment is manyfolds above the median spend for rest of the dataset for grocery milk and detergents but below the median values for fresh and frozen ", " 3 Likely establishment Grocery stores Supermarkets and simliar outlets ", " ", " Segment 1 ", " 1 This segment spends a lot on Fresh and Frozen stuff but little on Detergent and Grocery ", " 2 The mean for this segment is influenced by few very high purchases ", " 3 This segment is above the median in Fresh and Frozen by several hundred units but below the median values for the whole dataset in detergents and grocery ", " 4 Likely establishment Restaurants Coffee shops Tech companies that offer free food as perks ", " Question 9", " For each sample point which customer segment from Question 8 best represents it Are the predictions for each sample point consistent with this ", " ", " Run the code block below to find which cluster each sample point is predicted to be "]}
{"target_lineno": 266, "file": "/projects/bdata/jupyter/target/nb_640385.py", "context": "\nbase_model = load_model('./VGG/base_model.h5')\n\ntop_model = load_model('./VGG/top_model.h5')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "base_model"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "load_model"}, {"type": "Str", "value": "./VGG/base_model.h5"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "top_model"}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "load_model"}, {"type": "Str", "value": "./VGG/top_model.h5"}], "funcs": ["keras.models.load_model", "keras.models.load_model"], "neighbor_cells": [932640], "id": 932641, "header": " Obtaining Vectors for Test Set", "annotation": [" Obtaining Vectors for Test Set"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_255928.py", "target_func": "none_func", "context": "\nfrom sklearn.metrics import roc_auc_score\n", "target_lineno": 316, "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.metrics"}, {"type": "alias", "value": "roc_auc_score"}], "stage": null, "id": 71959, "neighbor_cells": [71958], "header": "", "annotation": [" Setting up scoring function"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_126939.py", "target_func": "none_func", "context": "\nprint CLIENT_FEATURES\n", "target_lineno": 104, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "CLIENT_FEATURES"}], "stage": null, "id": 187629, "neighbor_cells": [187628], "header": "", "annotation": [" Question 1", " As a reminder you can view a description of the Boston Housing dataset here https archive ics uci edu ml datasets Housing where you can find the different features under Attribute Information The MEDV attribute relates to the values stored in our housing prices variable so we do not consider that a feature of the data ", " ", " Of the features available for each data point choose three that you feel are significant and give a brief description for each of what they measure ", " ", " Remember you can double click the text box below to add your answer ", " Answer ", " ", " I will take the following 3 features ", " RM average number of rooms per dwelling", " DIS weighted distances to five Boston employment centres ", " RAD index of accessibility to radial highways ", " ", " The above features covered the size of the house the distance to workplace and the accessibility to travel across the city which are significant to reflect the price in my thought ", " Question 2", " Using your client s feature set CLIENT FEATURES which values correspond with the features you ve chosen above ", " Hint Run the code block below to see the client s data "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_551463.py", "target_func": "none_func", "context": "\nclf.grid_scores_\n", "target_lineno": 318, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "grid_scores_"}], "stage": null, "id": 1055396, "neighbor_cells": [1055395], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_494882.py", "target_func": "none_func", "context": "\nnew.shape\n", "target_lineno": 381, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "new"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 1060812, "neighbor_cells": [1060811], "header": "", "annotation": []}
{"target_lineno": 51, "file": "/projects/bdata/jupyter/target/nb_674337.py", "context": "\ntrain_set = pd.read_csv('unimel_train.csv', index_col='Grant.Application.ID')\n\ntest_set = pd.read_csv('unimel_test.csv', index_col='Grant.Application.ID')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "train_set"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "unimel_train.csv"}, {"type": "keyword", "value": "index_col", "children": [9]}, {"type": "Str", "value": "Grant.Application.ID"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "test_set"}, {"type": "Call", "children": [13, 16, 17]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "unimel_test.csv"}, {"type": "keyword", "value": "index_col", "children": [18]}, {"type": "Str", "value": "Grant.Application.ID"}], "funcs": ["pandas.read_csv", "pandas.read_csv"], "neighbor_cells": [410882], "id": 410883, "header": "", "annotation": [" 1 ", " http imgur com cBdDBO3 jpg ", " ", " Predict Grant Applications https www kaggle com c unimelb data 40 249 ", " https db tt iYzRzQYP ", " https db tt NGSHb5Qs ", " 1", " pd read csv Grant Status "]}
{"target_lineno": 321, "file": "/projects/bdata/jupyter/target/nb_5475.py", "context": "\nlda_docs = [doc for doc in lda_corpus]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "lda_docs"}, {"type": "ListComp", "children": [4, 5]}, {"type": "NameLoad", "value": "doc"}, {"type": "comprehension", "children": [6, 7]}, {"type": "NameStore", "value": "doc"}, {"type": "NameLoad", "value": "lda_corpus"}], "funcs": [], "neighbor_cells": [627411], "id": 627412, "header": "", "annotation": []}
{"funcs": ["open", "open.write", "format", "open.close"], "file": "/projects/bdata/jupyter/target/nb_795576.py", "target_func": "none_func", "context": "\n\ndef ceate_feature_map(features):\n    outfile = open('xgb.fmap', 'w')\n    i = 0\n    for feat in features:\n        outfile.write('{0}\\t{1}\\tq\\n'.format(i, feat))\n        i = (i + 1)\n    outfile.close()\n", "target_lineno": 615, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 6, 41], "value": "ceate_feature_map"}, {"type": "arguments", "children": [3, 5]}, {"type": "args", "children": [4]}, {"type": "NameParam", "value": "features"}, {"type": "defaults"}, {"type": "body", "children": [7, 13, 16, 36]}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "outfile"}, {"type": "Call", "children": [10, 11, 12]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "xgb.fmap"}, {"type": "Str", "value": "w"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "i"}, {"type": "Num", "value": "0"}, {"type": "For", "children": [17, 18, 19]}, {"type": "NameStore", "value": "feat"}, {"type": "NameLoad", "value": "features"}, {"type": "body", "children": [20, 31]}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "outfile"}, {"type": "attr", "value": "write"}, {"type": "Call", "children": [26, 29, 30]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "Str", "value": "{0}\t{1}\tq\n"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "i"}, {"type": "NameLoad", "value": "feat"}, {"type": "Assign", "children": [32, 33]}, {"type": "NameStore", "value": "i"}, {"type": "BinOpAdd", "children": [34, 35]}, {"type": "NameLoad", "value": "i"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [37]}, {"type": "Call", "children": [38]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "outfile"}, {"type": "attr", "value": "close"}, {"type": "decorator_list"}], "stage": null, "id": 155579, "neighbor_cells": [155578], "header": "", "annotation": []}
{"target_lineno": 386, "file": "/projects/bdata/jupyter/target/nb_43621.py", "context": "\n(slope, intercept)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "TupleLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "slope"}, {"type": "NameLoad", "value": "intercept"}], "funcs": [], "neighbor_cells": [1007860], "id": 1007861, "header": "", "annotation": []}
{"funcs": ["sklearn.metrics.confusion_matrix"], "file": "/projects/bdata/jupyter/target/nb_76651.py", "target_func": "none_func", "context": "\nprint metrics.confusion_matrix(y_test, y_pred_class)\n", "target_lineno": 124, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred_class"}], "stage": null, "id": 59400, "neighbor_cells": [59399], "header": "", "annotation": []}
{"target_lineno": 3, "file": "/projects/bdata/jupyter/target/nb_247900.py", "context": "\nimport matplotlib as plt\n\nimport pandas as pd\n\nimport numpy as np\n\nfrom math import sqrt\n\nfrom statistics import mean\n\nfrom numpy import array\n\nimport numpy as np\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 12, 14, 16]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "matplotlib", "children": [3]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "pandas", "children": [6]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "numpy", "children": [9]}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "value": "math", "children": [11]}, {"type": "alias", "value": "sqrt"}, {"type": "ImportFrom", "value": "statistics", "children": [13]}, {"type": "alias", "value": "mean"}, {"type": "ImportFrom", "value": "numpy", "children": [15]}, {"type": "alias", "value": "array"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "numpy", "children": [18]}, {"type": "identifier", "value": "np"}], "funcs": [], "neighbor_cells": [-1], "id": 715347, "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"target_lineno": 65, "file": "/projects/bdata/jupyter/target/nb_704405.py", "context": "\narr = [5, 5, 5, 5, 5, 6, 6, 6, 7, 7]\n\n(y, x) = numpy.histogram(numpy.array(arr), bins=(5, 6, 7, 8))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "arr"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13]}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "6"}, {"type": "Num", "value": "6"}, {"type": "Num", "value": "6"}, {"type": "Num", "value": "7"}, {"type": "Num", "value": "7"}, {"type": "Assign", "children": [15, 18]}, {"type": "TupleStore", "children": [16, 17]}, {"type": "NameStore", "value": "y"}, {"type": "NameStore", "value": "x"}, {"type": "Call", "children": [19, 22, 27]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "numpy"}, {"type": "attr", "value": "histogram"}, {"type": "Call", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "numpy"}, {"type": "attr", "value": "array"}, {"type": "NameLoad", "value": "arr"}, {"type": "keyword", "value": "bins", "children": [28]}, {"type": "TupleLoad", "children": [29, 30, 31, 32]}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "6"}, {"type": "Num", "value": "7"}, {"type": "Num", "value": "8"}], "funcs": ["numpy.histogram", "numpy.array"], "neighbor_cells": [1268663], "id": 1268664, "header": "", "annotation": []}
{"target_lineno": 297, "file": "/projects/bdata/jupyter/target/nb_445545.py", "context": "\nmaster.iloc[47]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "master"}, {"type": "attr", "value": "iloc"}, {"type": "Index", "children": [7]}, {"type": "Num", "value": "47"}], "funcs": [], "neighbor_cells": [943346], "id": 943347, "header": "", "annotation": []}
{"target_lineno": 184, "file": "/projects/bdata/jupyter/target/nb_674368.py", "context": "\nX = df.drop(['Age', 'Rings'], axis=1)\n\nX\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [4, 7, 10]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "drop"}, {"type": "ListLoad", "children": [8, 9]}, {"type": "Str", "value": "Age"}, {"type": "Str", "value": "Rings"}, {"type": "keyword", "value": "axis", "children": [11]}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [13]}, {"type": "NameLoad", "value": "X"}], "funcs": ["pandas.read_table.drop"], "neighbor_cells": [406693], "id": 406694, "header": " Predictor variables obtained by dropping rings and age from the dataframe ", "annotation": [" Predictor variables obtained by dropping rings and age from the dataframe "]}
{"funcs": ["pandas.read_csv"], "file": "/projects/bdata/jupyter/target/nb_661516.py", "target_func": "none_func", "context": "\ntest = pd.read_csv('test.csv')\n\nprint test.shape\n", "target_lineno": 1029, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "test"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "test.csv"}, {"type": "Print", "children": [9]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 186752, "neighbor_cells": [186751], "header": "", "annotation": []}
{"target_lineno": 301, "file": "/projects/bdata/jupyter/target/nb_553349.py", "context": "\npca.explained_variance_ratio_\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "explained_variance_ratio_"}], "funcs": [], "neighbor_cells": [733680], "id": 733681, "header": "", "annotation": []}
{"target_lineno": 343, "file": "/projects/bdata/jupyter/target/nb_748568.py", "context": "\nX_test.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "X_test"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [77254], "id": 77255, "header": "", "annotation": []}
{"target_lineno": 193, "file": "/projects/bdata/jupyter/target/nb_453877.py", "context": "\nnewDf = df.iloc[:, noMask]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "newDf"}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "iloc"}, {"type": "ExtSlice", "children": [8, 9]}, {"type": "Slice"}, {"type": "Index", "children": [10]}, {"type": "NameLoad", "value": "noMask"}], "funcs": [], "neighbor_cells": [188318], "id": 188319, "header": "", "annotation": [" Restock dans une nouvelle dataFrame avec ligne colonne", " "]}
{"funcs": ["pandas.isnull", "pandas.isnull", "to_frame", "pandas.isnull", "numpy.isnan", "pandas.read_csv.set_value", "get_category_name"], "file": "/projects/bdata/jupyter/target/nb_527316.py", "target_func": "none_func", "context": "\ncategory_wo_name = df[pd.isnull(df['Category Name'])]['Category'].to_frame()\n\nfor row in category_wo_name.index:\n    if (not np.isnan(category_wo_name.ix[row]['Category'])):\n        df.set_value(row, 'Category Name', get_category_name(category_wo_name.ix[row]['Category']))\n", "target_lineno": 60, "nodes": [{"type": "Module", "children": [1, 20]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "category_wo_name"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 19]}, {"type": "SubscriptLoad", "children": [6, 17]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [9]}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "isnull"}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [16]}, {"type": "Str", "value": "Category Name"}, {"type": "Index", "children": [18]}, {"type": "Str", "value": "Category"}, {"type": "attr", "value": "to_frame"}, {"type": "For", "children": [21, 22, 25]}, {"type": "NameStore", "value": "row"}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "category_wo_name"}, {"type": "attr", "value": "index"}, {"type": "body", "children": [26]}, {"type": "If", "children": [27, 41]}, {"type": "UnaryOpNot", "children": [28]}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "isnan"}, {"type": "SubscriptLoad", "children": [33, 39]}, {"type": "SubscriptLoad", "children": [34, 37]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "category_wo_name"}, {"type": "attr", "value": "ix"}, {"type": "Index", "children": [38]}, {"type": "NameLoad", "value": "row"}, {"type": "Index", "children": [40]}, {"type": "Str", "value": "Category"}, {"type": "body", "children": [42]}, {"type": "Expr", "children": [43]}, {"type": "Call", "children": [44, 47, 48, 49]}, {"type": "AttributeLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "set_value"}, {"type": "NameLoad", "value": "row"}, {"type": "Str", "value": "Category Name"}, {"type": "Call", "children": [50, 51]}, {"type": "NameLoad", "value": "get_category_name"}, {"type": "SubscriptLoad", "children": [52, 58]}, {"type": "SubscriptLoad", "children": [53, 56]}, {"type": "AttributeLoad", "children": [54, 55]}, {"type": "NameLoad", "value": "category_wo_name"}, {"type": "attr", "value": "ix"}, {"type": "Index", "children": [57]}, {"type": "NameLoad", "value": "row"}, {"type": "Index", "children": [59]}, {"type": "Str", "value": "Category"}], "stage": null, "id": 466357, "neighbor_cells": [466356], "header": "", "annotation": []}
{"funcs": ["figures.plot_sgd_separator"], "file": "/projects/bdata/jupyter/target/nb_564482.py", "target_func": "none_func", "context": "\nfrom figures import plot_sgd_separator\n\nplot_sgd_separator()\n", "target_lineno": 40, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "figures"}, {"type": "alias", "value": "plot_sgd_separator"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "plot_sgd_separator"}], "stage": null, "id": 951237, "neighbor_cells": [951236], "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.LinearRegression", "sklearn.linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression.fit.predict"], "file": "/projects/bdata/jupyter/target/nb_498910.py", "target_func": "none_func", "context": "\nlm = LinearRegression()\n\nmodel = lm.fit(X_train, y_train)\n\ny_pred_test = model.predict(X_test)\n", "target_lineno": 165, "nodes": [{"type": "Module", "children": [1, 5, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "lm"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "LinearRegression"}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [8, 11, 12]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "lm"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "y_pred_test"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}], "stage": null, "id": 352088, "neighbor_cells": [352087], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv", "list", "pandas.read_csv.antiguedad.unique"], "file": "/projects/bdata/jupyter/target/nb_420694.py", "target_func": "none_func", "context": "\ndata = pd.read_csv('train_ver2.csv', usecols=['antiguedad'])\n\nprint list(data.antiguedad.unique())\n", "target_lineno": 258, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "train_ver2.csv"}, {"type": "keyword", "children": [9], "value": "usecols"}, {"type": "ListLoad", "children": [10]}, {"type": "Str", "value": "antiguedad"}, {"type": "Print", "children": [12]}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "list"}, {"type": "Call", "children": [15]}, {"type": "AttributeLoad", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "antiguedad"}, {"type": "attr", "value": "unique"}], "stage": null, "id": 304847, "neighbor_cells": [304846], "header": "", "annotation": [" Good to see that the distribution is similar between train and test ", " Further I want to explore the other two numerical features in the datase Firstly let s look on the antiguedad feature that is customer seniority in months "]}
{"target_lineno": 318, "file": "/projects/bdata/jupyter/target/nb_16333.py", "context": "\ndf['cuisine'].value_counts()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "cuisine"}, {"type": "attr", "value": "value_counts"}], "funcs": ["value_counts"], "neighbor_cells": [762930], "id": 762931, "header": "", "annotation": []}
{"funcs": ["sklearn.metrics.log_loss", "link_function"], "file": "/projects/bdata/jupyter/target/nb_8277.py", "target_func": "none_func", "context": "\n\ndef link_function(x):\n    return ((gamma_1 * x) / ((gamma_1 * x) + (gamma_0 * (1 - x))))\n\n\ndef log_loss_lf(y_true, y_pred):\n    return log_loss(y_true, link_function(y_pred[:, 1]), eps=eps)\n", "target_lineno": 84, "nodes": [{"type": "Module", "children": [1, 22]}, {"type": "FunctionDef", "children": [2, 6, 21], "value": "link_function"}, {"type": "arguments", "children": [3, 5]}, {"type": "args", "children": [4]}, {"type": "NameParam", "value": "x"}, {"type": "defaults"}, {"type": "body", "children": [7]}, {"type": "Return", "children": [8]}, {"type": "BinOpDiv", "children": [9, 12]}, {"type": "BinOpMult", "children": [10, 11]}, {"type": "NameLoad", "value": "gamma_1"}, {"type": "NameLoad", "value": "x"}, {"type": "BinOpAdd", "children": [13, 16]}, {"type": "BinOpMult", "children": [14, 15]}, {"type": "NameLoad", "value": "gamma_1"}, {"type": "NameLoad", "value": "x"}, {"type": "BinOpMult", "children": [17, 18]}, {"type": "NameLoad", "value": "gamma_0"}, {"type": "BinOpSub", "children": [19, 20]}, {"type": "Num", "value": "1"}, {"type": "NameLoad", "value": "x"}, {"type": "decorator_list"}, {"type": "FunctionDef", "children": [23, 28, 43], "value": "log_loss_lf"}, {"type": "arguments", "children": [24, 27]}, {"type": "args", "children": [25, 26]}, {"type": "NameParam", "value": "y_true"}, {"type": "NameParam", "value": "y_pred"}, {"type": "defaults"}, {"type": "body", "children": [29]}, {"type": "Return", "children": [30]}, {"type": "Call", "children": [31, 32, 33, 41]}, {"type": "NameLoad", "value": "log_loss"}, {"type": "NameLoad", "value": "y_true"}, {"type": "Call", "children": [34, 35]}, {"type": "NameLoad", "value": "link_function"}, {"type": "SubscriptLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "y_pred"}, {"type": "ExtSlice", "children": [38, 39]}, {"type": "Slice"}, {"type": "Index", "children": [40]}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [42], "value": "eps"}, {"type": "NameLoad", "value": "eps"}, {"type": "decorator_list"}], "stage": null, "id": 875180, "neighbor_cells": [875179], "header": " Logistic Regression", "annotation": [" Logistic Regression"]}
{"target_lineno": 103, "file": "/projects/bdata/jupyter/target/nb_486800.py", "context": "\nsns.clustermap(flight_dframe)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "clustermap"}, {"type": "NameLoad", "value": "flight_dframe"}], "funcs": ["seaborn.clustermap"], "neighbor_cells": [1102972], "id": 1102973, "header": "", "annotation": []}
{"target_lineno": 26, "file": "/projects/bdata/jupyter/target/nb_75508.py", "context": "\nprint(iris.feature_names, iris.target_names)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 7]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "iris"}, {"type": "attr", "value": "feature_names"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "iris"}, {"type": "attr", "value": "target_names"}], "funcs": ["print"], "neighbor_cells": [527729], "id": 527730, "header": "", "annotation": [" EDA", " Here we will look at what features we have and choose 2 dims "]}
{"target_lineno": 71, "file": "/projects/bdata/jupyter/target/nb_615485.py", "context": "\nIDDict[Proteomics.columns[(- 3)]] = 'Healthy'\n\nIDDict[Proteomics.columns[(- 2)]] = 'Healthy'\n\nIDDict[Proteomics.columns[(- 1)]] = 'Healthy'\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13, 25]}, {"type": "Assign", "children": [2, 12]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "IDDict"}, {"type": "Index", "children": [5]}, {"type": "SubscriptLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "Proteomics"}, {"type": "attr", "value": "columns"}, {"type": "Index", "children": [10]}, {"type": "UnaryOpUSub", "children": [11]}, {"type": "Num", "value": "3"}, {"type": "Str", "value": "Healthy"}, {"type": "Assign", "children": [14, 24]}, {"type": "SubscriptStore", "children": [15, 16]}, {"type": "NameLoad", "value": "IDDict"}, {"type": "Index", "children": [17]}, {"type": "SubscriptLoad", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "Proteomics"}, {"type": "attr", "value": "columns"}, {"type": "Index", "children": [22]}, {"type": "UnaryOpUSub", "children": [23]}, {"type": "Num", "value": "2"}, {"type": "Str", "value": "Healthy"}, {"type": "Assign", "children": [26, 36]}, {"type": "SubscriptStore", "children": [27, 28]}, {"type": "NameLoad", "value": "IDDict"}, {"type": "Index", "children": [29]}, {"type": "SubscriptLoad", "children": [30, 33]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "Proteomics"}, {"type": "attr", "value": "columns"}, {"type": "Index", "children": [34]}, {"type": "UnaryOpUSub", "children": [35]}, {"type": "Num", "value": "1"}, {"type": "Str", "value": "Healthy"}], "funcs": [], "neighbor_cells": [308254], "id": 308255, "header": "", "annotation": []}
{"funcs": ["groupby.size"], "file": "/projects/bdata/jupyter/target/nb_378488.py", "target_func": "none_func", "context": "\nad_local_size = ad_local_grouped.size()\n", "target_lineno": 3253, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ad_local_size"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "ad_local_grouped"}, {"type": "attr", "value": "size"}], "stage": null, "id": 857909, "neighbor_cells": [857908], "header": "", "annotation": []}
{"funcs": ["pandas.set_option", "pandas.set_option", "pandas.set_option", "get_ipython.run_line_magic", "get_ipython", "matplotlib.pyplot.style.use"], "file": "/projects/bdata/jupyter/target/nb_479343.py", "target_func": "none_func", "context": "\nimport os\n\nimport numpy as np\n\nimport pandas as pd\n\nimport csv\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn import linear_model, metrics\n\npd.set_option('display.max_rows', 10)\n\npd.set_option('display.notebook_repr_html', True)\n\npd.set_option('display.max_columns', 10)\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nplt.style.use('ggplot')\n", "target_lineno": 5, "nodes": [{"type": "Module", "children": [1, 3, 6, 9, 11, 14, 17, 24, 31, 38, 46]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "os"}, {"type": "Import", "children": [4]}, {"type": "alias", "children": [5], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [7]}, {"type": "alias", "children": [8], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [10]}, {"type": "alias", "value": "csv"}, {"type": "Import", "children": [12]}, {"type": "alias", "children": [13], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "children": [15, 16], "value": "sklearn"}, {"type": "alias", "value": "linear_model"}, {"type": "alias", "value": "metrics"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22, 23]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "set_option"}, {"type": "Str", "value": "display.max_rows"}, {"type": "Num", "value": "10"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 29, 30]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "set_option"}, {"type": "Str", "value": "display.notebook_repr_html"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 36, 37]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "set_option"}, {"type": "Str", "value": "display.max_columns"}, {"type": "Num", "value": "10"}, {"type": "Expr", "children": [39]}, {"type": "Call", "children": [40, 44, 45]}, {"type": "AttributeLoad", "children": [41, 43]}, {"type": "Call", "children": [42]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Expr", "children": [47]}, {"type": "Call", "children": [48, 53]}, {"type": "AttributeLoad", "children": [49, 52]}, {"type": "AttributeLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "style"}, {"type": "attr", "value": "use"}, {"type": "Str", "value": "ggplot"}], "stage": null, "id": 650531, "neighbor_cells": [-1], "header": " DS SF 23 Codealong 10 Advanced Metrics and Communicating Results Answer Key", "annotation": [" usr bin env python", " coding utf 8", " DS SF 23 Codealong 10 Advanced Metrics and Communicating Results Answer Key"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_177078.py", "target_func": "none_func", "context": "\nimport sklearn\n\nfrom sklearn.linear_model import LinearRegression\n", "target_lineno": 186, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "sklearn"}, {"type": "ImportFrom", "children": [4], "value": "sklearn.linear_model"}, {"type": "alias", "value": "LinearRegression"}], "stage": null, "id": 666824, "neighbor_cells": [666823], "header": " Use scikit learn to implement a multivariate regression", "annotation": [" Use scikit learn to implement a multivariate regression"]}
{"funcs": ["pandas.ExcelFile.parse.head"], "file": "/projects/bdata/jupyter/target/nb_588424.py", "target_func": "none_func", "context": "\ndf_assoc.head()\n", "target_lineno": 343, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df_assoc"}, {"type": "attr", "value": "head"}], "stage": null, "id": 665834, "neighbor_cells": [665833], "header": "", "annotation": []}
{"funcs": ["zip", "numpy.array", "numpy.sort"], "file": "/projects/bdata/jupyter/target/nb_996503.py", "target_func": "none_func", "context": "\nforest_final = grid_search_forest.best_estimator_\n\nfeature_imprtance = zip(oj.columns[1:], forest_final.feature_importances_)\n\ndtype = [('feature', 'S10'), ('importance', 'float')]\n\nfeature_imprtance = np.array(feature_imprtance, dtype=dtype)\n\nfeature_sort = np.sort(feature_imprtance, order='importance')[::(-1)]\n\nfeature_sort\n", "target_lineno": 205, "nodes": [{"type": "Module", "children": [1, 6, 19, 28, 37, 49]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "forest_final"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "grid_search_forest"}, {"type": "attr", "value": "best_estimator_"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "feature_imprtance"}, {"type": "Call", "children": [9, 10, 16]}, {"type": "NameLoad", "value": "zip"}, {"type": "SubscriptLoad", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "oj"}, {"type": "attr", "value": "columns"}, {"type": "Slice", "children": [15]}, {"type": "Num", "value": "1"}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "forest_final"}, {"type": "attr", "value": "feature_importances_"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "dtype"}, {"type": "ListLoad", "children": [22, 25]}, {"type": "TupleLoad", "children": [23, 24]}, {"type": "Str", "value": "feature"}, {"type": "Str", "value": "S10"}, {"type": "TupleLoad", "children": [26, 27]}, {"type": "Str", "value": "importance"}, {"type": "Str", "value": "float"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "feature_imprtance"}, {"type": "Call", "children": [31, 34, 35]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "NameLoad", "value": "feature_imprtance"}, {"type": "keyword", "children": [36], "value": "dtype"}, {"type": "NameLoad", "value": "dtype"}, {"type": "Assign", "children": [38, 39]}, {"type": "NameStore", "value": "feature_sort"}, {"type": "SubscriptLoad", "children": [40, 47]}, {"type": "Call", "children": [41, 44, 45]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sort"}, {"type": "NameLoad", "value": "feature_imprtance"}, {"type": "keyword", "children": [46], "value": "order"}, {"type": "Str", "value": "importance"}, {"type": "Slice", "children": [48]}, {"type": "Num", "value": "-1"}, {"type": "Expr", "children": [50]}, {"type": "NameLoad", "value": "feature_sort"}], "stage": null, "id": 1163118, "neighbor_cells": [1163117], "header": "", "annotation": []}
{"target_lineno": 356, "file": "/projects/bdata/jupyter/target/nb_330555.py", "context": "\nmatplotlib.rcParams.update({\n    'font.size': 18,\n    'font.family': 'STIXGeneral',\n    'mathtext.fontset': 'stix',\n})\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 8]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "matplotlib"}, {"type": "attr", "value": "rcParams"}, {"type": "attr", "value": "update"}, {"type": "Dict", "children": [9, 10, 11, 12, 13, 14]}, {"type": "Str", "value": "font.size"}, {"type": "Str", "value": "font.family"}, {"type": "Str", "value": "mathtext.fontset"}, {"type": "Num", "value": "18"}, {"type": "Str", "value": "STIXGeneral"}, {"type": "Str", "value": "stix"}], "funcs": ["matplotlib.rcParams.update"], "neighbor_cells": [473745], "id": 473746, "header": "", "annotation": [" A good choice of global fonts are the STIX fonts "]}
{"funcs": ["numpy.sum"], "file": "/projects/bdata/jupyter/target/nb_410936.py", "target_func": "none_func", "context": "\nnp.sum((test_data['product_type'] == 0))\n", "target_lineno": 1038, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sum"}, {"type": "CompareEq", "children": [7, 11]}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "test_data"}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "product_type"}, {"type": "Num", "value": "0"}], "stage": null, "id": 556634, "neighbor_cells": [556633], "header": "", "annotation": []}
{"funcs": ["applymap", "sum", "applymap"], "file": "/projects/bdata/jupyter/target/nb_429189.py", "target_func": "none_func", "context": "\n(df[['Start', 'Einde', 'Prognose']].applymap(type) != pd.tslib.Timestamp).sum()\n", "target_lineno": 101, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 21]}, {"type": "CompareNotEq", "children": [5, 16]}, {"type": "Call", "children": [6, 15]}, {"type": "AttributeLoad", "children": [7, 14]}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [10]}, {"type": "ListLoad", "children": [11, 12, 13]}, {"type": "Str", "value": "Start"}, {"type": "Str", "value": "Einde"}, {"type": "Str", "value": "Prognose"}, {"type": "attr", "value": "applymap"}, {"type": "NameLoad", "value": "type"}, {"type": "AttributeLoad", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "tslib"}, {"type": "attr", "value": "Timestamp"}, {"type": "attr", "value": "sum"}], "stage": null, "id": 367752, "neighbor_cells": [367751], "header": "", "annotation": []}
{"target_lineno": 123, "file": "/projects/bdata/jupyter/target/nb_395595.py", "context": "\nkm.cost(data2, final_centroid, final_C)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7, 8]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "km"}, {"type": "attr", "value": "cost"}, {"type": "NameLoad", "value": "data2"}, {"type": "NameLoad", "value": "final_centroid"}, {"type": "NameLoad", "value": "final_C"}], "funcs": ["helper.kmeans.cost"], "neighbor_cells": [1341353], "id": 1341354, "header": " calculate the cost", "annotation": [" calculate the cost"]}
{"target_lineno": 70, "file": "/projects/bdata/jupyter/target/nb_456654.py", "context": "\nCAData.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "CAData"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [1247224], "id": 1247225, "header": "", "annotation": []}
{"target_lineno": 103, "file": "/projects/bdata/jupyter/target/nb_989195.py", "context": "\nskl.metrics.accuracy_score(yte, gridclf2.predict(Xte))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 8, 9]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "skl"}, {"type": "attr", "value": "metrics"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "yte"}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "gridclf2"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "Xte"}], "funcs": ["sklearn.metrics.accuracy_score", "sklearn.grid_search.GridSearchCV.predict"], "neighbor_cells": [1269379], "id": 1269380, "header": "", "annotation": []}
{"target_lineno": 227, "file": "/projects/bdata/jupyter/target/nb_324007.py", "context": "\nfrom sklearn.linear_model import LogisticRegressionCV\n\nlr = LogisticRegressionCV()\n\nlr.fit(X_train_cv, y_train)\n\ny_pred_cv = lr.predict(X_test_cv)\n\nlr.fit(X_train_embed, y_train)\n\ny_pred_embed = lr.predict(X_test_embed)\n\nlr.fit(X_train_comb, y_train)\n\ny_pred_comb = lr.predict(X_test_comb)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 7, 14, 21, 28, 35, 42]}, {"type": "ImportFrom", "value": "sklearn.linear_model", "children": [2]}, {"type": "alias", "value": "LogisticRegressionCV"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "lr"}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "LogisticRegressionCV"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12, 13]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train_cv"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "y_pred_cv"}, {"type": "Call", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test_cv"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26, 27]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train_embed"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "y_pred_embed"}, {"type": "Call", "children": [31, 34]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test_embed"}, {"type": "Expr", "children": [36]}, {"type": "Call", "children": [37, 40, 41]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train_comb"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [43, 44]}, {"type": "NameStore", "value": "y_pred_comb"}, {"type": "Call", "children": [45, 48]}, {"type": "AttributeLoad", "children": [46, 47]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test_comb"}], "funcs": ["sklearn.linear_model.LogisticRegressionCV", "sklearn.linear_model.LogisticRegressionCV.fit", "sklearn.linear_model.LogisticRegressionCV.predict", "sklearn.linear_model.LogisticRegressionCV.fit", "sklearn.linear_model.LogisticRegressionCV.predict", "sklearn.linear_model.LogisticRegressionCV.fit", "sklearn.linear_model.LogisticRegressionCV.predict"], "neighbor_cells": [1319292], "id": 1319293, "header": "", "annotation": [" Question", " ", " Using Logistic regression fit models using the three feature matrices document term alone word2vec embeddings alone and both combined ", " Compare the accuracy of each of these models ", " First the models "]}
{"funcs": ["xgboost.XGBClassifier"], "file": "/projects/bdata/jupyter/target/nb_406421.py", "target_func": "none_func", "context": "\ntreeta = xgb.XGBClassifier(objective='multiclass:softmax', max_depth=3, learning_rate=0.1, n_estimators=1000)\n", "target_lineno": 158, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "treeta"}, {"type": "Call", "children": [4, 7, 9, 11, 13]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "xgb"}, {"type": "attr", "value": "XGBClassifier"}, {"type": "keyword", "children": [8], "value": "objective"}, {"type": "Str", "value": "multiclass:softmax"}, {"type": "keyword", "children": [10], "value": "max_depth"}, {"type": "Num", "value": "3"}, {"type": "keyword", "children": [12], "value": "learning_rate"}, {"type": "Num", "value": "0.1"}, {"type": "keyword", "children": [14], "value": "n_estimators"}, {"type": "Num", "value": "1000"}], "stage": null, "id": 1010250, "neighbor_cells": [1010249], "header": "", "annotation": []}
{"target_lineno": 601, "file": "/projects/bdata/jupyter/target/nb_473757.py", "context": "\nmean_logloss = predictions.select('label_t').toPandas().mean()\n\nprint(mean_logloss)\n\nstd_logloss = predictions.select('label_t').toPandas().std()\n\nprint(std_logloss)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 14, 18, 31]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mean_logloss"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 13]}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 12]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "predictions"}, {"type": "attr", "value": "select"}, {"type": "Str", "value": "label_t"}, {"type": "attr", "value": "toPandas"}, {"type": "attr", "value": "mean"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 17]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "mean_logloss"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "std_logloss"}, {"type": "Call", "children": [21]}, {"type": "AttributeLoad", "children": [22, 30]}, {"type": "Call", "children": [23]}, {"type": "AttributeLoad", "children": [24, 29]}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "predictions"}, {"type": "attr", "value": "select"}, {"type": "Str", "value": "label_t"}, {"type": "attr", "value": "toPandas"}, {"type": "attr", "value": "std"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "std_logloss"}], "funcs": ["pyspark.ml.Pipeline.fit.transform.withColumn.select.toPandas.mean", "pyspark.ml.Pipeline.fit.transform.withColumn.select.toPandas", "pyspark.ml.Pipeline.fit.transform.withColumn.select", "print", "pyspark.ml.Pipeline.fit.transform.withColumn.select.toPandas.std", "pyspark.ml.Pipeline.fit.transform.withColumn.select.toPandas", "pyspark.ml.Pipeline.fit.transform.withColumn.select", "print"], "neighbor_cells": [187124], "id": 187125, "header": "", "annotation": []}
{"funcs": ["pandas.merge"], "file": "/projects/bdata/jupyter/target/nb_364725.py", "target_func": "none_func", "context": "\ntest_weather = pd.merge(test, weather_na, how='inner', on='Date')\n\nprint test_weather.shape\n\nprint test.shape\n", "target_lineno": 527, "nodes": [{"type": "Module", "children": [1, 13, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "test_weather"}, {"type": "Call", "children": [4, 7, 8, 9, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "merge"}, {"type": "NameLoad", "value": "test"}, {"type": "NameLoad", "value": "weather_na"}, {"type": "keyword", "children": [10], "value": "how"}, {"type": "Str", "value": "inner"}, {"type": "keyword", "children": [12], "value": "on"}, {"type": "Str", "value": "Date"}, {"type": "Print", "children": [14]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "test_weather"}, {"type": "attr", "value": "shape"}, {"type": "Print", "children": [18]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 755304, "neighbor_cells": [755303], "header": "", "annotation": []}
{"target_lineno": 9, "file": "/projects/bdata/jupyter/target/nb_853431.py", "context": "\nimport numpy as np\n\nimport tensorflow as tf\n\nimport keras\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "tensorflow", "children": [6]}, {"type": "identifier", "value": "tf"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "keras"}], "funcs": [], "neighbor_cells": [935954], "id": 935955, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_13633.py", "target_func": "none_func", "context": "\nfrom sklearn.decomposition import RandomizedPCA\n", "target_lineno": 203, "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.decomposition"}, {"type": "alias", "value": "RandomizedPCA"}], "stage": null, "id": 692765, "neighbor_cells": [692764], "header": " PCA", "annotation": [" PCA"]}
{"target_lineno": 253, "file": "/projects/bdata/jupyter/target/nb_270651.py", "context": "\n(1846.5841009616852 / 60)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpDiv", "children": [3, 4]}, {"type": "Num", "value": "1846.5841009616852"}, {"type": "Num", "value": "60"}], "funcs": [], "neighbor_cells": [866515], "id": 866516, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_687514.py", "target_func": "none_func", "context": "\nimport pandas as pd\n\nimport numpy as np\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "numpy"}, {"type": "identifier", "value": "np"}], "stage": null, "id": 242934, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"target_lineno": 343, "file": "/projects/bdata/jupyter/target/nb_554106.py", "context": "\nbnl1 = bn_model.layers[3]\n\nbnl4 = bn_model.layers[6]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "bnl1"}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "bn_model"}, {"type": "attr", "value": "layers"}, {"type": "Index", "children": [8]}, {"type": "Num", "value": "3"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "bnl4"}, {"type": "SubscriptLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "bn_model"}, {"type": "attr", "value": "layers"}, {"type": "Index", "children": [16]}, {"type": "Num", "value": "6"}], "funcs": [], "neighbor_cells": [1342864], "id": 1342865, "header": "", "annotation": []}
{"target_lineno": 403, "file": "/projects/bdata/jupyter/target/nb_313103.py", "context": "\nfig = go.Figure(data=[go.Scatter(y=mse)], layout=go.Layout(title='MSE'))\n\niplot(fig)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 22]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "fig"}, {"type": "Call", "children": [4, 7, 15]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "go"}, {"type": "attr", "value": "Figure"}, {"type": "keyword", "value": "data", "children": [8]}, {"type": "ListLoad", "children": [9]}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "go"}, {"type": "attr", "value": "Scatter"}, {"type": "keyword", "value": "y", "children": [14]}, {"type": "NameLoad", "value": "mse"}, {"type": "keyword", "value": "layout", "children": [16]}, {"type": "Call", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "go"}, {"type": "attr", "value": "Layout"}, {"type": "keyword", "value": "title", "children": [21]}, {"type": "Str", "value": "MSE"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 25]}, {"type": "NameLoad", "value": "iplot"}, {"type": "NameLoad", "value": "fig"}], "funcs": ["plotly.graph_objs.Figure", "plotly.graph_objs.Scatter", "plotly.graph_objs.Layout", "plotly.offline.iplot"], "neighbor_cells": [1331553], "id": 1331554, "header": "", "annotation": []}
{"target_lineno": 82, "file": "/projects/bdata/jupyter/target/nb_352212.py", "context": "\nsyllabus_words = get_words(syllabus_text)\n\nprint(syllabus_words[:5], '...', syllabus_words[(- 5):])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "syllabus_words"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "get_words"}, {"type": "NameLoad", "value": "syllabus_text"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8, 9, 13, 14]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "syllabus_words"}, {"type": "Slice", "children": [12]}, {"type": "Num", "value": "5"}, {"type": "Str", "value": "..."}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "syllabus_words"}, {"type": "Slice", "children": [17]}, {"type": "UnaryOpUSub", "children": [18]}, {"type": "Num", "value": "5"}], "funcs": ["get_words", "print"], "neighbor_cells": [602981], "id": 602982, "header": "", "annotation": []}
{"target_lineno": 237, "file": "/projects/bdata/jupyter/target/nb_673278.py", "context": "\nnp.dot(np.mat(range(9)).reshape(3, 3), np.invert(np.mat(range(9)).reshape(3, 3)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 18]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "dot"}, {"type": "Call", "children": [7, 16, 17]}, {"type": "AttributeLoad", "children": [8, 15]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mat"}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "9"}, {"type": "attr", "value": "reshape"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "3"}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "invert"}, {"type": "Call", "children": [23, 32, 33]}, {"type": "AttributeLoad", "children": [24, 31]}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mat"}, {"type": "Call", "children": [29, 30]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "9"}, {"type": "attr", "value": "reshape"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "3"}], "funcs": ["numpy.dot", "numpy.mat.reshape", "numpy.mat", "range", "numpy.invert", "numpy.mat.reshape", "numpy.mat", "range"], "neighbor_cells": [836778], "id": 836779, "header": "", "annotation": []}
{"target_lineno": 425, "file": "/projects/bdata/jupyter/target/nb_737384.py", "context": "\nnumeric_percent_null = housing_data_test_numeric.isnull().sum()\n\nnumeric_percent_null.sort_values(ascending=False)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "numeric_percent_null"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 9]}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "housing_data_test_numeric"}, {"type": "attr", "value": "isnull"}, {"type": "attr", "value": "sum"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "numeric_percent_null"}, {"type": "attr", "value": "sort_values"}, {"type": "keyword", "value": "ascending", "children": [16]}, {"type": "NameConstant"}], "funcs": ["pandas.read_csv.select_dtypes.isnull.sum", "pandas.read_csv.select_dtypes.isnull", "pandas.read_csv.select_dtypes.isnull.sum.sort_values"], "neighbor_cells": [788746], "id": 788747, "header": "", "annotation": []}
{"target_lineno": 839, "file": "/projects/bdata/jupyter/target/nb_172863.py", "context": "\nsmdf_barplot_american_trad_bus_stars = smdf.groupby(['sandwiches', 'Business stars'])['sandwiches'].count().unstack('sandwiches')\n\nsmdf_barplot_american_trad_bus_stars.plot(kind='bar', stacked=True, title='Business stars / sandwiches', figsize=(5, 5))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 20]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "smdf_barplot_american_trad_bus_stars"}, {"type": "Call", "children": [4, 19]}, {"type": "AttributeLoad", "children": [5, 18]}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 17]}, {"type": "SubscriptLoad", "children": [8, 15]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "smdf"}, {"type": "attr", "value": "groupby"}, {"type": "ListLoad", "children": [13, 14]}, {"type": "Str", "value": "sandwiches"}, {"type": "Str", "value": "Business stars"}, {"type": "Index", "children": [16]}, {"type": "Str", "value": "sandwiches"}, {"type": "attr", "value": "count"}, {"type": "attr", "value": "unstack"}, {"type": "Str", "value": "sandwiches"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 25, 27, 29, 31]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "smdf_barplot_american_trad_bus_stars"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "value": "kind", "children": [26]}, {"type": "Str", "value": "bar"}, {"type": "keyword", "value": "stacked", "children": [28]}, {"type": "NameConstant"}, {"type": "keyword", "value": "title", "children": [30]}, {"type": "Str", "value": "Business stars / sandwiches"}, {"type": "keyword", "value": "figsize", "children": [32]}, {"type": "TupleLoad", "children": [33, 34]}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "5"}], "funcs": ["groupby", "groupby", "count.unstack", "groupby", "count", "groupby", "count.unstack.plot"], "neighbor_cells": [573528], "id": 573529, "header": "", "annotation": []}
{"target_lineno": 76, "file": "/projects/bdata/jupyter/target/nb_783016.py", "context": "\nnames = sonar_data.columns.tolist()\n\nfor i in range(len(names)):\n    mean = sonar_data[names[i]].mean()\n    sd = sonar_data[names[i]].std()\n    sonar_data[names[i]] = ((sonar_data[names[i]] - mean) / sd)\n\nsonar_data\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 60]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "names"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "sonar_data"}, {"type": "attr", "value": "columns"}, {"type": "attr", "value": "tolist"}, {"type": "For", "children": [10, 11, 16]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "range"}, {"type": "Call", "children": [14, 15]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "names"}, {"type": "body", "children": [17, 29, 41]}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "mean"}, {"type": "Call", "children": [20]}, {"type": "AttributeLoad", "children": [21, 28]}, {"type": "SubscriptLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "sonar_data"}, {"type": "Index", "children": [24]}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "names"}, {"type": "Index", "children": [27]}, {"type": "NameLoad", "value": "i"}, {"type": "attr", "value": "mean"}, {"type": "Assign", "children": [30, 31]}, {"type": "NameStore", "value": "sd"}, {"type": "Call", "children": [32]}, {"type": "AttributeLoad", "children": [33, 40]}, {"type": "SubscriptLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "sonar_data"}, {"type": "Index", "children": [36]}, {"type": "SubscriptLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "names"}, {"type": "Index", "children": [39]}, {"type": "NameLoad", "value": "i"}, {"type": "attr", "value": "std"}, {"type": "Assign", "children": [42, 49]}, {"type": "SubscriptStore", "children": [43, 44]}, {"type": "NameLoad", "value": "sonar_data"}, {"type": "Index", "children": [45]}, {"type": "SubscriptLoad", "children": [46, 47]}, {"type": "NameLoad", "value": "names"}, {"type": "Index", "children": [48]}, {"type": "NameLoad", "value": "i"}, {"type": "BinOpDiv", "children": [50, 59]}, {"type": "BinOpSub", "children": [51, 58]}, {"type": "SubscriptLoad", "children": [52, 53]}, {"type": "NameLoad", "value": "sonar_data"}, {"type": "Index", "children": [54]}, {"type": "SubscriptLoad", "children": [55, 56]}, {"type": "NameLoad", "value": "names"}, {"type": "Index", "children": [57]}, {"type": "NameLoad", "value": "i"}, {"type": "NameLoad", "value": "mean"}, {"type": "NameLoad", "value": "sd"}, {"type": "Expr", "children": [61]}, {"type": "NameLoad", "value": "sonar_data"}], "funcs": ["pandas.read_csv.dropna.columns.tolist", "range", "len", "mean", "std"], "neighbor_cells": [1252262], "id": 1252263, "header": " Scaling the data", "annotation": [" Scaling the data"]}
{"funcs": ["append", "pandas.DataFrame", "merge"], "file": "/projects/bdata/jupyter/target/nb_399322.py", "target_func": "none_func", "context": "\nresults_list5 = []\n\nresults5 = {\n    'In_Place': 0,\n    'Percentage_of_Vote': 41.0,\n    'Ad_Issue': 'Prop 6 (Michigan International Bridge Initiative)',\n}\n\nresults_list5.append(results5)\n\nbridge_df2 = pd.DataFrame(results_list5, columns=['In_Place', 'Percentage_of_Vote', 'Ad_Issue'])\n\nbridge_both_df = bridge_df.merge(bridge_df2, on=['Ad_Issue'], how='inner')\n\nbridge_both_df.columns\n", "target_lineno": 2243, "nodes": [{"type": "Module", "children": [1, 4, 13, 19, 31, 43]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "results_list5"}, {"type": "ListLoad"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "results5"}, {"type": "Dict", "children": [7, 8, 9, 10, 11, 12]}, {"type": "Str", "value": "In_Place"}, {"type": "Str", "value": "Percentage_of_Vote"}, {"type": "Str", "value": "Ad_Issue"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "41.0"}, {"type": "Str", "value": "Prop 6 (Michigan International Bridge Initiative)"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "results_list5"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "results5"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "bridge_df2"}, {"type": "Call", "children": [22, 25, 26]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "NameLoad", "value": "results_list5"}, {"type": "keyword", "children": [27], "value": "columns"}, {"type": "ListLoad", "children": [28, 29, 30]}, {"type": "Str", "value": "In_Place"}, {"type": "Str", "value": "Percentage_of_Vote"}, {"type": "Str", "value": "Ad_Issue"}, {"type": "Assign", "children": [32, 33]}, {"type": "NameStore", "value": "bridge_both_df"}, {"type": "Call", "children": [34, 37, 38, 41]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "bridge_df"}, {"type": "attr", "value": "merge"}, {"type": "NameLoad", "value": "bridge_df2"}, {"type": "keyword", "children": [39], "value": "on"}, {"type": "ListLoad", "children": [40]}, {"type": "Str", "value": "Ad_Issue"}, {"type": "keyword", "children": [42], "value": "how"}, {"type": "Str", "value": "inner"}, {"type": "Expr", "children": [44]}, {"type": "AttributeLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "bridge_both_df"}, {"type": "attr", "value": "columns"}], "stage": null, "id": 344282, "neighbor_cells": [344281], "header": "", "annotation": []}
{"target_lineno": 207, "file": "/projects/bdata/jupyter/target/nb_90187.py", "context": "\nreport_grid = metrics.classification_report(expected_for_grid, predicted_for_grid)\n\nprint('CLASSIFICATION REPORT')\n\nprint(report_grid)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "report_grid"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "classification_report"}, {"type": "NameLoad", "value": "expected_for_grid"}, {"type": "NameLoad", "value": "predicted_for_grid"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 12]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "CLASSIFICATION REPORT"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "report_grid"}], "funcs": ["sklearn.metrics.classification_report", "print", "print"], "neighbor_cells": [1052972], "id": 1052973, "header": "", "annotation": []}
{"funcs": ["os.getcwd"], "file": "/projects/bdata/jupyter/target/nb_546661.py", "target_func": "none_func", "context": "\nos.getcwd()\n", "target_lineno": 25, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "getcwd"}], "stage": null, "id": 516162, "neighbor_cells": [516161], "header": "", "annotation": []}
{"target_lineno": 363, "file": "/projects/bdata/jupyter/target/nb_547560.py", "context": "\nMoocDiscussion('Questions', '3DTI materials and signatures')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "MoocDiscussion"}, {"type": "Str", "value": "Questions"}, {"type": "Str", "value": "3DTI materials and signatures"}], "funcs": ["MoocDiscussion"], "neighbor_cells": [335338], "id": 335339, "header": "", "annotation": []}
{"target_lineno": 105, "file": "/projects/bdata/jupyter/target/nb_348854.py", "context": "\nsid_df = sid_df.drop(['review_desc', 'tokens', 'stemmed'], axis=1)\n\nsid_df.reset_index(inplace=True)\n\nsid_df.tail(1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13, 20]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "sid_df"}, {"type": "Call", "children": [4, 7, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "sid_df"}, {"type": "attr", "value": "drop"}, {"type": "ListLoad", "children": [8, 9, 10]}, {"type": "Str", "value": "review_desc"}, {"type": "Str", "value": "tokens"}, {"type": "Str", "value": "stemmed"}, {"type": "keyword", "value": "axis", "children": [12]}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "sid_df"}, {"type": "attr", "value": "reset_index"}, {"type": "keyword", "value": "inplace", "children": [19]}, {"type": "NameConstant"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "sid_df"}, {"type": "attr", "value": "tail"}, {"type": "Num", "value": "1"}], "funcs": ["pandas.concat.drop.drop", "pandas.concat.drop.reset_index", "pandas.concat.drop.tail"], "neighbor_cells": [239210], "id": 239211, "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_38360.py", "target_func": "none_func", "context": "\ndf.head(12)\n", "target_lineno": 53, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "12"}], "stage": null, "id": 743614, "neighbor_cells": [743613], "header": "", "annotation": []}
{"target_lineno": 622, "file": "/projects/bdata/jupyter/target/nb_757043.py", "context": "\nscipy.linalg.inv((2 * scipy.eye(3)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 8]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "scipy"}, {"type": "attr", "value": "linalg"}, {"type": "attr", "value": "inv"}, {"type": "BinOpMult", "children": [9, 10]}, {"type": "Num", "value": "2"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "scipy"}, {"type": "attr", "value": "eye"}, {"type": "Num", "value": "3"}], "funcs": ["scipy.linalg.inv", "scipy.eye"], "neighbor_cells": [973576], "id": 973577, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_108066.py", "target_func": "none_func", "context": "\n(Y_train.shape, Y_test.shape)\n", "target_lineno": 210, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "TupleLoad", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "Y_train"}, {"type": "attr", "value": "shape"}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "Y_test"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 910582, "neighbor_cells": [910581], "header": "", "annotation": []}
{"target_lineno": 868, "file": "/projects/bdata/jupyter/target/nb_203610.py", "context": "\nlog_clf.fit(x_training, y_training)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "log_clf"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "x_training"}, {"type": "NameLoad", "value": "y_training"}], "funcs": ["sklearn.linear_model.LogisticRegression.fit"], "neighbor_cells": [752217], "id": 752218, "header": "", "annotation": [" As with many other scikit learn tools we use a combination of fit and predict methods "]}
{"target_lineno": 217, "file": "/projects/bdata/jupyter/target/nb_700143.py", "context": "\nplt.imshow(im)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "NameLoad", "value": "im"}], "funcs": ["matplotlib.pyplot.imshow"], "neighbor_cells": [849337], "id": 849338, "header": "", "annotation": []}
{"target_lineno": 272, "file": "/projects/bdata/jupyter/target/nb_108952.py", "context": "\ndf_train.loc[((df_train['HasBsmt'] == 1), 'TotalBsmtSF')] = np.log(df_train['TotalBsmtSF'])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 15]}, {"type": "SubscriptStore", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df_train"}, {"type": "attr", "value": "loc"}, {"type": "Index", "children": [7]}, {"type": "TupleLoad", "children": [8, 14]}, {"type": "CompareEq", "children": [9, 13]}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "df_train"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "HasBsmt"}, {"type": "Num", "value": "1"}, {"type": "Str", "value": "TotalBsmtSF"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "log"}, {"type": "SubscriptLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "df_train"}, {"type": "Index", "children": [22]}, {"type": "Str", "value": "TotalBsmtSF"}], "funcs": ["numpy.log"], "neighbor_cells": [709213], "id": 709214, "header": "", "annotation": []}
{"target_lineno": 134, "file": "/projects/bdata/jupyter/target/nb_754317.py", "context": "\narr = np.array([[3, 2], [6, 4]])\n\nlinalg.inv(arr)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "arr"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [8, 11]}, {"type": "ListLoad", "children": [9, 10]}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "2"}, {"type": "ListLoad", "children": [12, 13]}, {"type": "Num", "value": "6"}, {"type": "Num", "value": "4"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "linalg"}, {"type": "attr", "value": "inv"}, {"type": "NameLoad", "value": "arr"}], "funcs": ["numpy.array", "scipy.linalg.inv"], "neighbor_cells": [952446], "id": 952447, "header": "", "annotation": [" ", " nbsp nbsp nbsp nbsp Finally computing the inverse of a singular matrix its determinant is zero will raise LinAlgError ", " "]}
{"target_lineno": 33, "file": "/projects/bdata/jupyter/target/nb_138929.py", "context": "\ntrain.describe()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "describe"}], "funcs": ["pandas.read_csv.describe"], "neighbor_cells": [954758], "id": 954759, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_62318.py", "target_func": "none_func", "context": "\nnormed_traces = workflow_dict['normed_traces']['corrected_rois']\n", "target_lineno": 1041, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "normed_traces"}, {"type": "SubscriptLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "workflow_dict"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "normed_traces"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "corrected_rois"}], "stage": null, "id": 130043, "neighbor_cells": [130042], "header": "", "annotation": []}
{"target_lineno": 291, "file": "/projects/bdata/jupyter/target/nb_844934.py", "context": "\nfrom sklearn.linear_model import LogisticRegression\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "value": "sklearn.linear_model", "children": [2]}, {"type": "alias", "value": "LogisticRegression"}], "funcs": [], "neighbor_cells": [933550], "id": 933551, "header": " 6 HOMEWORK Use scikit learn to replicate the above operations", "annotation": [" 6 HOMEWORK Use scikit learn to replicate the above operations"]}
{"target_lineno": 149, "file": "/projects/bdata/jupyter/target/nb_475654.py", "context": "\nplt.plot(slda['model'].loglikelihoods)\n\nplt.title('Change in log likelihood with number of iterations')\n\nplt.xlabel('Number of iterations')\n\nplt.ylabel('Log Likelihood')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12, 18, 24]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "AttributeLoad", "children": [7, 11]}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "slda"}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "model"}, {"type": "attr", "value": "loglikelihoods"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Change in log likelihood with number of iterations"}, {"type": "Expr", "children": [19]}, {"type": "Call", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "Number of iterations"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Log Likelihood"}], "funcs": ["matplotlib.pyplot.plot", "matplotlib.pyplot.title", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel"], "neighbor_cells": [910228], "id": 910229, "header": "", "annotation": []}
{"target_lineno": 553, "file": "/projects/bdata/jupyter/target/nb_201040.py", "context": "\nX_train.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "X_train"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [858715], "id": 858716, "header": "", "annotation": []}
{"target_lineno": 30, "file": "/projects/bdata/jupyter/target/nb_2782.py", "context": "\ndata.tail()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "tail"}], "funcs": ["tail"], "neighbor_cells": [290880], "id": 290881, "header": "", "annotation": [" 2 Let s take a look at this DataFrame "]}
{"target_lineno": 43, "file": "/projects/bdata/jupyter/target/nb_510395.py", "context": "\ntrain.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.head"], "neighbor_cells": [1116942], "id": 1116943, "header": " Data Explore", "annotation": [" Data Explore"]}
{"funcs": ["value_counts"], "file": "/projects/bdata/jupyter/target/nb_988659.py", "target_func": "none_func", "context": "\nloan_approval = train['Loan_Status'].value_counts()['Y']\n\nprint ('%d number of loans were approved.' % loan_approval)\n", "target_lineno": 72, "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "loan_approval"}, {"type": "SubscriptLoad", "children": [4, 11]}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 10]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "train"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "Loan_Status"}, {"type": "attr", "value": "value_counts"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "Y"}, {"type": "Print", "children": [14]}, {"type": "BinOpMod", "children": [15, 16]}, {"type": "Str", "value": "%d number of loans were approved."}, {"type": "NameLoad", "value": "loan_approval"}], "stage": null, "id": 1100623, "neighbor_cells": [1100622], "header": " Understanding distribution of categorical variables", "annotation": [" Understanding distribution of categorical variables"]}
{"target_lineno": 818, "file": "/projects/bdata/jupyter/target/nb_616448.py", "context": "\nprint(res_store[14][2].summary())\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 13]}, {"type": "SubscriptLoad", "children": [7, 11]}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "res_store"}, {"type": "Index", "children": [10]}, {"type": "Num", "value": "14"}, {"type": "Index", "children": [12]}, {"type": "Num", "value": "2"}, {"type": "attr", "value": "summary"}], "funcs": ["print", "summary"], "neighbor_cells": [572236], "id": 572237, "header": "", "annotation": []}
{"target_lineno": 28, "file": "/projects/bdata/jupyter/target/nb_568490.py", "context": "\nfrom transformers import ResampleImages, NormalizeImages\n\ncrop = NormalizeImages(capture_percentage=0.8)\n\nresize = ResampleImages(64)\n\ncropped = crop.fit_transform(train_x, train_y)\n\nresized = resize.fit_transform(cropped, train_y)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 10, 15, 23]}, {"type": "ImportFrom", "value": "transformers", "children": [2, 3]}, {"type": "alias", "value": "ResampleImages"}, {"type": "alias", "value": "NormalizeImages"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "crop"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "NormalizeImages"}, {"type": "keyword", "value": "capture_percentage", "children": [9]}, {"type": "Num", "value": "0.8"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "resize"}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "ResampleImages"}, {"type": "Num", "value": "64"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "cropped"}, {"type": "Call", "children": [18, 21, 22]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "crop"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "train_x"}, {"type": "NameLoad", "value": "train_y"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "resized"}, {"type": "Call", "children": [26, 29, 30]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "resize"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "cropped"}, {"type": "NameLoad", "value": "train_y"}], "funcs": ["transformers.NormalizeImages", "transformers.ResampleImages", "transformers.NormalizeImages.fit_transform", "transformers.ResampleImages.fit_transform"], "neighbor_cells": [-1], "id": 330590, "header": "", "annotation": []}
{"target_lineno": 312, "file": "/projects/bdata/jupyter/target/nb_116682.py", "context": "\ndf_tr['EEG'].describe()\n\nq1 = df_tr['EEG'].describe()['25%']\n\nq3 = df_tr['EEG'].describe()['75%']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 21]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df_tr"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "EEG"}, {"type": "attr", "value": "describe"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "q1"}, {"type": "SubscriptLoad", "children": [12, 19]}, {"type": "Call", "children": [13]}, {"type": "AttributeLoad", "children": [14, 18]}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "df_tr"}, {"type": "Index", "children": [17]}, {"type": "Str", "value": "EEG"}, {"type": "attr", "value": "describe"}, {"type": "Index", "children": [20]}, {"type": "Str", "value": "25%"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "q3"}, {"type": "SubscriptLoad", "children": [24, 31]}, {"type": "Call", "children": [25]}, {"type": "AttributeLoad", "children": [26, 30]}, {"type": "SubscriptLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "df_tr"}, {"type": "Index", "children": [29]}, {"type": "Str", "value": "EEG"}, {"type": "attr", "value": "describe"}, {"type": "Index", "children": [32]}, {"type": "Str", "value": "75%"}], "funcs": ["describe", "describe", "describe"], "neighbor_cells": [508514], "id": 508515, "header": "", "annotation": []}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_807624.py", "target_func": "none_func", "context": "\nget_ipython().magic(u'matplotlib inline')\n", "target_lineno": 6, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "stage": null, "id": 630962, "neighbor_cells": [-1], "header": "", "annotation": [" coding utf 8", " noindent Erwann Rault ", " Centre Oscar Lambret Lille "]}
{"target_lineno": 63, "file": "/projects/bdata/jupyter/target/nb_221013.py", "context": "\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer = CountVectorizer(min_df=1)\n\nX_train = vectorizer.fit_transform(posts)\n\n(num_samples, num_features) = X_train.shape\n\nprint(('#samples: %d, #features: %d' % (num_samples, num_features)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 9, 16, 23]}, {"type": "ImportFrom", "value": "sklearn.feature_extraction.text", "children": [2]}, {"type": "alias", "value": "CountVectorizer"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "vectorizer"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "CountVectorizer"}, {"type": "keyword", "value": "min_df", "children": [8]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "X_train"}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "vectorizer"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "posts"}, {"type": "Assign", "children": [17, 20]}, {"type": "TupleStore", "children": [18, 19]}, {"type": "NameStore", "value": "num_samples"}, {"type": "NameStore", "value": "num_features"}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "X_train"}, {"type": "attr", "value": "shape"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [27, 28]}, {"type": "Str", "value": "#samples: %d, #features: %d"}, {"type": "TupleLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "num_samples"}, {"type": "NameLoad", "value": "num_features"}], "funcs": ["sklearn.feature_extraction.text.CountVectorizer", "sklearn.feature_extraction.text.CountVectorizer.fit_transform", "print"], "neighbor_cells": [146703], "id": 146704, "header": "", "annotation": []}
{"target_lineno": 151, "file": "/projects/bdata/jupyter/target/nb_892494.py", "context": "\nget_ipython().magic('matplotlib inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [1040329], "id": 1040330, "header": "", "annotation": []}
{"target_lineno": 604, "file": "/projects/bdata/jupyter/target/nb_909007.py", "context": "\nbatch_norm_model = gen_nn(batch_normalization=True, adam=True)\n\nget_ipython().magic('time aug_base_norm_his = batch_norm_model.fit_generator(datagen.flow(X_train_grey, y_train,                     batch_size=batch_size),                     samples_per_epoch=X_train_grey.shape[0],                     nb_epoch=nb_epoch,                     callbacks=[early_stop],                     verbose=0,                     validation_data=(X_valid_grey, y_valid))')\n\nscore = batch_norm_model.evaluate(X_test_grey, y_test, verbose=0)\n\nprint(('\\nTest loss: %.3f' % score[0]))\n\nprint(('Test accuracy: %.3f' % score[1]))\n\nplot_validation_history(aug_base_norm_his, './output/fig-nn-val-aug-batch-norm.png')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 16, 26, 35, 44]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "batch_norm_model"}, {"type": "Call", "children": [4, 5, 7]}, {"type": "NameLoad", "value": "gen_nn"}, {"type": "keyword", "value": "batch_normalization", "children": [6]}, {"type": "NameConstant"}, {"type": "keyword", "value": "adam", "children": [8]}, {"type": "NameConstant"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 15]}, {"type": "AttributeLoad", "children": [12, 14]}, {"type": "Call", "children": [13]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "time aug_base_norm_his = batch_norm_model.fit_generator(datagen.flow(X_train_grey, y_train,                     batch_size=batch_size),                     samples_per_epoch=X_train_grey.shape[0],                     nb_epoch=nb_epoch,                     callbacks=[early_stop],                     verbose=0,                     validation_data=(X_valid_grey, y_valid))"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "score"}, {"type": "Call", "children": [19, 22, 23, 24]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "batch_norm_model"}, {"type": "attr", "value": "evaluate"}, {"type": "NameLoad", "value": "X_test_grey"}, {"type": "NameLoad", "value": "y_test"}, {"type": "keyword", "value": "verbose", "children": [25]}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 29]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [30, 31]}, {"type": "Str", "value": "\nTest loss: %.3f"}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "score"}, {"type": "Index", "children": [34]}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [36]}, {"type": "Call", "children": [37, 38]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [39, 40]}, {"type": "Str", "value": "Test accuracy: %.3f"}, {"type": "SubscriptLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "score"}, {"type": "Index", "children": [43]}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [45]}, {"type": "Call", "children": [46, 47, 48]}, {"type": "NameLoad", "value": "plot_validation_history"}, {"type": "NameLoad", "value": "aug_base_norm_his"}, {"type": "Str", "value": "./output/fig-nn-val-aug-batch-norm.png"}], "funcs": ["gen_nn", "get_ipython.magic", "get_ipython", "gen_nn.evaluate", "print", "print", "plot_validation_history"], "neighbor_cells": [331461], "id": 331462, "header": " Data Augmentation Batch Normalization", "annotation": [" data generator has a significant effect here ", " Now let s try to combine the differenct methods ", " Data Augmentation Batch Normalization"]}
{"funcs": ["plotSampleLines"], "file": "/projects/bdata/jupyter/target/nb_903732.py", "target_func": "none_func", "context": "\nfor i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]:\n    if (i in [1, 4, 7, 10, 19]):\n        plotSampleLines(muhash[i], sigmahash[i], 6, (x[0:i], y[0:i]))\n", "target_lineno": 292, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 23]}, {"type": "NameStore", "value": "i"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "4"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "6"}, {"type": "Num", "value": "7"}, {"type": "Num", "value": "8"}, {"type": "Num", "value": "9"}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "11"}, {"type": "Num", "value": "12"}, {"type": "Num", "value": "13"}, {"type": "Num", "value": "14"}, {"type": "Num", "value": "15"}, {"type": "Num", "value": "16"}, {"type": "Num", "value": "17"}, {"type": "Num", "value": "18"}, {"type": "Num", "value": "19"}, {"type": "body", "children": [24]}, {"type": "If", "children": [25, 33]}, {"type": "CompareIn", "children": [26, 27]}, {"type": "NameLoad", "value": "i"}, {"type": "ListLoad", "children": [28, 29, 30, 31, 32]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "4"}, {"type": "Num", "value": "7"}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "19"}, {"type": "body", "children": [34]}, {"type": "Expr", "children": [35]}, {"type": "Call", "children": [36, 37, 41, 45, 46]}, {"type": "NameLoad", "value": "plotSampleLines"}, {"type": "SubscriptLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "muhash"}, {"type": "Index", "children": [40]}, {"type": "NameLoad", "value": "i"}, {"type": "SubscriptLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "sigmahash"}, {"type": "Index", "children": [44]}, {"type": "NameLoad", "value": "i"}, {"type": "Num", "value": "6"}, {"type": "TupleLoad", "children": [47, 52]}, {"type": "SubscriptLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "x"}, {"type": "Slice", "children": [50, 51]}, {"type": "Num", "value": "0"}, {"type": "NameLoad", "value": "i"}, {"type": "SubscriptLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "y"}, {"type": "Slice", "children": [55, 56]}, {"type": "Num", "value": "0"}, {"type": "NameLoad", "value": "i"}], "stage": null, "id": 1139876, "neighbor_cells": [1139875], "header": "", "annotation": []}
{"funcs": ["len", "len"], "file": "/projects/bdata/jupyter/target/nb_217234.py", "target_func": "none_func", "context": "\nsize_of_each_vector = X_train_padded_seqs.shape[1]\n\nvocab_size = len(vocab)\n\nno_of_unique_y_labels = len(unique_y_labels)\n", "target_lineno": 181, "nodes": [{"type": "Module", "children": [1, 9, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "size_of_each_vector"}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "X_train_padded_seqs"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [8]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "vocab_size"}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "vocab"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "no_of_unique_y_labels"}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "unique_y_labels"}], "stage": null, "id": 961470, "neighbor_cells": [961469], "header": "", "annotation": []}
{"target_lineno": 183, "file": "/projects/bdata/jupyter/target/nb_758228.py", "context": "\nlm.summary()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "lm"}, {"type": "attr", "value": "summary"}], "funcs": ["statsmodels.formula.api.ols.fit.summary"], "neighbor_cells": [669945], "id": 669946, "header": "", "annotation": []}
{"funcs": ["numpy.var", "numpy.var"], "file": "/projects/bdata/jupyter/target/nb_313087.py", "target_func": "none_func", "context": "\nprint np.var(good_set)\n\nprint np.var(bad_set)\n", "target_lineno": 1943, "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Print", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "var"}, {"type": "NameLoad", "value": "good_set"}, {"type": "Print", "children": [8]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "var"}, {"type": "NameLoad", "value": "bad_set"}], "stage": null, "id": 1014817, "neighbor_cells": [1014816], "header": "", "annotation": [" t test", " ", " First we check if variances are equal "]}
{"target_lineno": 69, "file": "/projects/bdata/jupyter/target/nb_123495.py", "context": "\nfor row in table[:]:\n    [row[i] for i in [8, 12]]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 6]}, {"type": "NameStore", "value": "row"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "table"}, {"type": "Slice"}, {"type": "body", "children": [7]}, {"type": "Expr", "children": [8]}, {"type": "ListComp", "children": [9, 13]}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "row"}, {"type": "Index", "children": [12]}, {"type": "NameLoad", "value": "i"}, {"type": "comprehension", "children": [14, 15]}, {"type": "NameStore", "value": "i"}, {"type": "ListLoad", "children": [16, 17]}, {"type": "Num", "value": "8"}, {"type": "Num", "value": "12"}], "funcs": [], "neighbor_cells": [1322214], "id": 1322215, "header": "", "annotation": []}
{"target_lineno": 96, "file": "/projects/bdata/jupyter/target/nb_218847.py", "context": "\nfor (i, result) in enumerate(results):\n    pyplot.figure()\n    pyplot.imshow((result / numpy.amax(result)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 5, 8]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "i"}, {"type": "NameStore", "value": "result"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "enumerate"}, {"type": "NameLoad", "value": "results"}, {"type": "body", "children": [9, 14]}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "pyplot"}, {"type": "attr", "value": "figure"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "pyplot"}, {"type": "attr", "value": "imshow"}, {"type": "BinOpDiv", "children": [20, 21]}, {"type": "NameLoad", "value": "result"}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "numpy"}, {"type": "attr", "value": "amax"}, {"type": "NameLoad", "value": "result"}], "funcs": ["enumerate", "pyplot.figure", "pyplot.imshow", "numpy.amax"], "neighbor_cells": [872547], "id": 872548, "header": "", "annotation": []}
{"target_lineno": 113, "file": "/projects/bdata/jupyter/target/nb_611943.py", "context": "\neigenPairs = [(np.abs(eigenValues[i]), eigenVectors[:, i]) for i in range(len(eigenValues))]\n\neigenPairs.sort()\n\neigenPairs.reverse()\n\nfor i in eigenPairs:\n    print(i[0])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 26, 31, 36]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "eigenPairs"}, {"type": "ListComp", "children": [4, 19]}, {"type": "TupleLoad", "children": [5, 13]}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "abs"}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "eigenValues"}, {"type": "Index", "children": [12]}, {"type": "NameLoad", "value": "i"}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "eigenVectors"}, {"type": "ExtSlice", "children": [16, 17]}, {"type": "Slice"}, {"type": "Index", "children": [18]}, {"type": "NameLoad", "value": "i"}, {"type": "comprehension", "children": [20, 21]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [22, 23]}, {"type": "NameLoad", "value": "range"}, {"type": "Call", "children": [24, 25]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "eigenValues"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "eigenPairs"}, {"type": "attr", "value": "sort"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "eigenPairs"}, {"type": "attr", "value": "reverse"}, {"type": "For", "children": [37, 38, 39]}, {"type": "NameStore", "value": "i"}, {"type": "NameLoad", "value": "eigenPairs"}, {"type": "body", "children": [40]}, {"type": "Expr", "children": [41]}, {"type": "Call", "children": [42, 43]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "i"}, {"type": "Index", "children": [46]}, {"type": "Num", "value": "0"}], "funcs": ["numpy.abs", "range", "len", "sort", "reverse", "print"], "neighbor_cells": [104488], "id": 104489, "header": "", "annotation": [" To find the principal components find the eigenpairs and sort them from highest to lowest "]}
{"target_lineno": 275, "file": "/projects/bdata/jupyter/target/nb_698230.py", "context": "\ndf['hotel_continent'].describe()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "hotel_continent"}, {"type": "attr", "value": "describe"}], "funcs": ["describe"], "neighbor_cells": [702950], "id": 702951, "header": "", "annotation": []}
{"target_lineno": 41, "file": "/projects/bdata/jupyter/target/nb_293068.py", "context": "\ndf['YEAR'] = df['YEAR'].convert_objects(convert_numeric=True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "YEAR"}, {"type": "Call", "children": [7, 13]}, {"type": "AttributeLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "YEAR"}, {"type": "attr", "value": "convert_objects"}, {"type": "keyword", "value": "convert_numeric", "children": [14]}, {"type": "NameConstant"}], "funcs": ["convert_objects"], "neighbor_cells": [1289864], "id": 1289865, "header": "", "annotation": []}
{"target_lineno": 188, "file": "/projects/bdata/jupyter/target/nb_402055.py", "context": "\nfrom scipy import optimize\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "value": "scipy", "children": [2]}, {"type": "alias", "value": "optimize"}], "funcs": [], "neighbor_cells": [298414], "id": 298415, "header": "", "annotation": [" Numpy fft", " Numpy also has an implrementation of FFT numpy fft http docs scipy org doc numpy reference routines fft html module numpy fft However in general the scipy one should be preferred as it uses more efficient underlying implementataions ", " ", " ", " Optimization and fit Scipy optimize", " ", " Optimization is the problem of finding a numberical solution to a minimization or equality ", " ", " The scipy optimize http docs scipy org doc scipy reference optimize html module scipy optimize module provides useful alorithms for function minimization scalar or multi dimensional curve fitting and root finding "]}
{"target_lineno": 36, "file": "/projects/bdata/jupyter/target/nb_61444.py", "context": "\nx.plot(kind='scatter', x='Sepal_Length', y='Petal_Length')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 8, 10]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "x"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "value": "kind", "children": [7]}, {"type": "Str", "value": "scatter"}, {"type": "keyword", "value": "x", "children": [9]}, {"type": "Str", "value": "Sepal_Length"}, {"type": "keyword", "value": "y", "children": [11]}, {"type": "Str", "value": "Petal_Length"}], "funcs": ["pandas.DataFrame.plot"], "neighbor_cells": [244113], "id": 244114, "header": " Step 2 Plot the data to estimate clusters", "annotation": [" Step 2 Plot the data to estimate clusters"]}
{"funcs": ["numpy.mean"], "file": "/projects/bdata/jupyter/target/nb_520040.py", "target_func": "none_func", "context": "\nmean_over_time = np.mean(patients, 0)\n\nprint mean_over_time\n", "target_lineno": 324, "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mean_over_time"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "NameLoad", "value": "patients"}, {"type": "Num", "value": "0"}, {"type": "Print", "children": [10]}, {"type": "NameLoad", "value": "mean_over_time"}], "stage": null, "id": 1091822, "neighbor_cells": [1091821], "header": "", "annotation": [" A more meaningful statistic is probably the mean white cell count over time across all our patients ", " To get this ", " we simply tell NumPy which axis we want it to sweep over ", " In this case ", " that is axis 0 ", " because that s the one that distinguishes patients from each other "]}
{"target_lineno": 283, "file": "/projects/bdata/jupyter/target/nb_774505.py", "context": "\ngradients = torch.FloatTensor([0.1, 1.0, 0.0001])\n\ny.backward(gradients)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "gradients"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "torch"}, {"type": "attr", "value": "FloatTensor"}, {"type": "ListLoad", "children": [8, 9, 10]}, {"type": "Num", "value": "0.1"}, {"type": "Num", "value": "1.0"}, {"type": "Num", "value": "0.0001"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "y"}, {"type": "attr", "value": "backward"}, {"type": "NameLoad", "value": "gradients"}], "funcs": ["torch.FloatTensor", "backward"], "neighbor_cells": [180614], "id": 180615, "header": "", "annotation": []}
{"target_lineno": 112, "file": "/projects/bdata/jupyter/target/nb_601134.py", "context": "\nlinearconv(201)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "linearconv"}, {"type": "Num", "value": "201"}], "funcs": ["linearconv"], "neighbor_cells": [926628], "id": 926629, "header": "", "annotation": []}
{"funcs": ["plot_pie"], "file": "/projects/bdata/jupyter/target/nb_242771.py", "target_func": "none_func", "context": "\nno = BudgetSv.at[(0, 'Count_FosterYouth')]\n\nyes = BudgetSv.at[(1, 'Count_FosterYouth')]\n\ntitle = 'Foster Youth Proportion: By Budget Service'\n\nplot_pie(no, yes, title)\n", "target_lineno": 808, "nodes": [{"type": "Module", "children": [1, 11, 21, 24]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "no"}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "BudgetSv"}, {"type": "attr", "value": "at"}, {"type": "Index", "children": [8]}, {"type": "TupleLoad", "children": [9, 10]}, {"type": "Num", "value": "0"}, {"type": "Str", "value": "Count_FosterYouth"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "yes"}, {"type": "SubscriptLoad", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "BudgetSv"}, {"type": "attr", "value": "at"}, {"type": "Index", "children": [18]}, {"type": "TupleLoad", "children": [19, 20]}, {"type": "Num", "value": "1"}, {"type": "Str", "value": "Count_FosterYouth"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "title"}, {"type": "Str", "value": "Foster Youth Proportion: By Budget Service"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 27, 28, 29]}, {"type": "NameLoad", "value": "plot_pie"}, {"type": "NameLoad", "value": "no"}, {"type": "NameLoad", "value": "yes"}, {"type": "NameLoad", "value": "title"}], "stage": null, "id": 632952, "neighbor_cells": [632951], "header": "", "annotation": []}
{"target_lineno": 239, "file": "/projects/bdata/jupyter/target/nb_621364.py", "context": "\nClassification = pd.get_dummies(data=MergedMasterData, columns=['CANCELLATION_DESCRIPTION', 'CARRIER'])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "Classification"}, {"type": "Call", "children": [4, 7, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "get_dummies"}, {"type": "keyword", "value": "data", "children": [8]}, {"type": "NameLoad", "value": "MergedMasterData"}, {"type": "keyword", "value": "columns", "children": [10]}, {"type": "ListLoad", "children": [11, 12]}, {"type": "Str", "value": "CANCELLATION_DESCRIPTION"}, {"type": "Str", "value": "CARRIER"}], "funcs": ["pandas.get_dummies"], "neighbor_cells": [1230171], "id": 1230172, "header": " Make dummy variables for Cancellation reason and Carriers to be used in Classification", "annotation": [" Insight 1 Classification for cancelled flights", " We know that a lot of flights get cancelled Given the data set we can see that a lot of flights have been cancelled let s examine the behavioral patterns in the flight cancellations ", " ", " What are the circumstances when the flight is most likely to cancel or in which circumstances the flight are not canceled Let s see ", " Make dummy variables for Cancellation reason and Carriers to be used in Classification"]}
{"target_lineno": 666, "file": "/projects/bdata/jupyter/target/nb_286591.py", "context": "\nbetas_ols = np.dot(np.linalg.inv(np.dot(X_.T, X_)), np.dot(X_.T, y))\n\nbetas_ols\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 29]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "betas_ols"}, {"type": "Call", "children": [4, 7, 21]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "dot"}, {"type": "Call", "children": [8, 13]}, {"type": "AttributeLoad", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "linalg"}, {"type": "attr", "value": "inv"}, {"type": "Call", "children": [14, 17, 20]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "dot"}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "X_"}, {"type": "attr", "value": "T"}, {"type": "NameLoad", "value": "X_"}, {"type": "Call", "children": [22, 25, 28]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "dot"}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "X_"}, {"type": "attr", "value": "T"}, {"type": "NameLoad", "value": "y"}, {"type": "Expr", "children": [30]}, {"type": "NameLoad", "value": "betas_ols"}], "funcs": ["numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.dot"], "neighbor_cells": [424153], "id": 424154, "header": " Using the normal equations", "annotation": [" Using the normal equations"]}
{"target_lineno": 555, "file": "/projects/bdata/jupyter/target/nb_167023.py", "context": "\nchars = sorted(list(set(text)))\n\nprint((('this corpus has ' + str(len(chars))) + ' unique characters'))\n\nprint('and these characters are ')\n\nprint(chars)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10, 22, 26]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "chars"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "sorted"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "list"}, {"type": "Call", "children": [8, 9]}, {"type": "NameLoad", "value": "set"}, {"type": "NameLoad", "value": "text"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpAdd", "children": [14, 21]}, {"type": "BinOpAdd", "children": [15, 16]}, {"type": "Str", "value": "this corpus has "}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "str"}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "chars"}, {"type": "Str", "value": " unique characters"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 25]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "and these characters are "}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 29]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "chars"}], "funcs": ["sorted", "list", "set", "print", "str", "len", "print", "print"], "neighbor_cells": [1122304], "id": 1122305, "header": "", "annotation": [" Looks good ", " 2 4 Wait what kind of problem is text generation again ", " ", " In part 1 of this notebook we used the same pre processing technique the sliding window to produce a set of training input output pairs to tackle the problem of time series prediction by treating the problem as one of regression So what sort of problem do we have here now with text generation Well the time series prediction was a regression problem because the output one value of the time series was a continuous value Here for character by character text generation each output is a single character This isn t a continuous value but a distinct class therefore character by character text generation is a classification problem ", " ", " How many classes are there in the data Well the number of classes is equal to the number of unique characters we have to predict How many of those were there in our dataset again Lets print out the value again "]}
{"funcs": ["get_ipython.run_line_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_391701.py", "target_func": "none_func", "context": "\nimport matplotlib.pyplot as plt\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nimport tensorflow as tf\n\nimport numpy as np\n\nfrom numpy import genfromtxt\n\nfrom scipy import stats\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 4, 12, 15, 18, 20]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [5]}, {"type": "Call", "children": [6, 10, 11]}, {"type": "AttributeLoad", "children": [7, 9]}, {"type": "Call", "children": [8]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Import", "children": [13]}, {"type": "alias", "children": [14], "value": "tensorflow"}, {"type": "identifier", "value": "tf"}, {"type": "Import", "children": [16]}, {"type": "alias", "children": [17], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "children": [19], "value": "numpy"}, {"type": "alias", "value": "genfromtxt"}, {"type": "ImportFrom", "children": [21], "value": "scipy"}, {"type": "alias", "value": "stats"}], "stage": null, "id": 1086346, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"funcs": ["pandas.read_csv", "set", "len", "set.discard", "set.discard"], "file": "/projects/bdata/jupyter/target/nb_980848.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nimport pandas as pd\n\ndata = pd.read_csv('../data/train.csv')\n\nfeature = set(data.columns)\n\nprint len(feature)\n\nfeature.discard('TARGET')\n\nfeature.discard('ID')\n", "target_lineno": 19, "nodes": [{"type": "Module", "children": [1, 4, 7, 14, 21, 25, 31]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "../data/train.csv"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "feature"}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "set"}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "columns"}, {"type": "Print", "children": [22]}, {"type": "Call", "children": [23, 24]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "feature"}, {"type": "Expr", "children": [26]}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "feature"}, {"type": "attr", "value": "discard"}, {"type": "Str", "value": "TARGET"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 36]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "feature"}, {"type": "attr", "value": "discard"}, {"type": "Str", "value": "ID"}], "stage": null, "id": 1082098, "neighbor_cells": [-1], "header": " Load Data", "annotation": [" coding utf 8", " Which customers are happy customers ", " ", " ", " From frontline support teams to C suites customer satisfaction is a key measure of success Unhappy customers don t stick around What s more unhappy customers rarely voice their dissatisfaction before leaving ", " ", " Santander Bank is asking Kagglers to help them identify dissatisfied customers early in their relationship Doing so would allow Santander to take proactive steps to improve a customer s happiness before it s too late ", " ", " In this competition you ll work with hundreds of anonymized features to predict if a customer is satisfied or dissatisfied with their banking experience ", " ", " ", " ", " img https kaggle2 blob core windows net competitions kaggle 4986 media santander custsat red png ", " ", " Load Data"]}
{"target_lineno": 215, "file": "/projects/bdata/jupyter/target/nb_525965.py", "context": "\n(((5.1 + 5.7) + 6.5) / 3)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpDiv", "children": [3, 8]}, {"type": "BinOpAdd", "children": [4, 7]}, {"type": "BinOpAdd", "children": [5, 6]}, {"type": "Num", "value": "5.1"}, {"type": "Num", "value": "5.7"}, {"type": "Num", "value": "6.5"}, {"type": "Num", "value": "3"}], "funcs": [], "neighbor_cells": [303868], "id": 303869, "header": "", "annotation": []}
{"target_lineno": 66, "file": "/projects/bdata/jupyter/target/nb_615286.py", "context": "\niris_setosa = iris[(iris.Name == 'Iris-setosa')]\n\niris_setosa.boxplot(return_type='axes')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "iris_setosa"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "iris"}, {"type": "Index", "children": [6]}, {"type": "CompareEq", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "iris"}, {"type": "attr", "value": "Name"}, {"type": "Str", "value": "Iris-setosa"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "iris_setosa"}, {"type": "attr", "value": "boxplot"}, {"type": "keyword", "value": "return_type", "children": [17]}, {"type": "Str", "value": "axes"}], "funcs": ["boxplot"], "neighbor_cells": [1067403], "id": 1067404, "header": "", "annotation": []}
{"funcs": ["pandas.DataFrame.from_dict.head"], "file": "/projects/bdata/jupyter/target/nb_315172.py", "target_func": "none_func", "context": "\nyelp_js.head(10)\n", "target_lineno": 142, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "yelp_js"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "10"}], "stage": null, "id": 220502, "neighbor_cells": [220501], "header": "", "annotation": []}
{"funcs": ["list"], "file": "/projects/bdata/jupyter/target/nb_949380.py", "target_func": "none_func", "context": "\nposleft = list(minSalaryByPos.index)\n\nprint posleft\n", "target_lineno": 500, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "posleft"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "list"}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "minSalaryByPos"}, {"type": "attr", "value": "index"}, {"type": "Print", "children": [9]}, {"type": "NameLoad", "value": "posleft"}], "stage": null, "id": 253718, "neighbor_cells": [253717], "header": "", "annotation": [" These are the 10 positions "]}
{"funcs": ["random.seed", "visualizePartition", "random.seed", "visualizePartition"], "file": "/projects/bdata/jupyter/target/nb_96536.py", "target_func": "none_func", "context": "\nrandom.seed(2015)\n\nvisualizePartition(weekday_graph, weekday_communities, weekday_pagerank, pos)\n\nrandom.seed(2015)\n\nvisualizePartition(weekend_graph, weekend_communities, weekend_pagerank, pos)\n", "target_lineno": 286, "nodes": [{"type": "Module", "children": [1, 7, 14, 20]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "random"}, {"type": "attr", "value": "seed"}, {"type": "Num", "value": "2015"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 10, 11, 12, 13]}, {"type": "NameLoad", "value": "visualizePartition"}, {"type": "NameLoad", "value": "weekday_graph"}, {"type": "NameLoad", "value": "weekday_communities"}, {"type": "NameLoad", "value": "weekday_pagerank"}, {"type": "NameLoad", "value": "pos"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "random"}, {"type": "attr", "value": "seed"}, {"type": "Num", "value": "2015"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 23, 24, 25, 26]}, {"type": "NameLoad", "value": "visualizePartition"}, {"type": "NameLoad", "value": "weekend_graph"}, {"type": "NameLoad", "value": "weekend_communities"}, {"type": "NameLoad", "value": "weekend_pagerank"}, {"type": "NameLoad", "value": "pos"}], "stage": null, "id": 488669, "neighbor_cells": [488668], "header": "", "annotation": []}
{"target_lineno": 330, "file": "/projects/bdata/jupyter/target/nb_615712.py", "context": "\nfrom sklearn import datasets, linear_model\n\nregr = linear_model.LinearRegression()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "ImportFrom", "value": "sklearn", "children": [2, 3]}, {"type": "alias", "value": "datasets"}, {"type": "alias", "value": "linear_model"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "regr"}, {"type": "Call", "children": [7]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "linear_model"}, {"type": "attr", "value": "LinearRegression"}], "funcs": ["sklearn.linear_model.LinearRegression"], "neighbor_cells": [1021240], "id": 1021241, "header": "", "annotation": []}
{"target_lineno": 84, "file": "/projects/bdata/jupyter/target/nb_887356.py", "context": "\nbias\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "bias"}], "funcs": [], "neighbor_cells": [751551], "id": 751552, "header": "", "annotation": [" Fitting Polynomial Functions", " ", " Here we fit try to fit our sample data with an increasing exponent ", " ", " f x 1 b x n ", " ", " None of these models are quite right because the data is generate from the function", " ", " hat f x 4 5 x 3 x 2 0 1 x 3 ", " ", " So each model is not quite right because one or more terms is missing This will allow us to take a closer look at the bias variance tradeoff ", " ", " Let s start with n 1 2 3 4 "]}
{"target_lineno": 327, "file": "/projects/bdata/jupyter/target/nb_631584.py", "context": "\nqW_CT = ps.queen_from_shapefile(path)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "qW_CT"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "ps"}, {"type": "attr", "value": "queen_from_shapefile"}, {"type": "NameLoad", "value": "path"}], "funcs": ["pysal.queen_from_shapefile"], "neighbor_cells": [1236582], "id": 1236583, "header": "", "annotation": [" Spatial Weights", " Contiguity Queen Weights"]}
{"funcs": ["cPickle.dump", "open"], "file": "/projects/bdata/jupyter/target/nb_188404.py", "target_func": "none_func", "context": "\n\ndef save_dict():\n    pickle.dump(workflow_dict, open(workflowDictPath, 'wb'))\n", "target_lineno": 86, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 5, 16], "value": "save_dict"}, {"type": "arguments", "children": [3, 4]}, {"type": "args"}, {"type": "defaults"}, {"type": "body", "children": [6]}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8, 11, 12]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "dump"}, {"type": "NameLoad", "value": "workflow_dict"}, {"type": "Call", "children": [13, 14, 15]}, {"type": "NameLoad", "value": "open"}, {"type": "NameLoad", "value": "workflowDictPath"}, {"type": "Str", "value": "wb"}, {"type": "decorator_list"}], "stage": null, "id": 833831, "neighbor_cells": [-1], "header": "", "annotation": [" save load"]}
{"target_lineno": 130, "file": "/projects/bdata/jupyter/target/nb_98297.py", "context": "\nimport numpy as np\n\nfor y in [y_train, y_test]:\n    print(np.bincount(y))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "For", "children": [5, 6, 9]}, {"type": "NameStore", "value": "y"}, {"type": "ListLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "y_train"}, {"type": "NameLoad", "value": "y_test"}, {"type": "body", "children": [10]}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "bincount"}, {"type": "NameLoad", "value": "y"}], "funcs": ["print", "numpy.bincount"], "neighbor_cells": [993371], "id": 993372, "header": "", "annotation": []}
{"target_lineno": 563, "file": "/projects/bdata/jupyter/target/nb_495089.py", "context": "\nfrom scipy import optimize\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "value": "scipy", "children": [2]}, {"type": "alias", "value": "optimize"}], "funcs": [], "neighbor_cells": [1183826], "id": 1183827, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_738882.py", "target_func": "none_func", "context": "\ndfcwci.shape\n", "target_lineno": 184, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "dfcwci"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 87903, "neighbor_cells": [87902], "header": "", "annotation": []}
{"target_lineno": 160, "file": "/projects/bdata/jupyter/target/nb_676867.py", "context": "\nget_ipython().run_line_magic('time', 'text_train_all, target_train_all = read_csv(training_csv_file, max_count=200000)')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "time"}, {"type": "Str", "value": "text_train_all, target_train_all = read_csv(training_csv_file, max_count=200000)"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [324833], "id": 324834, "header": "", "annotation": []}
{"funcs": ["librosa.load", "stft", "istft", "IPython.display.Audio"], "file": "/projects/bdata/jupyter/target/nb_515712.py", "target_func": "none_func", "context": "\n(piano, sr) = librosa.load('piano.wav', sr=sr, duration=30)\n\nwindow_size = 10000\n\nhop_size = 5000\n\nsr = 44100\n\ns = stft(piano, window_size, 7500)\n\ni = istft(s, hop_size)\n\nAudio(i, rate=sr)\n", "target_lineno": 264, "nodes": [{"type": "Module", "children": [1, 14, 17, 20, 23, 30, 36]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "piano"}, {"type": "NameStore", "value": "sr"}, {"type": "Call", "children": [6, 9, 10, 12]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "librosa"}, {"type": "attr", "value": "load"}, {"type": "Str", "value": "piano.wav"}, {"type": "keyword", "children": [11], "value": "sr"}, {"type": "NameLoad", "value": "sr"}, {"type": "keyword", "children": [13], "value": "duration"}, {"type": "Num", "value": "30"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "window_size"}, {"type": "Num", "value": "10000"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "hop_size"}, {"type": "Num", "value": "5000"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "sr"}, {"type": "Num", "value": "44100"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "s"}, {"type": "Call", "children": [26, 27, 28, 29]}, {"type": "NameLoad", "value": "stft"}, {"type": "NameLoad", "value": "piano"}, {"type": "NameLoad", "value": "window_size"}, {"type": "Num", "value": "7500"}, {"type": "Assign", "children": [31, 32]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [33, 34, 35]}, {"type": "NameLoad", "value": "istft"}, {"type": "NameLoad", "value": "s"}, {"type": "NameLoad", "value": "hop_size"}, {"type": "Expr", "children": [37]}, {"type": "Call", "children": [38, 39, 40]}, {"type": "NameLoad", "value": "Audio"}, {"type": "NameLoad", "value": "i"}, {"type": "keyword", "children": [41], "value": "rate"}, {"type": "NameLoad", "value": "sr"}], "stage": null, "id": 783450, "neighbor_cells": [-1], "header": " 5 1 point Increase the speed of playback for the file piano wav by 25 but don t change the pitch don t use librosa ", "annotation": [" Manipulating audio", " 5 1 point Increase the speed of playback for the file piano wav by 25 but don t change the pitch don t use librosa "]}
{"funcs": ["sklearn.metrics.confusion_matrix", "numpy.sum", "numpy.sum"], "file": "/projects/bdata/jupyter/target/nb_845142.py", "target_func": "none_func", "context": "\n\ndef average_cost(y, ypred, cost):\n    c = confusion_matrix(y, ypred)\n    score = (np.sum((c * cost)) / np.sum(c))\n    return score\n", "target_lineno": 246, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 8, 32], "value": "average_cost"}, {"type": "arguments", "children": [3, 7]}, {"type": "args", "children": [4, 5, 6]}, {"type": "NameParam", "value": "y"}, {"type": "NameParam", "value": "ypred"}, {"type": "NameParam", "value": "cost"}, {"type": "defaults"}, {"type": "body", "children": [9, 15, 30]}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "c"}, {"type": "Call", "children": [12, 13, 14]}, {"type": "NameLoad", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "ypred"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "score"}, {"type": "BinOpDiv", "children": [18, 25]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sum"}, {"type": "BinOpMult", "children": [23, 24]}, {"type": "NameLoad", "value": "c"}, {"type": "NameLoad", "value": "cost"}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sum"}, {"type": "NameLoad", "value": "c"}, {"type": "Return", "children": [31]}, {"type": "NameLoad", "value": "score"}, {"type": "decorator_list"}], "stage": null, "id": 526085, "neighbor_cells": [526084], "header": "", "annotation": [" We can compute the average cost profit per person using the following formula which calculates the expected value of the per customer loss cost profit ", " ", " begin eqnarray ", " Cost c 1P 1A times p 1P 1A c 1P 0A times p 1P 0A c 0P 1A times p 0P 1A c 0P 0A times p 0P 0A ", " frac TP times c 1P 1A FP times c 1P 0A FN times c 0P 1A TN times c 0P 0A N ", " end eqnarray ", " ", " where N is the total size of the test set 1P is predictions for class 1 or positives 0A is actual values of the negative class in the test set The first formula above just weighs the cost of a combination of observed and predicted with the out of sample probability of the combination occurring The probabilities are estimated by the corresponding confusion matrix on the test set We ll provide a proof of this later in the course for the mathematically inclined or just come bug Rahul at office hour if you cant wait ", " ", " The cost can thus be found by multiplying the cost matrix by the confusion matrix elementwise and dividing by the sum of the elements in the confusion matrix or the test set size ", " ", " We implement this process of finding the average cost per person in the average cost function below "]}
{"target_lineno": 58, "file": "/projects/bdata/jupyter/target/nb_484474.py", "context": "\nloans.describe()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "loans"}, {"type": "attr", "value": "describe"}], "funcs": ["pandas.read_csv.describe"], "neighbor_cells": [1139012], "id": 1139013, "header": "", "annotation": []}
{"funcs": ["sklearn.metrics.confusion_matrix", "numpy.sum", "numpy.sum"], "file": "/projects/bdata/jupyter/target/nb_821762.py", "target_func": "none_func", "context": "\n\ndef average_cost(y, ypred, cost):\n    c = confusion_matrix(y, ypred)\n    score = (np.sum((c * cost)) / np.sum(c))\n    return score\n", "target_lineno": 246, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 8, 32], "value": "average_cost"}, {"type": "arguments", "children": [3, 7]}, {"type": "args", "children": [4, 5, 6]}, {"type": "NameParam", "value": "y"}, {"type": "NameParam", "value": "ypred"}, {"type": "NameParam", "value": "cost"}, {"type": "defaults"}, {"type": "body", "children": [9, 15, 30]}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "c"}, {"type": "Call", "children": [12, 13, 14]}, {"type": "NameLoad", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "ypred"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "score"}, {"type": "BinOpDiv", "children": [18, 25]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sum"}, {"type": "BinOpMult", "children": [23, 24]}, {"type": "NameLoad", "value": "c"}, {"type": "NameLoad", "value": "cost"}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sum"}, {"type": "NameLoad", "value": "c"}, {"type": "Return", "children": [31]}, {"type": "NameLoad", "value": "score"}, {"type": "decorator_list"}], "stage": null, "id": 686418, "neighbor_cells": [686417], "header": "", "annotation": [" We can compute the average cost profit per person using the following formula which calculates the expected value of the per customer loss cost profit ", " ", " begin eqnarray ", " Cost c 1P 1A times p 1P 1A c 1P 0A times p 1P 0A c 0P 1A times p 0P 1A c 0P 0A times p 0P 0A ", " frac TP times c 1P 1A FP times c 1P 0A FN times c 0P 1A TN times c 0P 0A N ", " end eqnarray ", " ", " where N is the total size of the test set 1P is predictions for class 1 or positives 0A is actual values of the negative class in the test set The first formula above just weighs the cost of a combination of observed and predicted with the out of sample probability of the combination occurring The probabilities are estimated by the corresponding confusion matrix on the test set We ll provide a proof of this later in the course for the mathematically inclined or just come bug Rahul at office hour if you cant wait ", " ", " The cost can thus be found by multiplying the cost matrix by the confusion matrix elementwise and dividing by the sum of the elements in the confusion matrix or the test set size ", " ", " We implement this process of finding the average cost per person in the average cost function below "]}
{"funcs": ["pandas.read_csv.click.value_counts"], "file": "/projects/bdata/jupyter/target/nb_360448.py", "target_func": "none_func", "context": "\n((train.click.value_counts()[1] * 1.0) / train.shape[0])\n", "target_lineno": 73, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpDiv", "children": [3, 14]}, {"type": "BinOpMult", "children": [4, 13]}, {"type": "SubscriptLoad", "children": [5, 11]}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "click"}, {"type": "attr", "value": "value_counts"}, {"type": "Index", "children": [12]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1.0"}, {"type": "SubscriptLoad", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [19]}, {"type": "Num", "value": "0"}], "stage": null, "id": 38274, "neighbor_cells": [38273], "header": "", "annotation": []}
{"target_lineno": 269, "file": "/projects/bdata/jupyter/target/nb_908246.py", "context": "\nget_ipython().magic('pylab inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "pylab inline"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [-1], "id": 174763, "header": "", "annotation": []}
{"funcs": ["groupby.size", "groupby"], "file": "/projects/bdata/jupyter/target/nb_442894.py", "target_func": "none_func", "context": "\nglen_H_data_re.groupby('classification').size()\n", "target_lineno": 159, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 9]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "glen_H_data_re"}, {"type": "attr", "value": "groupby"}, {"type": "Str", "value": "classification"}, {"type": "attr", "value": "size"}], "stage": null, "id": 502882, "neighbor_cells": [502881], "header": "", "annotation": []}
{"target_lineno": 121, "file": "/projects/bdata/jupyter/target/nb_898678.py", "context": "\ndf.loc[((df['Zip Code'] == '712-2'), 'Zip Code')] = '51529'\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 15]}, {"type": "SubscriptStore", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "loc"}, {"type": "Index", "children": [7]}, {"type": "TupleLoad", "children": [8, 14]}, {"type": "CompareEq", "children": [9, 13]}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "Zip Code"}, {"type": "Str", "value": "712-2"}, {"type": "Str", "value": "Zip Code"}, {"type": "Str", "value": "51529"}], "funcs": [], "neighbor_cells": [427211], "id": 427212, "header": "", "annotation": []}
{"funcs": ["statsmodels.formula.api.ols", "statsmodels.formula.api.ols.fit.summary", "statsmodels.formula.api.ols.fit"], "file": "/projects/bdata/jupyter/target/nb_681576.py", "target_func": "none_func", "context": "\nmodel = smf.ols(formula='mpg_inv ~ 0 + hp_sqrt + weight', data=train_df)\n\nmodel.fit().summary()\n", "target_lineno": 207, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [4, 7, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "smf"}, {"type": "attr", "value": "ols"}, {"type": "keyword", "children": [8], "value": "formula"}, {"type": "Str", "value": "mpg_inv ~ 0 + hp_sqrt + weight"}, {"type": "keyword", "children": [10], "value": "data"}, {"type": "NameLoad", "value": "train_df"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13]}, {"type": "AttributeLoad", "children": [14, 18]}, {"type": "Call", "children": [15]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "fit"}, {"type": "attr", "value": "summary"}], "stage": null, "id": 320907, "neighbor_cells": [320906], "header": " Use this model", "annotation": [" Use this model"]}
{"target_lineno": 228, "file": "/projects/bdata/jupyter/target/nb_465009.py", "context": "\nfrom sklearn.preprocessing import MinMaxScaler\n\nX = np.asarray(sqr_imgs['scaled_img2'].values.tolist())\n\nX = X.reshape(len(X), 36864)\n\nprint(X.shape)\n\nmin_max_scaler = MinMaxScaler()\n\nX_min_max = min_max_scaler.fit_transform(X)\n\nsqr_imgs['normalized_img'] = [arr.reshape(1, 192, 192) for arr in X_min_max]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 18, 28, 34, 38, 45]}, {"type": "ImportFrom", "value": "sklearn.preprocessing", "children": [2]}, {"type": "alias", "value": "MinMaxScaler"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "asarray"}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 17]}, {"type": "AttributeLoad", "children": [12, 16]}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "sqr_imgs"}, {"type": "Index", "children": [15]}, {"type": "Str", "value": "scaled_img2"}, {"type": "attr", "value": "values"}, {"type": "attr", "value": "tolist"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [21, 24, 27]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "reshape"}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "X"}, {"type": "Num", "value": "36864"}, {"type": "Expr", "children": [29]}, {"type": "Call", "children": [30, 31]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "shape"}, {"type": "Assign", "children": [35, 36]}, {"type": "NameStore", "value": "min_max_scaler"}, {"type": "Call", "children": [37]}, {"type": "NameLoad", "value": "MinMaxScaler"}, {"type": "Assign", "children": [39, 40]}, {"type": "NameStore", "value": "X_min_max"}, {"type": "Call", "children": [41, 44]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "min_max_scaler"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "X"}, {"type": "Assign", "children": [46, 50]}, {"type": "SubscriptStore", "children": [47, 48]}, {"type": "NameLoad", "value": "sqr_imgs"}, {"type": "Index", "children": [49]}, {"type": "Str", "value": "normalized_img"}, {"type": "ListComp", "children": [51, 58]}, {"type": "Call", "children": [52, 55, 56, 57]}, {"type": "AttributeLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "arr"}, {"type": "attr", "value": "reshape"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "192"}, {"type": "Num", "value": "192"}, {"type": "comprehension", "children": [59, 60]}, {"type": "NameStore", "value": "arr"}, {"type": "NameLoad", "value": "X_min_max"}], "funcs": ["numpy.asarray", "values.tolist", "numpy.asarray.reshape.reshape", "len", "print", "sklearn.preprocessing.MinMaxScaler", "sklearn.preprocessing.MinMaxScaler.fit_transform", "arr.reshape"], "neighbor_cells": [816210], "id": 816211, "header": " Normalize dataset", "annotation": [" Normalize dataset"]}
{"target_lineno": 61, "file": "/projects/bdata/jupyter/target/nb_56007.py", "context": "\ncredit_card_dataframe['f_215'].unique()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "credit_card_dataframe"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "f_215"}, {"type": "attr", "value": "unique"}], "funcs": ["unique"], "neighbor_cells": [1261958], "id": 1261959, "header": "", "annotation": []}
{"target_lineno": 109, "file": "/projects/bdata/jupyter/target/nb_545710.py", "context": "\nts['1949-01-01']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "ts"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "1949-01-01"}], "funcs": [], "neighbor_cells": [1012369], "id": 1012370, "header": "", "annotation": [" Accesando objetos de tipo Series", " Podemos accesar los valores de la serie de tiempo usando una fecha como ndice "]}
{"target_lineno": 319, "file": "/projects/bdata/jupyter/target/nb_895541.py", "context": "\nvalue(np.array([[1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1]]), v_test)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 23]}, {"type": "NameLoad", "value": "value"}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [9, 16]}, {"type": "ListLoad", "children": [10, 11, 12, 13, 14, 15]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "ListLoad", "children": [17, 18, 19, 20, 21, 22]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "NameLoad", "value": "v_test"}], "funcs": ["value", "numpy.array"], "neighbor_cells": [1066619], "id": 1066620, "header": "", "annotation": []}
{"funcs": ["matplotlib.pyplot.scatter", "matplotlib.pyplot.scatter"], "file": "/projects/bdata/jupyter/target/nb_519796.py", "target_func": "none_func", "context": "\nplt.scatter(zipdata_lda[((y == 8), 0)], zipdata_lda[((y == 8), 1)], edgecolor='r', facecolor='r')\n\nplt.scatter(zipdata_lda[((y == 1), 0)], zipdata_lda[((y == 1), 1)], edgecolor='b')\n", "target_lineno": 142, "nodes": [{"type": "Module", "children": [1, 26]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 14, 22, 24]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "zipdata_lda"}, {"type": "Index", "children": [9]}, {"type": "TupleLoad", "children": [10, 13]}, {"type": "CompareEq", "children": [11, 12]}, {"type": "NameLoad", "value": "y"}, {"type": "Num", "value": "8"}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "zipdata_lda"}, {"type": "Index", "children": [17]}, {"type": "TupleLoad", "children": [18, 21]}, {"type": "CompareEq", "children": [19, 20]}, {"type": "NameLoad", "value": "y"}, {"type": "Num", "value": "8"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [23], "value": "edgecolor"}, {"type": "Str", "value": "r"}, {"type": "keyword", "children": [25], "value": "facecolor"}, {"type": "Str", "value": "r"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 31, 39, 47]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "zipdata_lda"}, {"type": "Index", "children": [34]}, {"type": "TupleLoad", "children": [35, 38]}, {"type": "CompareEq", "children": [36, 37]}, {"type": "NameLoad", "value": "y"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "zipdata_lda"}, {"type": "Index", "children": [42]}, {"type": "TupleLoad", "children": [43, 46]}, {"type": "CompareEq", "children": [44, 45]}, {"type": "NameLoad", "value": "y"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [48], "value": "edgecolor"}, {"type": "Str", "value": "b"}], "stage": null, "id": 492771, "neighbor_cells": [492770], "header": "", "annotation": []}
{"funcs": ["numpy.all"], "file": "/projects/bdata/jupyter/target/nb_541637.py", "target_func": "none_func", "context": "\nnp.all((Z == Z2))\n", "target_lineno": 140, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "all"}, {"type": "CompareEq", "children": [7, 8]}, {"type": "NameLoad", "value": "Z"}, {"type": "NameLoad", "value": "Z2"}], "stage": null, "id": 212663, "neighbor_cells": [212662], "header": "", "annotation": []}
{"target_lineno": 7, "file": "/projects/bdata/jupyter/target/nb_422404.py", "context": "\nget_ipython().run_line_magic('pylab', 'inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "pylab"}, {"type": "Str", "value": "inline"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 890022, "header": " span style background color FFFF00 Test1B setup In the new model version use NO riparian veg parameter values for segments 1 10 This setting should produce greater energy terms than the old version for Seg 1 10 span ", "annotation": [" usr bin env python", " coding utf 8", " This notebook includes Python scripts used for model tests ", " font color purple Test 1 The model is updated with variable riparian veg parameter from segment to segment font ", " span style background color FFFF00 Test1B setup In the new model version use NO riparian veg parameter values for segments 1 10 This setting should produce greater energy terms than the old version for Seg 1 10 span "]}
{"funcs": ["join.interpolate.join", "join.interpolate.lsi_score.count", "join.interpolate.interpolate", "join.interpolate.interpolate.plot", "join.interpolate.interpolate"], "file": "/projects/bdata/jupyter/target/nb_452149.py", "target_func": "none_func", "context": "\ntest = z_stock\n\ntest = test.join(z_tweets)\n\nprint test.lsi_score.count()\n\ntest = test.interpolate()\n\ntest.interpolate().plot()\n", "target_lineno": 501, "nodes": [{"type": "Module", "children": [1, 4, 11, 18, 24]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "test"}, {"type": "NameLoad", "value": "z_stock"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "test"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "join"}, {"type": "NameLoad", "value": "z_tweets"}, {"type": "Print", "children": [12]}, {"type": "Call", "children": [13]}, {"type": "AttributeLoad", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "lsi_score"}, {"type": "attr", "value": "count"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "test"}, {"type": "Call", "children": [21]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "interpolate"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26]}, {"type": "AttributeLoad", "children": [27, 31]}, {"type": "Call", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "interpolate"}, {"type": "attr", "value": "plot"}], "stage": null, "id": 594591, "neighbor_cells": [594590], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_202999.py", "target_func": "none_func", "context": "\nidx_bySR\n", "target_lineno": 278, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "idx_bySR"}], "stage": null, "id": 660837, "neighbor_cells": [660836], "header": "", "annotation": []}
{"target_lineno": 275, "file": "/projects/bdata/jupyter/target/nb_436802.py", "context": "\nmerged_surveys.plot(kind='bar', ylim=(3.5, 4.2))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 8]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "merged_surveys"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "value": "kind", "children": [7]}, {"type": "Str", "value": "bar"}, {"type": "keyword", "value": "ylim", "children": [9]}, {"type": "TupleLoad", "children": [10, 11]}, {"type": "Num", "value": "3.5"}, {"type": "Num", "value": "4.2"}], "funcs": ["pandas.concat.plot"], "neighbor_cells": [718899], "id": 718900, "header": "", "annotation": [" As you can see only parking has had a consistent material improvement over the years This is in line with the construction of a new terminal which was accompanied by a new parking structure to handle increased traffic "]}
{"target_lineno": 248, "file": "/projects/bdata/jupyter/target/nb_602245.py", "context": "\nlm.predict(X)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "lm"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X"}], "funcs": ["sklearn.linear_model.LinearRegression.predict"], "neighbor_cells": [577155], "id": 577156, "header": "", "annotation": []}
{"target_lineno": 22, "file": "/projects/bdata/jupyter/target/nb_950631.py", "context": "\ntrain.head(10)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "train"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "10"}], "funcs": ["pandas.read_csv.head"], "neighbor_cells": [598529], "id": 598530, "header": "", "annotation": []}
{"target_lineno": 45, "file": "/projects/bdata/jupyter/target/nb_33474.py", "context": "\nLA.norm((model['king'] - model['queen']))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "LA"}, {"type": "attr", "value": "norm"}, {"type": "BinOpSub", "children": [7, 11]}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "model"}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "king"}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "model"}, {"type": "Index", "children": [14]}, {"type": "Str", "value": "queen"}], "funcs": ["numpy.linalg.norm"], "neighbor_cells": [137298], "id": 137299, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_449122.py", "target_func": "none_func", "context": "\nimport xgboost as xgb\n\nfrom xgboost.sklearn import XGBRegressor\n", "target_lineno": 531, "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "xgboost"}, {"type": "identifier", "value": "xgb"}, {"type": "ImportFrom", "children": [5], "value": "xgboost.sklearn"}, {"type": "alias", "value": "XGBRegressor"}], "stage": null, "id": 171954, "neighbor_cells": [171953], "header": " Xgboost", "annotation": [" Xgboost"]}
{"target_lineno": 717, "file": "/projects/bdata/jupyter/target/nb_592289.py", "context": "\nroot = '/home/ssnazrul/WIFIRE/ResNet50_Analysis/WIFIRE_Engineered/'\n\nimage_features = pd.read_csv((root + 'WIFIRE_fc1000_engineered_features.csv'), delimiter=',', header=None)\n\ndf = pd.read_csv((root + 'WIFIRE_labels.csv'))\n\nlabels = df.Labels.values\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 17, 26]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "root"}, {"type": "Str", "value": "/home/ssnazrul/WIFIRE/ResNet50_Analysis/WIFIRE_Engineered/"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "image_features"}, {"type": "Call", "children": [7, 10, 13, 15]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "BinOpAdd", "children": [11, 12]}, {"type": "NameLoad", "value": "root"}, {"type": "Str", "value": "WIFIRE_fc1000_engineered_features.csv"}, {"type": "keyword", "value": "delimiter", "children": [14]}, {"type": "Str", "value": ","}, {"type": "keyword", "value": "header", "children": [16]}, {"type": "NameConstant"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "BinOpAdd", "children": [24, 25]}, {"type": "NameLoad", "value": "root"}, {"type": "Str", "value": "WIFIRE_labels.csv"}, {"type": "Assign", "children": [27, 28]}, {"type": "NameStore", "value": "labels"}, {"type": "AttributeLoad", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "Labels"}, {"type": "attr", "value": "values"}], "funcs": ["pandas.read_csv", "pandas.read_csv"], "neighbor_cells": [895114], "id": 895115, "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.cross_validation.cross_val_score", "numpy.mean", "numpy.array", "zip", "numpy.ravel"], "file": "/projects/bdata/jupyter/target/nb_637245.py", "target_func": "none_func", "context": "\nlr = LogisticRegression()\n\nlr.fit(X_willing, Y_willing)\n\nlr_scores = (- cross_val_score(lr, X_willing, Y_willing, scoring='mean_squared_error', cv=10))\n\nprint 'Average Cross Validation Accuracy: \\n', (1 - np.mean(lr_scores))\n\nprint 'Cross Validation Accuracies by Fold: \\n', (1 - np.array(lr_scores))\n\nprint 'Coefficients: \\n'\n\nzip(param, np.ravel(lr.coef_))\n", "target_lineno": 667, "nodes": [{"type": "Module", "children": [1, 5, 12, 24, 33, 42, 44]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "lr"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "LogisticRegression"}, {"type": "Expr", "children": [6]}, {"type": "Call", "children": [7, 10, 11]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_willing"}, {"type": "NameLoad", "value": "Y_willing"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "lr_scores"}, {"type": "UnaryOpUSub", "children": [15]}, {"type": "Call", "children": [16, 17, 18, 19, 20, 22]}, {"type": "NameLoad", "value": "cross_val_score"}, {"type": "NameLoad", "value": "lr"}, {"type": "NameLoad", "value": "X_willing"}, {"type": "NameLoad", "value": "Y_willing"}, {"type": "keyword", "children": [21], "value": "scoring"}, {"type": "Str", "value": "mean_squared_error"}, {"type": "keyword", "children": [23], "value": "cv"}, {"type": "Num", "value": "10"}, {"type": "Print", "children": [25, 26]}, {"type": "Str", "value": "Average Cross Validation Accuracy: \n"}, {"type": "BinOpSub", "children": [27, 28]}, {"type": "Num", "value": "1"}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "NameLoad", "value": "lr_scores"}, {"type": "Print", "children": [34, 35]}, {"type": "Str", "value": "Cross Validation Accuracies by Fold: \n"}, {"type": "BinOpSub", "children": [36, 37]}, {"type": "Num", "value": "1"}, {"type": "Call", "children": [38, 41]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "NameLoad", "value": "lr_scores"}, {"type": "Print", "children": [43]}, {"type": "Str", "value": "Coefficients: \n"}, {"type": "Expr", "children": [45]}, {"type": "Call", "children": [46, 47, 48]}, {"type": "NameLoad", "value": "zip"}, {"type": "NameLoad", "value": "param"}, {"type": "Call", "children": [49, 52]}, {"type": "AttributeLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "ravel"}, {"type": "AttributeLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "coef_"}], "stage": null, "id": 39457, "neighbor_cells": [39456], "header": "", "annotation": []}
{"target_lineno": 43, "file": "/projects/bdata/jupyter/target/nb_923913.py", "context": "\narticles = articles[(articles.content != '')]\n\narticles.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "articles"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "articles"}, {"type": "Index", "children": [6]}, {"type": "CompareNotEq", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "articles"}, {"type": "attr", "value": "content"}, {"type": "Str", "value": ""}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "articles"}, {"type": "attr", "value": "head"}], "funcs": ["head"], "neighbor_cells": [988508], "id": 988509, "header": "", "annotation": []}
{"target_lineno": 239, "file": "/projects/bdata/jupyter/target/nb_225927.py", "context": "\nX = df[['color', 'size', 'price']].values\n\ncolor_le = LabelEncoder()\n\nX[:, 0] = color_le.fit_transform(X[:, 0])\n\nX\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12, 16, 33]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "AttributeLoad", "children": [4, 11]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [7]}, {"type": "ListLoad", "children": [8, 9, 10]}, {"type": "Str", "value": "color"}, {"type": "Str", "value": "size"}, {"type": "Str", "value": "price"}, {"type": "attr", "value": "values"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "color_le"}, {"type": "Call", "children": [15]}, {"type": "NameLoad", "value": "LabelEncoder"}, {"type": "Assign", "children": [17, 23]}, {"type": "SubscriptStore", "children": [18, 19]}, {"type": "NameLoad", "value": "X"}, {"type": "ExtSlice", "children": [20, 21]}, {"type": "Slice"}, {"type": "Index", "children": [22]}, {"type": "Num", "value": "0"}, {"type": "Call", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "color_le"}, {"type": "attr", "value": "fit_transform"}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "X"}, {"type": "ExtSlice", "children": [30, 31]}, {"type": "Slice"}, {"type": "Index", "children": [32]}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [34]}, {"type": "NameLoad", "value": "X"}], "funcs": ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit_transform"], "neighbor_cells": [395541], "id": 395542, "header": " Performing one hot encoding on nominal features", "annotation": [" br ", " br ", " Performing one hot encoding on nominal features"]}
{"target_lineno": 254, "file": "/projects/bdata/jupyter/target/nb_660714.py", "context": "\nplt.scatter(X[:, 0], X[:, 1], c=Z, edgecolors='k', cmap=plt.cm.Paired)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 12, 18, 20, 22]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "X"}, {"type": "ExtSlice", "children": [9, 10]}, {"type": "Slice"}, {"type": "Index", "children": [11]}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "X"}, {"type": "ExtSlice", "children": [15, 16]}, {"type": "Slice"}, {"type": "Index", "children": [17]}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "c", "children": [19]}, {"type": "NameLoad", "value": "Z"}, {"type": "keyword", "value": "edgecolors", "children": [21]}, {"type": "Str", "value": "k"}, {"type": "keyword", "value": "cmap", "children": [23]}, {"type": "AttributeLoad", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "cm"}, {"type": "attr", "value": "Paired"}], "funcs": ["matplotlib.pyplot.scatter"], "neighbor_cells": [781718], "id": 781719, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_451240.py", "target_func": "none_func", "context": "\nprint wvl_vis.shape\n\nprint r2_vis[500, :].shape\n\nprint wvl_nir.shape\n\nprint r2_nir[500, :].shape\n", "target_lineno": 632, "nodes": [{"type": "Module", "children": [1, 5, 14, 18]}, {"type": "Print", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "wvl_vis"}, {"type": "attr", "value": "shape"}, {"type": "Print", "children": [6]}, {"type": "AttributeLoad", "children": [7, 13]}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "r2_vis"}, {"type": "ExtSlice", "children": [10, 12]}, {"type": "Index", "children": [11]}, {"type": "Num", "value": "500"}, {"type": "Slice"}, {"type": "attr", "value": "shape"}, {"type": "Print", "children": [15]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "wvl_nir"}, {"type": "attr", "value": "shape"}, {"type": "Print", "children": [19]}, {"type": "AttributeLoad", "children": [20, 26]}, {"type": "SubscriptLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "r2_nir"}, {"type": "ExtSlice", "children": [23, 25]}, {"type": "Index", "children": [24]}, {"type": "Num", "value": "500"}, {"type": "Slice"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 769704, "neighbor_cells": [769703], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_957844.py", "target_func": "none_func", "context": "\nx = input[0]\n", "target_lineno": 41, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "input"}, {"type": "Index", "children": [6]}, {"type": "Num", "value": "0"}], "stage": null, "id": 939552, "neighbor_cells": [939551], "header": "", "annotation": []}
{"funcs": ["astype", "exec_pd.head"], "file": "/projects/bdata/jupyter/target/nb_410154.py", "target_func": "none_func", "context": "\nmins.columns = ['minutes', 'cnt']\n\nmins['minutes'] = mins['minutes'].astype(float)\n\nmins.head()\n", "target_lineno": 684, "nodes": [{"type": "Module", "children": [1, 8, 21]}, {"type": "Assign", "children": [2, 5]}, {"type": "AttributeStore", "children": [3, 4]}, {"type": "NameLoad", "value": "mins"}, {"type": "attr", "value": "columns"}, {"type": "ListLoad", "children": [6, 7]}, {"type": "Str", "value": "minutes"}, {"type": "Str", "value": "cnt"}, {"type": "Assign", "children": [9, 13]}, {"type": "SubscriptStore", "children": [10, 11]}, {"type": "NameLoad", "value": "mins"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "minutes"}, {"type": "Call", "children": [14, 20]}, {"type": "AttributeLoad", "children": [15, 19]}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "mins"}, {"type": "Index", "children": [18]}, {"type": "Str", "value": "minutes"}, {"type": "attr", "value": "astype"}, {"type": "NameLoad", "value": "float"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "mins"}, {"type": "attr", "value": "head"}], "stage": null, "id": 263706, "neighbor_cells": [263705], "header": "", "annotation": []}
{"funcs": ["sklearn.svm.SVC", "append", "do_cv"], "file": "/projects/bdata/jupyter/target/nb_135456.py", "target_func": "none_func", "context": "\nmodel = SVC(kernel='rbf')\n\nall_scores.append(do_cv(model, X, y, 3))\n", "target_lineno": 124, "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "SVC"}, {"type": "keyword", "children": [6], "value": "kernel"}, {"type": "Str", "value": "rbf"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "all_scores"}, {"type": "attr", "value": "append"}, {"type": "Call", "children": [13, 14, 15, 16, 17]}, {"type": "NameLoad", "value": "do_cv"}, {"type": "NameLoad", "value": "model"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "Num", "value": "3"}], "stage": null, "id": 11776, "neighbor_cells": [11775], "header": "", "annotation": []}
{"target_lineno": 3, "file": "/projects/bdata/jupyter/target/nb_307100.py", "context": "\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pandas", "children": [3]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [6]}, {"type": "identifier", "value": "plt"}], "funcs": [], "neighbor_cells": [-1], "id": 723617, "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"funcs": ["numpy.random.choice", "unique", "isin"], "file": "/projects/bdata/jupyter/target/nb_705772.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nids = np.random.choice(small_train['user_id'].unique(), 100000)\n\nsmall_train = small_train[small_train['user_id'].isin(ids)]\n\nsmall_train.shape\n", "target_lineno": 127, "nodes": [{"type": "Module", "children": [1, 4, 20, 33]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "ids"}, {"type": "Call", "children": [7, 12, 19]}, {"type": "AttributeLoad", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "random"}, {"type": "attr", "value": "choice"}, {"type": "Call", "children": [13]}, {"type": "AttributeLoad", "children": [14, 18]}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "small_train"}, {"type": "Index", "children": [17]}, {"type": "Str", "value": "user_id"}, {"type": "attr", "value": "unique"}, {"type": "Num", "value": "100000"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "small_train"}, {"type": "SubscriptLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "small_train"}, {"type": "Index", "children": [25]}, {"type": "Call", "children": [26, 32]}, {"type": "AttributeLoad", "children": [27, 31]}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "small_train"}, {"type": "Index", "children": [30]}, {"type": "Str", "value": "user_id"}, {"type": "attr", "value": "isin"}, {"type": "NameLoad", "value": "ids"}, {"type": "Expr", "children": [34]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "small_train"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 164235, "neighbor_cells": [164234], "header": "", "annotation": [" I want to select all bookings from 100K random users and use that data for training I want to make sure that I get all of the rows for each user in case they have multiple bookings "]}
{"funcs": ["nltk.text.Text", "nltk.corpus.gutenberg.words", "nltk.text.Text.concordance"], "file": "/projects/bdata/jupyter/target/nb_676241.py", "target_func": "none_func", "context": "\nausten = nltk.text.Text(nltk.corpus.gutenberg.words('austen-sense.txt'))\n\nausten.concordance('monstrous', 55, lines=11)\n", "target_lineno": 293, "nodes": [{"type": "Module", "children": [1, 18]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "austen"}, {"type": "Call", "children": [4, 9]}, {"type": "AttributeLoad", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "nltk"}, {"type": "attr", "value": "text"}, {"type": "attr", "value": "Text"}, {"type": "Call", "children": [10, 17]}, {"type": "AttributeLoad", "children": [11, 16]}, {"type": "AttributeLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "nltk"}, {"type": "attr", "value": "corpus"}, {"type": "attr", "value": "gutenberg"}, {"type": "attr", "value": "words"}, {"type": "Str", "value": "austen-sense.txt"}, {"type": "Expr", "children": [19]}, {"type": "Call", "children": [20, 23, 24, 25]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "austen"}, {"type": "attr", "value": "concordance"}, {"type": "Str", "value": "monstrous"}, {"type": "Num", "value": "55"}, {"type": "keyword", "children": [26], "value": "lines"}, {"type": "Num", "value": "11"}], "stage": null, "id": 1048997, "neighbor_cells": [1048996], "header": "", "annotation": []}
{"funcs": ["sklearn.decomposition.PCA.fit", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit.transform", "pandas.DataFrame"], "file": "/projects/bdata/jupyter/target/nb_624184.py", "target_func": "none_func", "context": "\nX = df\n\npca = decomposition.PCA(n_components=3).fit(X)\n\nX = pca.transform(X)\n\nX = pd.DataFrame({\n    'PC0': X.T[0],\n    'PC1': X.T[1],\n    'PC2': X.T[2],\n})\n", "target_lineno": 169, "nodes": [{"type": "Module", "children": [1, 4, 16, 23]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "NameLoad", "value": "df"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "pca"}, {"type": "Call", "children": [7, 15]}, {"type": "AttributeLoad", "children": [8, 14]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "decomposition"}, {"type": "attr", "value": "PCA"}, {"type": "keyword", "children": [13], "value": "n_components"}, {"type": "Num", "value": "3"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "transform"}, {"type": "NameLoad", "value": "X"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "Dict", "children": [30, 31, 32, 33, 39, 45]}, {"type": "Str", "value": "PC0"}, {"type": "Str", "value": "PC1"}, {"type": "Str", "value": "PC2"}, {"type": "SubscriptLoad", "children": [34, 37]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "T"}, {"type": "Index", "children": [38]}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [40, 43]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "T"}, {"type": "Index", "children": [44]}, {"type": "Num", "value": "1"}, {"type": "SubscriptLoad", "children": [46, 49]}, {"type": "AttributeLoad", "children": [47, 48]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "T"}, {"type": "Index", "children": [50]}, {"type": "Num", "value": "2"}], "stage": null, "id": 994080, "neighbor_cells": [994079], "header": " n components 3 ", "annotation": [" n components 3 "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_482964.py", "target_func": "none_func", "context": "\nprint digits.DESCR\n", "target_lineno": 80, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "digits"}, {"type": "attr", "value": "DESCR"}], "stage": null, "id": 823357, "neighbor_cells": [823356], "header": "", "annotation": [" In reality you won t be creating Bunch types But they come with a lot of useful information to learn for beginners ", " ", " Let s check out the b description b of this dataset for more information "]}
{"funcs": ["matplotlib.pyplot.hist", "numpy.arange", "min", "max"], "file": "/projects/bdata/jupyter/target/nb_90706.py", "target_func": "none_func", "context": "\n_ = plt.hist(train_set.population, bins=np.arange(min(train_set.population), max(train_set.population), 100), normed=True)\n", "target_lineno": 272, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "_"}, {"type": "Call", "children": [4, 7, 10, 26]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "hist"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "train_set"}, {"type": "attr", "value": "population"}, {"type": "keyword", "children": [11], "value": "bins"}, {"type": "Call", "children": [12, 15, 20, 25]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "Call", "children": [16, 17]}, {"type": "NameLoad", "value": "min"}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "train_set"}, {"type": "attr", "value": "population"}, {"type": "Call", "children": [21, 22]}, {"type": "NameLoad", "value": "max"}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "train_set"}, {"type": "attr", "value": "population"}, {"type": "Num", "value": "100"}, {"type": "keyword", "children": [27], "value": "normed"}, {"type": "NameLoad", "value": "True"}], "stage": null, "id": 432348, "neighbor_cells": [432347], "header": "", "annotation": [" We check the population features to see if there are any problems "]}
{"funcs": ["pandas.concat.drop", "pandas.concat.drop"], "file": "/projects/bdata/jupyter/target/nb_581940.py", "target_func": "none_func", "context": "\nSDGE_Electric_df.drop('Combined', axis=1, inplace=True)\n\nSDGE_Electric_df.drop('Year', axis=1, inplace=True)\n\nprint SDGE_Electric_df\n", "target_lineno": 33, "nodes": [{"type": "Module", "children": [1, 11, 21]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "SDGE_Electric_df"}, {"type": "attr", "value": "drop"}, {"type": "Str", "value": "Combined"}, {"type": "keyword", "children": [8], "value": "axis"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [10], "value": "inplace"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16, 17, 19]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "SDGE_Electric_df"}, {"type": "attr", "value": "drop"}, {"type": "Str", "value": "Year"}, {"type": "keyword", "children": [18], "value": "axis"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [20], "value": "inplace"}, {"type": "NameLoad", "value": "True"}, {"type": "Print", "children": [22]}, {"type": "NameLoad", "value": "SDGE_Electric_df"}], "stage": null, "id": 379207, "neighbor_cells": [379206], "header": "", "annotation": []}
{"funcs": ["pandas.get_dummies", "pandas.get_dummies"], "file": "/projects/bdata/jupyter/target/nb_98479.py", "target_func": "none_func", "context": "\ntrain_meta_dummy = pd.get_dummies(train_meta)\n\ntest_meta = test.loc[:, ['M1', 'M2', 'M3', 'M4', 'M5', 'M6']]\n\ntest_meta_dummy = pd.get_dummies(test_meta)\n", "target_lineno": 271, "nodes": [{"type": "Module", "children": [1, 8, 24]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "train_meta_dummy"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "get_dummies"}, {"type": "NameLoad", "value": "train_meta"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "test_meta"}, {"type": "SubscriptLoad", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "test"}, {"type": "attr", "value": "loc"}, {"type": "ExtSlice", "children": [15, 16]}, {"type": "Slice"}, {"type": "Index", "children": [17]}, {"type": "ListLoad", "children": [18, 19, 20, 21, 22, 23]}, {"type": "Str", "value": "M1"}, {"type": "Str", "value": "M2"}, {"type": "Str", "value": "M3"}, {"type": "Str", "value": "M4"}, {"type": "Str", "value": "M5"}, {"type": "Str", "value": "M6"}, {"type": "Assign", "children": [25, 26]}, {"type": "NameStore", "value": "test_meta_dummy"}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "get_dummies"}, {"type": "NameLoad", "value": "test_meta"}], "stage": null, "id": 1056741, "neighbor_cells": [1056740], "header": "", "annotation": []}
{"target_lineno": 328, "file": "/projects/bdata/jupyter/target/nb_292298.py", "context": "\nnx.dijkstra_path_length(fa_relabel, 'CREAM', 'LOSER', weight='weight')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7, 8, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "nx"}, {"type": "attr", "value": "dijkstra_path_length"}, {"type": "NameLoad", "value": "fa_relabel"}, {"type": "Str", "value": "CREAM"}, {"type": "Str", "value": "LOSER"}, {"type": "keyword", "value": "weight", "children": [10]}, {"type": "Str", "value": "weight"}], "funcs": ["networkx.dijkstra_path_length"], "neighbor_cells": [357196], "id": 357197, "header": "", "annotation": []}
{"target_lineno": 187, "file": "/projects/bdata/jupyter/target/nb_828788.py", "context": "\nget_ipython().system('./build/tools/caffe train -solver examples/hdf5_classification/logreg_solver.prototxt')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "system"}, {"type": "Str", "value": "./build/tools/caffe train -solver examples/hdf5_classification/logreg_solver.prototxt"}], "funcs": ["get_ipython.system", "get_ipython"], "neighbor_cells": [1078], "id": 1079, "header": "", "annotation": [" Do the same through the command line interface for detailed output on the model and solving "]}
{"target_lineno": 81, "file": "/projects/bdata/jupyter/target/nb_955128.py", "context": "\nraw_data.info()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "raw_data"}, {"type": "attr", "value": "info"}], "funcs": ["pandas.read_csv.info"], "neighbor_cells": [1027951], "id": 1027952, "header": "", "annotation": []}
{"target_lineno": 462, "file": "/projects/bdata/jupyter/target/nb_293172.py", "context": "\nfrom sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y, y_pred))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "sklearn.metrics", "children": [2]}, {"type": "alias", "value": "confusion_matrix"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 6]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [7, 8, 9]}, {"type": "NameLoad", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "y_pred"}], "funcs": ["print", "sklearn.metrics.confusion_matrix"], "neighbor_cells": [146683], "id": 146684, "header": "", "annotation": [" A more useful way to look at the results is to view the confusion matrix or the matrix showing the frequency of inputs and outputs "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_940392.py", "target_func": "none_func", "context": "\nframe_lists[0]\n", "target_lineno": 246, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "frame_lists"}, {"type": "Index", "children": [5]}, {"type": "Num", "value": "0"}], "stage": null, "id": 838839, "neighbor_cells": [838838], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.corr", "type", "pandas.read_csv.corr", "pandas.read_csv.corr.describe", "pandas.read_csv.corr"], "file": "/projects/bdata/jupyter/target/nb_718713.py", "target_func": "none_func", "context": "\nprint df.corr()\n\nprint type(df.corr())\n\nprint df.corr().describe()\n", "target_lineno": 122, "nodes": [{"type": "Module", "children": [1, 6, 13]}, {"type": "Print", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "corr"}, {"type": "Print", "children": [7]}, {"type": "Call", "children": [8, 9]}, {"type": "NameLoad", "value": "type"}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "corr"}, {"type": "Print", "children": [14]}, {"type": "Call", "children": [15]}, {"type": "AttributeLoad", "children": [16, 20]}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "corr"}, {"type": "attr", "value": "describe"}], "stage": null, "id": 589416, "neighbor_cells": [589415], "header": "", "annotation": []}
{"funcs": ["performance_metric", "format"], "file": "/projects/bdata/jupyter/target/nb_632445.py", "target_func": "none_func", "context": "\nscore = performance_metric([3, (-0.5), 2, 7, 4.2], [2.5, 0.0, 2.1, 7.8, 5.3])\n\nprint 'Model has a coefficient of determination, R^2, of {:.3f}.'.format(score)\n", "target_lineno": 151, "nodes": [{"type": "Module", "children": [1, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "score"}, {"type": "Call", "children": [4, 5, 11]}, {"type": "NameLoad", "value": "performance_metric"}, {"type": "ListLoad", "children": [6, 7, 8, 9, 10]}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "-0.5"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "7"}, {"type": "Num", "value": "4.2"}, {"type": "ListLoad", "children": [12, 13, 14, 15, 16]}, {"type": "Num", "value": "2.5"}, {"type": "Num", "value": "0.0"}, {"type": "Num", "value": "2.1"}, {"type": "Num", "value": "7.8"}, {"type": "Num", "value": "5.3"}, {"type": "Print", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "Str", "value": "Model has a coefficient of determination, R^2, of {:.3f}."}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "score"}], "stage": null, "id": 34555, "neighbor_cells": [34554], "header": "", "annotation": [" Question 2 Goodness of Fit", " Assume that a dataset contains five data points and a model made the following predictions for the target variable ", " ", " True Value Prediction ", " ", " 3 0 2 5 ", " 0 5 0 0 ", " 2 0 2 1 ", " 7 0 7 8 ", " 4 2 5 3 ", " Would you consider this model to have successfully captured the variation of the target variable Why or why not ", " ", " Run the code cell below to use the performance metric function and calculate this model s coefficient of determination "]}
{"funcs": ["seaborn.set"], "file": "/projects/bdata/jupyter/target/nb_812085.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nimport scipy.stats as stats\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\nimport pandas as pd\n\nimport patsy\n\nimport sklearn.linear_model as linear\n\nimport numpy.random as random\n\nsns.set(style='darkgrid')\n", "target_lineno": 15, "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 13, 16, 18, 21, 24]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "scipy.stats"}, {"type": "identifier", "value": "stats"}, {"type": "Import", "children": [8]}, {"type": "alias", "children": [9], "value": "seaborn"}, {"type": "identifier", "value": "sns"}, {"type": "Import", "children": [11]}, {"type": "alias", "children": [12], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [14]}, {"type": "alias", "children": [15], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "patsy"}, {"type": "Import", "children": [19]}, {"type": "alias", "children": [20], "value": "sklearn.linear_model"}, {"type": "identifier", "value": "linear"}, {"type": "Import", "children": [22]}, {"type": "alias", "children": [23], "value": "numpy.random"}, {"type": "identifier", "value": "random"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "set"}, {"type": "keyword", "children": [30], "value": "style"}, {"type": "Str", "value": "darkgrid"}], "stage": null, "id": 362249, "neighbor_cells": [362248], "header": "", "annotation": []}
{"target_lineno": 90, "file": "/projects/bdata/jupyter/target/nb_866928.py", "context": "\nfrom sklearn.preprocessing import scale\n\nX2 = scale(X)\n\nprint(X2[0:5, :])\n\nprint('+++++++++++++')\n\nprint(X2.mean(axis=0))\n\nprint(X2.std(axis=0))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 8, 18, 22, 31]}, {"type": "ImportFrom", "value": "sklearn.preprocessing", "children": [2]}, {"type": "alias", "value": "scale"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "X2"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "scale"}, {"type": "NameLoad", "value": "X"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "X2"}, {"type": "ExtSlice", "children": [14, 17]}, {"type": "Slice", "children": [15, 16]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "5"}, {"type": "Slice"}, {"type": "Expr", "children": [19]}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "+++++++++++++"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 25]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "X2"}, {"type": "attr", "value": "mean"}, {"type": "keyword", "value": "axis", "children": [30]}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [35, 38]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "X2"}, {"type": "attr", "value": "std"}, {"type": "keyword", "value": "axis", "children": [39]}, {"type": "Num", "value": "0"}], "funcs": ["sklearn.preprocessing.scale", "print", "print", "print", "sklearn.preprocessing.scale.mean", "print", "sklearn.preprocessing.scale.std"], "neighbor_cells": [105868], "id": 105869, "header": "", "annotation": [" Feature Standardization", " scale X axis 0 with mean True with std True copy True http scikit learn org stable modules generated sklearn preprocessing scale html sklearn preprocessing scale "]}
{"target_lineno": 137, "file": "/projects/bdata/jupyter/target/nb_100292.py", "context": "\nlen(player1_ts)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "player1_ts"}], "funcs": ["len"], "neighbor_cells": [318933], "id": 318934, "header": "", "annotation": []}
{"target_lineno": 237, "file": "/projects/bdata/jupyter/target/nb_25595.py", "context": "\n(1384 + 1385)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpAdd", "children": [3, 4]}, {"type": "Num", "value": "1384"}, {"type": "Num", "value": "1385"}], "funcs": [], "neighbor_cells": [656365], "id": 656366, "header": "", "annotation": []}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_23169.py", "target_func": "none_func", "context": "\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cross_validation import train_test_split\n\nfrom sklearn.ensemble import GradientBoostingClassifier as GBC\n\nfrom sklearn.metrics import confusion_matrix as conf_mat\n\nfrom sklearn.neighbors import KNeighborsClassifier as knn\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom nltk.tokenize import word_tokenize\n\nfrom sklearn.naive_bayes import BernoulliNB\n\nfrom nltk.corpus import stopwords\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nimport nltk\n\nget_ipython().magic(u'matplotlib inline')\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 12, 15, 18, 21, 23, 25, 27, 29, 31, 33]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "children": [6], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [8]}, {"type": "alias", "children": [9], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "children": [11], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "train_test_split"}, {"type": "ImportFrom", "children": [13], "value": "sklearn.ensemble"}, {"type": "alias", "children": [14], "value": "GradientBoostingClassifier"}, {"type": "identifier", "value": "GBC"}, {"type": "ImportFrom", "children": [16], "value": "sklearn.metrics"}, {"type": "alias", "children": [17], "value": "confusion_matrix"}, {"type": "identifier", "value": "conf_mat"}, {"type": "ImportFrom", "children": [19], "value": "sklearn.neighbors"}, {"type": "alias", "children": [20], "value": "KNeighborsClassifier"}, {"type": "identifier", "value": "knn"}, {"type": "ImportFrom", "children": [22], "value": "sklearn.feature_extraction.text"}, {"type": "alias", "value": "TfidfVectorizer"}, {"type": "ImportFrom", "children": [24], "value": "nltk.tokenize"}, {"type": "alias", "value": "word_tokenize"}, {"type": "ImportFrom", "children": [26], "value": "sklearn.naive_bayes"}, {"type": "alias", "value": "BernoulliNB"}, {"type": "ImportFrom", "children": [28], "value": "nltk.corpus"}, {"type": "alias", "value": "stopwords"}, {"type": "ImportFrom", "children": [30], "value": "sklearn.feature_extraction.text"}, {"type": "alias", "value": "TfidfVectorizer"}, {"type": "Import", "children": [32]}, {"type": "alias", "value": "nltk"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 39]}, {"type": "AttributeLoad", "children": [36, 38]}, {"type": "Call", "children": [37]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "stage": null, "id": 1038278, "neighbor_cells": [-1], "header": "", "annotation": []}
{"target_lineno": 928, "file": "/projects/bdata/jupyter/target/nb_121801.py", "context": "\nplt.imshow(np.sin((x * y)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "sin"}, {"type": "BinOpMult", "children": [11, 12]}, {"type": "NameLoad", "value": "x"}, {"type": "NameLoad", "value": "y"}], "funcs": ["matplotlib.pyplot.imshow", "numpy.sin"], "neighbor_cells": [1337665], "id": 1337666, "header": "", "annotation": []}
{"funcs": ["plot_embedding", "matplotlib.pyplot.show"], "file": "/projects/bdata/jupyter/target/nb_681579.py", "target_func": "none_func", "context": "\nplot_embedding(X_pca, 'X_pca embedding of the digits')\n\nplt.show()\n", "target_lineno": 704, "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "plot_embedding"}, {"type": "NameLoad", "value": "X_pca"}, {"type": "Str", "value": "X_pca embedding of the digits"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "stage": null, "id": 464407, "neighbor_cells": [464406], "header": "", "annotation": []}
{"funcs": ["numpy.array", "sklearn.cross_validation.StratifiedShuffleSplit"], "file": "/projects/bdata/jupyter/target/nb_21181.py", "target_func": "none_func", "context": "\ntarget = np.array((([0] * 5) + ([1] * 5)))\n\nprint target\n\nfor (train_indices, test_indices) in cross_validation.StratifiedShuffleSplit(target, n_iter=4, test_size=0.2):\n    print train_indices, test_indices\n", "target_lineno": 118, "nodes": [{"type": "Module", "children": [1, 16, 18]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "target"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "BinOpAdd", "children": [8, 12]}, {"type": "BinOpMult", "children": [9, 11]}, {"type": "ListLoad", "children": [10]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "5"}, {"type": "BinOpMult", "children": [13, 15]}, {"type": "ListLoad", "children": [14]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "5"}, {"type": "Print", "children": [17]}, {"type": "NameLoad", "value": "target"}, {"type": "For", "children": [19, 22, 31]}, {"type": "TupleStore", "children": [20, 21]}, {"type": "NameStore", "value": "train_indices"}, {"type": "NameStore", "value": "test_indices"}, {"type": "Call", "children": [23, 26, 27, 29]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "cross_validation"}, {"type": "attr", "value": "StratifiedShuffleSplit"}, {"type": "NameLoad", "value": "target"}, {"type": "keyword", "children": [28], "value": "n_iter"}, {"type": "Num", "value": "4"}, {"type": "keyword", "children": [30], "value": "test_size"}, {"type": "Num", "value": "0.2"}, {"type": "body", "children": [32]}, {"type": "Print", "children": [33, 34]}, {"type": "NameLoad", "value": "train_indices"}, {"type": "NameLoad", "value": "test_indices"}], "stage": null, "id": 910168, "neighbor_cells": [910167], "header": " StratifiedShuffleSplit", "annotation": [" StratifiedShuffleSplit"]}
{"target_lineno": 93, "file": "/projects/bdata/jupyter/target/nb_661684.py", "context": "\nsns.pairplot(tips)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "pairplot"}, {"type": "NameLoad", "value": "tips"}], "funcs": ["seaborn.pairplot"], "neighbor_cells": [1156345], "id": 1156346, "header": "", "annotation": [" pairplot", " ", " pairplot will plot pairwise relationships across an entire dataframe for the numerical columns and supports a color hue argument for categorical columns "]}
{"target_lineno": 326, "file": "/projects/bdata/jupyter/target/nb_386248.py", "context": "\nplot_learning_curve(d=1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "plot_learning_curve"}, {"type": "keyword", "value": "d", "children": [5]}, {"type": "Num", "value": "1"}], "funcs": ["plot_learning_curve"], "neighbor_cells": [805714], "id": 805715, "header": "", "annotation": [" Now that we ve defined this function we can plot the learning curve ", " But first take a moment to think about what we re going to see ", " ", " Questions ", " ", " As the number of training samples are increased what do you expect to see for the training error For the validation error ", " Would you expect the training error to be higher or lower than the validation error Would you ever expect this to change ", " ", " We can run the following code to plot the learning curve for a d 1 model "]}
{"target_lineno": 59, "file": "/projects/bdata/jupyter/target/nb_437253.py", "context": "\n(train, test) = train_test_split(data, test_size=0.2)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "train"}, {"type": "NameStore", "value": "test"}, {"type": "Call", "children": [6, 7, 8]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "data"}, {"type": "keyword", "value": "test_size", "children": [9]}, {"type": "Num", "value": "0.2"}], "funcs": ["sklearn.model_selection.train_test_split"], "neighbor_cells": [1188095], "id": 1188096, "header": "", "annotation": []}
{"funcs": ["detnoise_tot", "numpy.sqrt", "detnoise_tot"], "file": "/projects/bdata/jupyter/target/nb_125885.py", "target_func": "none_func", "context": "\ntint = 1000\n\ntg = (tint / (n - 1))\n\nfdark = (tint * dark)\n\nfphot = (electronRatePlanet.value + electronRateBkgd)\n\nf = (fphot + fdark)\n\nprint tg, tf, fdark, fphot, f\n\nprint detnoise_tot(m, n, sigread, tg, tf, f)\n\nprint sqrt(detnoise_tot(m, n, sigread, tg, tf, f)[0])\n", "target_lineno": 174, "nodes": [{"type": "Module", "children": [1, 4, 11, 16, 23, 28, 34, 43]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "tint"}, {"type": "Num", "value": "1000"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "tg"}, {"type": "BinOpDiv", "children": [7, 8]}, {"type": "NameLoad", "value": "tint"}, {"type": "BinOpSub", "children": [9, 10]}, {"type": "NameLoad", "value": "n"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "fdark"}, {"type": "BinOpMult", "children": [14, 15]}, {"type": "NameLoad", "value": "tint"}, {"type": "NameLoad", "value": "dark"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "fphot"}, {"type": "BinOpAdd", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "electronRatePlanet"}, {"type": "attr", "value": "value"}, {"type": "NameLoad", "value": "electronRateBkgd"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "f"}, {"type": "BinOpAdd", "children": [26, 27]}, {"type": "NameLoad", "value": "fphot"}, {"type": "NameLoad", "value": "fdark"}, {"type": "Print", "children": [29, 30, 31, 32, 33]}, {"type": "NameLoad", "value": "tg"}, {"type": "NameLoad", "value": "tf"}, {"type": "NameLoad", "value": "fdark"}, {"type": "NameLoad", "value": "fphot"}, {"type": "NameLoad", "value": "f"}, {"type": "Print", "children": [35]}, {"type": "Call", "children": [36, 37, 38, 39, 40, 41, 42]}, {"type": "NameLoad", "value": "detnoise_tot"}, {"type": "NameLoad", "value": "m"}, {"type": "NameLoad", "value": "n"}, {"type": "NameLoad", "value": "sigread"}, {"type": "NameLoad", "value": "tg"}, {"type": "NameLoad", "value": "tf"}, {"type": "NameLoad", "value": "f"}, {"type": "Print", "children": [44]}, {"type": "Call", "children": [45, 46]}, {"type": "NameLoad", "value": "sqrt"}, {"type": "SubscriptLoad", "children": [47, 55]}, {"type": "Call", "children": [48, 49, 50, 51, 52, 53, 54]}, {"type": "NameLoad", "value": "detnoise_tot"}, {"type": "NameLoad", "value": "m"}, {"type": "NameLoad", "value": "n"}, {"type": "NameLoad", "value": "sigread"}, {"type": "NameLoad", "value": "tg"}, {"type": "NameLoad", "value": "tf"}, {"type": "NameLoad", "value": "f"}, {"type": "Index", "children": [56]}, {"type": "Num", "value": "0"}], "stage": null, "id": 145690, "neighbor_cells": [145689], "header": " Double checking noise calculations", "annotation": [" Double checking noise calculations"]}
{"target_lineno": 189, "file": "/projects/bdata/jupyter/target/nb_445885.py", "context": "\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import accuracy_score\n\nLE = LabelEncoder()\n\nData['salary'] = LE.fit_transform(Data['salary'])\n\nData['sales'] = LE.fit_transform(Data['sales'])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 5, 9, 22]}, {"type": "ImportFrom", "value": "sklearn.preprocessing", "children": [2]}, {"type": "alias", "value": "LabelEncoder"}, {"type": "ImportFrom", "value": "sklearn.metrics", "children": [4]}, {"type": "alias", "value": "accuracy_score"}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "LE"}, {"type": "Call", "children": [8]}, {"type": "NameLoad", "value": "LabelEncoder"}, {"type": "Assign", "children": [10, 14]}, {"type": "SubscriptStore", "children": [11, 12]}, {"type": "NameLoad", "value": "Data"}, {"type": "Index", "children": [13]}, {"type": "Str", "value": "salary"}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "LE"}, {"type": "attr", "value": "fit_transform"}, {"type": "SubscriptLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "Data"}, {"type": "Index", "children": [21]}, {"type": "Str", "value": "salary"}, {"type": "Assign", "children": [23, 27]}, {"type": "SubscriptStore", "children": [24, 25]}, {"type": "NameLoad", "value": "Data"}, {"type": "Index", "children": [26]}, {"type": "Str", "value": "sales"}, {"type": "Call", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "LE"}, {"type": "attr", "value": "fit_transform"}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "Data"}, {"type": "Index", "children": [34]}, {"type": "Str", "value": "sales"}], "funcs": ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit_transform", "sklearn.preprocessing.LabelEncoder.fit_transform"], "neighbor_cells": [475193], "id": 475194, "header": "", "annotation": [" Converting string data to number data", " I have two labels namely sales and salary which are non numbers in other words strings ", " The machine understands numbers and nothing else", " Hence Il use a label encoder imported from the sklearn toolkit "]}
{"target_lineno": 103, "file": "/projects/bdata/jupyter/target/nb_37217.py", "context": "\n\ndef addInTag(X=train_df, name='train'):\n    df = pd.read_csv((('inTag_' + name) + '.csv'))\n    df.index = X.index\n    X['inTag'] = df['inTag']\n    del df\n\naddInTag(train_df, 'train')\n\naddInTag(test_df, 'test')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 40, 45]}, {"type": "FunctionDef", "value": "addInTag", "children": [2, 9, 39]}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults", "children": [7, 8]}, {"type": "NameLoad", "value": "train_df"}, {"type": "Str", "value": "train"}, {"type": "body", "children": [10, 21, 28, 37]}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "BinOpAdd", "children": [17, 20]}, {"type": "BinOpAdd", "children": [18, 19]}, {"type": "Str", "value": "inTag_"}, {"type": "NameLoad", "value": "name"}, {"type": "Str", "value": ".csv"}, {"type": "Assign", "children": [22, 25]}, {"type": "AttributeStore", "children": [23, 24]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "index"}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "index"}, {"type": "Assign", "children": [29, 33]}, {"type": "SubscriptStore", "children": [30, 31]}, {"type": "NameLoad", "value": "X"}, {"type": "Index", "children": [32]}, {"type": "Str", "value": "inTag"}, {"type": "SubscriptLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [36]}, {"type": "Str", "value": "inTag"}, {"type": "Delete", "children": [38]}, {"type": "NameDel", "value": "df"}, {"type": "decorator_list"}, {"type": "Expr", "children": [41]}, {"type": "Call", "children": [42, 43, 44]}, {"type": "NameLoad", "value": "addInTag"}, {"type": "NameLoad", "value": "train_df"}, {"type": "Str", "value": "train"}, {"type": "Expr", "children": [46]}, {"type": "Call", "children": [47, 48, 49]}, {"type": "NameLoad", "value": "addInTag"}, {"type": "NameLoad", "value": "test_df"}, {"type": "Str", "value": "test"}], "funcs": ["pandas.read_csv", "addInTag", "addInTag"], "neighbor_cells": [307557], "id": 307558, "header": "", "annotation": []}
{"funcs": ["as_matrix.astype", "as_matrix", "as_matrix.astype", "as_matrix"], "file": "/projects/bdata/jupyter/target/nb_986225.py", "target_func": "none_func", "context": "\nlabels = labels_frame.as_matrix().astype(np.float32)\n\nvectors = vectors_frame.as_matrix().astype(np.float32)\n", "target_lineno": 47, "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "labels"}, {"type": "Call", "children": [4, 10]}, {"type": "AttributeLoad", "children": [5, 9]}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "labels_frame"}, {"type": "attr", "value": "as_matrix"}, {"type": "attr", "value": "astype"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "float32"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "vectors"}, {"type": "Call", "children": [16, 22]}, {"type": "AttributeLoad", "children": [17, 21]}, {"type": "Call", "children": [18]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "vectors_frame"}, {"type": "attr", "value": "as_matrix"}, {"type": "attr", "value": "astype"}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "float32"}], "stage": null, "id": 538212, "neighbor_cells": [538211], "header": "", "annotation": []}
{"funcs": ["statsmodels.stats.descriptivestats.sign_test"], "file": "/projects/bdata/jupyter/target/nb_526691.py", "target_func": "none_func", "context": "\nprint ('M: %d, p-value: %f' % sign_test(mouses_data, 0.5))\n", "target_lineno": 75, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "BinOpMod", "children": [3, 4]}, {"type": "Str", "value": "M: %d, p-value: %f"}, {"type": "Call", "children": [5, 6, 7]}, {"type": "NameLoad", "value": "sign_test"}, {"type": "NameLoad", "value": "mouses_data"}, {"type": "Num", "value": "0.5"}], "stage": null, "id": 1145612, "neighbor_cells": [1145611], "header": "", "annotation": [" ", " H 0 colon 0 5", " ", " H 1 colon 0 5"]}
{"target_lineno": 133, "file": "/projects/bdata/jupyter/target/nb_830377.py", "context": "\nsb.set(style='white')\n\nplanets = sb.load_dataset('planets')\n\nyears = np.arange(2000, 2015)\n\ng = sb.factorplot('year', data=planets, palette='BuPu', aspect=1.5, x_order=years)\n\ng.set_xticklabels(step=2)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 15, 23, 38]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sb"}, {"type": "attr", "value": "set"}, {"type": "keyword", "value": "style", "children": [7]}, {"type": "Str", "value": "white"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "planets"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "sb"}, {"type": "attr", "value": "load_dataset"}, {"type": "Str", "value": "planets"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "years"}, {"type": "Call", "children": [18, 21, 22]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "Num", "value": "2000"}, {"type": "Num", "value": "2015"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "g"}, {"type": "Call", "children": [26, 29, 30, 32, 34, 36]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "sb"}, {"type": "attr", "value": "factorplot"}, {"type": "Str", "value": "year"}, {"type": "keyword", "value": "data", "children": [31]}, {"type": "NameLoad", "value": "planets"}, {"type": "keyword", "value": "palette", "children": [33]}, {"type": "Str", "value": "BuPu"}, {"type": "keyword", "value": "aspect", "children": [35]}, {"type": "Num", "value": "1.5"}, {"type": "keyword", "value": "x_order", "children": [37]}, {"type": "NameLoad", "value": "years"}, {"type": "Expr", "children": [39]}, {"type": "Call", "children": [40, 43]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "g"}, {"type": "attr", "value": "set_xticklabels"}, {"type": "keyword", "value": "step", "children": [44]}, {"type": "Num", "value": "2"}], "funcs": ["seaborn.set", "seaborn.load_dataset", "numpy.arange", "seaborn.factorplot", "seaborn.factorplot.set_xticklabels"], "neighbor_cells": [865872], "id": 865873, "header": "", "annotation": []}
{"funcs": ["plot_pair"], "file": "/projects/bdata/jupyter/target/nb_188486.py", "target_func": "none_func", "context": "\nplot_pair(['TMIN', 'TMAX'], plot_valid)\n", "target_lineno": 106, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 7]}, {"type": "NameLoad", "value": "plot_pair"}, {"type": "ListLoad", "children": [5, 6]}, {"type": "Str", "value": "TMIN"}, {"type": "Str", "value": "TMAX"}, {"type": "NameLoad", "value": "plot_valid"}], "stage": null, "id": 1054094, "neighbor_cells": [1054093], "header": "", "annotation": []}
{"funcs": ["SST_INT_DEP.dropna.count", "SST_INT_DEP.dropna"], "file": "/projects/bdata/jupyter/target/nb_324961.py", "target_func": "none_func", "context": "\nMGH_Stroop.SST_INT_DEP.dropna().count()\n", "target_lineno": 2013, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 10]}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "MGH_Stroop"}, {"type": "attr", "value": "SST_INT_DEP"}, {"type": "attr", "value": "dropna"}, {"type": "attr", "value": "count"}], "stage": null, "id": 2858, "neighbor_cells": [2857], "header": " Number of subjects with legit Stroop data", "annotation": [" Number of subjects with legit Stroop data"]}
{"target_lineno": 42, "file": "/projects/bdata/jupyter/target/nb_749204.py", "context": "\na = (5.0 / 6.0)\n\nprint(a)\n\nprint(type(a))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "a"}, {"type": "BinOpDiv", "children": [4, 5]}, {"type": "Num", "value": "5.0"}, {"type": "Num", "value": "6.0"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8, 9]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "a"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [14, 15]}, {"type": "NameLoad", "value": "type"}, {"type": "NameLoad", "value": "a"}], "funcs": ["print", "print", "type"], "neighbor_cells": [461702], "id": 461703, "header": "", "annotation": []}
{"funcs": ["sklearn.cross_validation.cross_val_score"], "file": "/projects/bdata/jupyter/target/nb_978933.py", "target_func": "none_func", "context": "\nlr_scoring = cross_validation.cross_val_score(log_regressor, blobs[0], blobs[1], scoring='accuracy', cv=10)\n", "target_lineno": 182, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "lr_scoring"}, {"type": "Call", "children": [4, 7, 8, 12, 16, 18]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "cross_validation"}, {"type": "attr", "value": "cross_val_score"}, {"type": "NameLoad", "value": "log_regressor"}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "blobs"}, {"type": "Index", "children": [11]}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "blobs"}, {"type": "Index", "children": [15]}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [17], "value": "scoring"}, {"type": "Str", "value": "accuracy"}, {"type": "keyword", "children": [19], "value": "cv"}, {"type": "Num", "value": "10"}], "stage": null, "id": 404909, "neighbor_cells": [404908], "header": "", "annotation": []}
{"target_lineno": 121, "file": "/projects/bdata/jupyter/target/nb_922679.py", "context": "\n(fig, ax) = plt.subplots()\n\nax.plot(posterior)\n\n_ = ax.set(xlabel='sample', ylabel='mu')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 15]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "fig"}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "subplots"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "ax"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "posterior"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "_"}, {"type": "Call", "children": [18, 21, 23]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "ax"}, {"type": "attr", "value": "set"}, {"type": "keyword", "value": "xlabel", "children": [22]}, {"type": "Str", "value": "sample"}, {"type": "keyword", "value": "ylabel", "children": [24]}, {"type": "Str", "value": "mu"}], "funcs": ["matplotlib.pyplot.subplots", "matplotlib.pyplot.subplot.plot", "matplotlib.pyplot.subplot.set"], "neighbor_cells": [712516], "id": 712517, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_557211.py", "target_func": "none_func", "context": "\ndb_n = db[(db.FLG_DEF_6M >= 0)]\n\ndb_n.shape\n", "target_lineno": 291, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "db_n"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "db"}, {"type": "Index", "children": [6]}, {"type": "CompareGtE", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "db"}, {"type": "attr", "value": "FLG_DEF_6M"}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [12]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "db_n"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 138280, "neighbor_cells": [138279], "header": " Creazione csv per data viz", "annotation": [" Creazione csv per data viz"]}
{"funcs": ["SQLContext.read.parquet.select.sort.take", "SQLContext.read.parquet.select.sort", "SQLContext.read.parquet.select"], "file": "/projects/bdata/jupyter/target/nb_77599.py", "target_func": "none_func", "context": "\ndf.select('elevation').sort('elevation', ascending=True).take(1)[0]['elevation']\n", "target_lineno": 123, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 21]}, {"type": "SubscriptLoad", "children": [4, 19]}, {"type": "Call", "children": [5, 18]}, {"type": "AttributeLoad", "children": [6, 17]}, {"type": "Call", "children": [7, 14, 15]}, {"type": "AttributeLoad", "children": [8, 13]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "select"}, {"type": "Str", "value": "elevation"}, {"type": "attr", "value": "sort"}, {"type": "Str", "value": "elevation"}, {"type": "keyword", "children": [16], "value": "ascending"}, {"type": "NameLoad", "value": "True"}, {"type": "attr", "value": "take"}, {"type": "Num", "value": "1"}, {"type": "Index", "children": [20]}, {"type": "Num", "value": "0"}, {"type": "Index", "children": [22]}, {"type": "Str", "value": "elevation"}], "stage": null, "id": 593642, "neighbor_cells": [593641], "header": "", "annotation": [" we can see from our data ", " ", " min elevation 1373 1", " ", " max elevation 3507 9", " ", " min latitude 39 1014", " ", " max latitude 39 8227", " ", " min longitude 108 7339", " ", " max longitude 105 1171", " ", " min year 1893", " ", " max year 2012"]}
{"funcs": ["sklearn.cross_validation.cross_val_score"], "file": "/projects/bdata/jupyter/target/nb_510050.py", "target_func": "none_func", "context": "\ncross_val_score(lr, X_test, y_test, cv=12)\n", "target_lineno": 266, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 6, 7]}, {"type": "NameLoad", "value": "cross_val_score"}, {"type": "NameLoad", "value": "lr"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_test"}, {"type": "keyword", "children": [8], "value": "cv"}, {"type": "Num", "value": "12"}], "stage": null, "id": 509132, "neighbor_cells": [509131], "header": "", "annotation": []}
{"target_lineno": 167, "file": "/projects/bdata/jupyter/target/nb_966229.py", "context": "\nmodel_transf.summary()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "model_transf"}, {"type": "attr", "value": "summary"}], "funcs": ["statsmodels.formula.api.ols.fit.summary"], "neighbor_cells": [1208444], "id": 1208445, "header": "", "annotation": []}
{"funcs": ["IPython.display.Image"], "file": "/projects/bdata/jupyter/target/nb_85237.py", "target_func": "none_func", "context": "\nfrom IPython.display import Image\n\nImage(filename='1.png')\n", "target_lineno": 382, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "IPython.display"}, {"type": "alias", "value": "Image"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 6]}, {"type": "NameLoad", "value": "Image"}, {"type": "keyword", "children": [7], "value": "filename"}, {"type": "Str", "value": "1.png"}], "stage": null, "id": 850056, "neighbor_cells": [850055], "header": "", "annotation": [" Tabular Results", " Edit the cell below to see how a table can be designed in Markdown https github com adam p markdown here wiki Markdown Cheatsheet tables You can record your results from above in the tables provided ", " Classifer 1 Gaussian Naive Bayse ", " ", " Training Set Size Training Time Prediction Time test F1 Score train F1 Score test ", " ", " 100 0 0000 0 0000 0 8205 0 8414 ", " 200 0 0000 0 0000 0 8273 0 7656 ", " 300 0 0000 0 0000 0 8049 0 7520 ", " ", " Classifer 2 Decision Tree ", " ", " Training Set Size Training Time Prediction Time test F1 Score train F1 Score test ", " ", " 100 0 0000 0 0000 1 0000 0 6496 ", " 200 0 0150 0 0000 1 0000 0 7656 ", " 300 0 0000 0 0010 1 0000 0 7200 ", " ", " Classifer 3 Support Vector Machine ", " ", " Training Set Size Training Time Prediction Time test F1 Score train F1 Score test ", " ", " 100 0 0160 0 0000 0 9000 0 8143 ", " 200 0 0080 0 0000 0 8816 0 8194 ", " 300 0 0150 0 0090 0 8805 0 8163 ", " Choosing the Best Model", " In this final section you will choose from the three supervised learning models the best model to use on the student data You will then perform a grid search optimization for the model over the entire training set X train and y train by tuning at least one parameter to improve upon the untuned model s F sub 1 sub score ", " Question 3 Choosing the Best Model", " Based on the experiments you performed earlier in one to two paragraphs explain to the board of supervisors what single model you chose as the best model Which model is generally the most appropriate based on the available data limited resources cost and performance ", " Answer ", " ", " The best model is SVM From the table above we can see the decision tree model give us the worst testing F1 score while the training F1 score is 1 This means the decision tree was overfitted in this case due to lots of the features we would like to explore For Gaussian Naive Bayes which has the shortest training and prediction time although it gave us a better score than decision tree it limited its performance not allowing any fine tuning For the SVM it gave us the best F1 scores for both training and testing Also we can tune it to have a better performance Although it has the longest training and prediction time but considering the the absolute value of time does not really hurt in this situation I decided to choose this model ", " Question 4 Model in Layman s Terms", " In one to two paragraphs explain to the board of directors in layman s terms how the final model chosen is supposed to work Be sure that you are describing the major qualities of the model such as how the model is trained and how the model makes a prediction Avoid using advanced mathematical or technical jargon such as describing equations or discussing the algorithm implementation ", " Answer ", " ", " For simplicity a SVM is a method to draw a best line to seperate apart two group of points Figure 1 represent two group of points red and green There are many ways to draw lines to seperate them like line a b and c However line b is the best since it balance the distance from both group of the points Sometimes the groups of points may not be seperated by a line like which is shown in Figure 2 a However if we transfter the position of these points with some function like what is shown in Figure 2 b we are able to draw the line to seperate it ", " Figrue 1 "]}
{"target_lineno": 461, "file": "/projects/bdata/jupyter/target/nb_876595.py", "context": "\nx = solve_image(evaluator, iterations, x)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x"}, {"type": "Call", "children": [4, 5, 6, 7]}, {"type": "NameLoad", "value": "solve_image"}, {"type": "NameLoad", "value": "evaluator"}, {"type": "NameLoad", "value": "iterations"}, {"type": "NameLoad", "value": "x"}], "funcs": ["solve_image"], "neighbor_cells": [1031844], "id": 1031845, "header": "", "annotation": []}
{"target_lineno": 811, "file": "/projects/bdata/jupyter/target/nb_486238.py", "context": "\nprint(SVM_tuned_parameters)\n\nprint(SVM_scores)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 5]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "SVM_tuned_parameters"}, {"type": "Expr", "children": [6]}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "SVM_scores"}], "funcs": ["print", "print"], "neighbor_cells": [251563], "id": 251564, "header": "", "annotation": []}
{"funcs": ["open", "pickle.dump"], "file": "/projects/bdata/jupyter/target/nb_580938.py", "target_func": "none_func", "context": "\nimport pickle\n\nwith open('/Users/jwdebelius/Desktop/iterations.p', 'wb') as f_:\n    pickle.dump(couple_frame, f_)\n", "target_lineno": 313, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pickle"}, {"type": "With", "children": [4, 8, 9]}, {"type": "Call", "children": [5, 6, 7]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "/Users/jwdebelius/Desktop/iterations.p"}, {"type": "Str", "value": "wb"}, {"type": "NameStore", "value": "f_"}, {"type": "body", "children": [10]}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15, 16]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "dump"}, {"type": "NameLoad", "value": "couple_frame"}, {"type": "NameLoad", "value": "f_"}], "stage": null, "id": 699826, "neighbor_cells": [699825], "header": "", "annotation": []}
{"funcs": ["matplotlib.pyplot.hist", "matplotlib.pyplot.title", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.axis"], "file": "/projects/bdata/jupyter/target/nb_233267.py", "target_func": "none_func", "context": "\nplt.hist(tag_numbers, bins=5, color='indigo')\n\nplt.title('Distribution of the Number of Actual Tags Among Queries')\n\nplt.xlabel('Number of Tags')\n\nplt.ylabel('Number of Queries')\n\nplt.axis([0, 5, 0, 50000])\n", "target_lineno": 235, "nodes": [{"type": "Module", "children": [1, 11, 17, 23, 29]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "hist"}, {"type": "NameLoad", "value": "tag_numbers"}, {"type": "keyword", "children": [8], "value": "bins"}, {"type": "Num", "value": "5"}, {"type": "keyword", "children": [10], "value": "color"}, {"type": "Str", "value": "indigo"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Distribution of the Number of Actual Tags Among Queries"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "Number of Tags"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Number of Queries"}, {"type": "Expr", "children": [30]}, {"type": "Call", "children": [31, 34]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "axis"}, {"type": "ListLoad", "children": [35, 36, 37, 38]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "50000"}], "stage": null, "id": 1169008, "neighbor_cells": [1169007], "header": "", "annotation": []}
{"target_lineno": 126, "file": "/projects/bdata/jupyter/target/nb_483879.py", "context": "\nvehicledf = df[(((df.VehicleID == 33210) & (df.AtStop == 1)) & (df.TimeFrame == '2012-11-07'))]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "vehicledf"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [6]}, {"type": "BinOpBitAnd", "children": [7, 18]}, {"type": "BinOpBitAnd", "children": [8, 13]}, {"type": "CompareEq", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "VehicleID"}, {"type": "Num", "value": "33210"}, {"type": "CompareEq", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "AtStop"}, {"type": "Num", "value": "1"}, {"type": "CompareEq", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "TimeFrame"}, {"type": "Str", "value": "2012-11-07"}], "funcs": [], "neighbor_cells": [732163], "id": 732164, "header": "", "annotation": []}
{"target_lineno": 229, "file": "/projects/bdata/jupyter/target/nb_212388.py", "context": "\nsns.jointplot('X', 'Y', dframe, kind='kde')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7, 8, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "jointplot"}, {"type": "Str", "value": "X"}, {"type": "Str", "value": "Y"}, {"type": "NameLoad", "value": "dframe"}, {"type": "keyword", "value": "kind", "children": [10]}, {"type": "Str", "value": "kde"}], "funcs": ["seaborn.jointplot"], "neighbor_cells": [1216059], "id": 1216060, "header": "", "annotation": []}
{"target_lineno": 3, "file": "/projects/bdata/jupyter/target/nb_847776.py", "context": "\nimport data\n\nimport models\n\nimport cache\n\nimport seaborn as sns\n\nimport numpy as np\n\nimport pandas as pd\n\nimport patsy\n\nfrom matplotlib import pyplot as plt\n\nget_ipython().magic('matplotlib inline')\n\nsns.set(context='talk')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 5, 7, 10, 13, 16, 18, 21, 28]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "data"}, {"type": "Import", "children": [4]}, {"type": "alias", "value": "models"}, {"type": "Import", "children": [6]}, {"type": "alias", "value": "cache"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "seaborn", "children": [9]}, {"type": "identifier", "value": "sns"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "numpy", "children": [12]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [14]}, {"type": "alias", "value": "pandas", "children": [15]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "patsy"}, {"type": "ImportFrom", "value": "matplotlib", "children": [19]}, {"type": "alias", "value": "pyplot", "children": [20]}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 27]}, {"type": "AttributeLoad", "children": [24, 26]}, {"type": "Call", "children": [25]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "Expr", "children": [29]}, {"type": "Call", "children": [30, 33]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "set"}, {"type": "keyword", "value": "context", "children": [34]}, {"type": "Str", "value": "talk"}], "funcs": ["get_ipython.magic", "get_ipython", "seaborn.set"], "neighbor_cells": [-1], "id": 1278022, "header": "", "annotation": []}
{"target_lineno": 195, "file": "/projects/bdata/jupyter/target/nb_72153.py", "context": "\nprint(patch[:30])\n\nprint(noisepatch[:30])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "patch"}, {"type": "Slice", "children": [7]}, {"type": "Num", "value": "30"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "noisepatch"}, {"type": "Slice", "children": [14]}, {"type": "Num", "value": "30"}], "funcs": ["print", "print"], "neighbor_cells": [1238714], "id": 1238715, "header": "", "annotation": []}
{"target_lineno": 16, "file": "/projects/bdata/jupyter/target/nb_218034.py", "context": "\ndataframe = pd.read_fwf('brain_body.txt')\n\nx_values = dataframe[['Brain']]\n\ny_values = dataframe[['Body']]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 15]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dataframe"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_fwf"}, {"type": "Str", "value": "brain_body.txt"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "x_values"}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "dataframe"}, {"type": "Index", "children": [13]}, {"type": "ListLoad", "children": [14]}, {"type": "Str", "value": "Brain"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "y_values"}, {"type": "SubscriptLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "dataframe"}, {"type": "Index", "children": [20]}, {"type": "ListLoad", "children": [21]}, {"type": "Str", "value": "Body"}], "funcs": ["pandas.read_fwf"], "neighbor_cells": [922375], "id": 922376, "header": "", "annotation": []}
{"target_lineno": 36, "file": "/projects/bdata/jupyter/target/nb_409027.py", "context": "\nrca_data.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "rca_data"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.head"], "neighbor_cells": [1208305], "id": 1208306, "header": "", "annotation": []}
{"funcs": ["sklearn.preprocessing.OneHotEncoder", "sklearn.preprocessing.OneHotEncoder.fit_transform.todense", "sklearn.preprocessing.OneHotEncoder.fit_transform", "sklearn.preprocessing.OneHotEncoder.fit_transform.todense.reshape.reshape", "sklearn.preprocessing.OneHotEncoder.fit_transform.todense", "sklearn.preprocessing.OneHotEncoder.fit_transform", "sklearn.preprocessing.OneHotEncoder.fit_transform.todense.reshape.reshape"], "file": "/projects/bdata/jupyter/target/nb_926603.py", "target_func": "none_func", "context": "\nfrom sklearn.preprocessing import OneHotEncoder\n\nenc = OneHotEncoder(n_values=10)\n\nyTrain_enc = enc.fit_transform(yTrain).todense()\n\nyTrain_enc = yTrain_enc.reshape((yTrain.shape[0], 10))\n\nyTest_enc = enc.fit_transform(yTest).todense()\n\nyTest_enc = yTest_enc.reshape((yTest.shape[0], 10))\n", "target_lineno": 155, "nodes": [{"type": "Module", "children": [1, 3, 9, 19, 33, 43]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.preprocessing"}, {"type": "alias", "value": "OneHotEncoder"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "enc"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "OneHotEncoder"}, {"type": "keyword", "children": [8], "value": "n_values"}, {"type": "Num", "value": "10"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "yTrain_enc"}, {"type": "Call", "children": [12]}, {"type": "AttributeLoad", "children": [13, 18]}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "enc"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "yTrain"}, {"type": "attr", "value": "todense"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "yTrain_enc"}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "yTrain_enc"}, {"type": "attr", "value": "reshape"}, {"type": "TupleLoad", "children": [26, 32]}, {"type": "SubscriptLoad", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "yTrain"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [31]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "10"}, {"type": "Assign", "children": [34, 35]}, {"type": "NameStore", "value": "yTest_enc"}, {"type": "Call", "children": [36]}, {"type": "AttributeLoad", "children": [37, 42]}, {"type": "Call", "children": [38, 41]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "enc"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "yTest"}, {"type": "attr", "value": "todense"}, {"type": "Assign", "children": [44, 45]}, {"type": "NameStore", "value": "yTest_enc"}, {"type": "Call", "children": [46, 49]}, {"type": "AttributeLoad", "children": [47, 48]}, {"type": "NameLoad", "value": "yTest_enc"}, {"type": "attr", "value": "reshape"}, {"type": "TupleLoad", "children": [50, 56]}, {"type": "SubscriptLoad", "children": [51, 54]}, {"type": "AttributeLoad", "children": [52, 53]}, {"type": "NameLoad", "value": "yTest"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [55]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "10"}], "stage": null, "id": 483848, "neighbor_cells": [483847], "header": "", "annotation": []}
{"target_lineno": 68, "file": "/projects/bdata/jupyter/target/nb_834291.py", "context": "\nlen(test)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "test"}], "funcs": ["len"], "neighbor_cells": [79671], "id": 79672, "header": "", "annotation": []}
{"target_lineno": 70, "file": "/projects/bdata/jupyter/target/nb_383983.py", "context": "\ndata.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.io.stata.read_stata.head"], "neighbor_cells": [1046886], "id": 1046887, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_188419.py", "target_func": "none_func", "context": "\nfrom keras.models import Sequential\n\nfrom keras.datasets import cifar10\n\nfrom keras.layers import Dense, Activation, Flatten\n\nfrom keras.optimizers import SGD, Adadelta, Adagrad, Adam, Adamax, RMSprop, Nadam\n\nfrom keras.utils import np_utils\n\nfrom keras.layers.convolutional import Convolution2D, MaxPooling2D\n\nfrom keras.utils.visualize_util import model_to_dot, plot\n\nfrom keras import backend as K\n\nfrom keras.layers import Input, Dense\n\nfrom keras.models import Model\n\nfrom keras.callbacks import EarlyStopping\n\nimport matplotlib.image as mpimg\n", "target_lineno": 289, "nodes": [{"type": "Module", "children": [1, 3, 5, 9, 17, 19, 22, 25, 28, 31, 33, 35]}, {"type": "ImportFrom", "children": [2], "value": "keras.models"}, {"type": "alias", "value": "Sequential"}, {"type": "ImportFrom", "children": [4], "value": "keras.datasets"}, {"type": "alias", "value": "cifar10"}, {"type": "ImportFrom", "children": [6, 7, 8], "value": "keras.layers"}, {"type": "alias", "value": "Dense"}, {"type": "alias", "value": "Activation"}, {"type": "alias", "value": "Flatten"}, {"type": "ImportFrom", "children": [10, 11, 12, 13, 14, 15, 16], "value": "keras.optimizers"}, {"type": "alias", "value": "SGD"}, {"type": "alias", "value": "Adadelta"}, {"type": "alias", "value": "Adagrad"}, {"type": "alias", "value": "Adam"}, {"type": "alias", "value": "Adamax"}, {"type": "alias", "value": "RMSprop"}, {"type": "alias", "value": "Nadam"}, {"type": "ImportFrom", "children": [18], "value": "keras.utils"}, {"type": "alias", "value": "np_utils"}, {"type": "ImportFrom", "children": [20, 21], "value": "keras.layers.convolutional"}, {"type": "alias", "value": "Convolution2D"}, {"type": "alias", "value": "MaxPooling2D"}, {"type": "ImportFrom", "children": [23, 24], "value": "keras.utils.visualize_util"}, {"type": "alias", "value": "model_to_dot"}, {"type": "alias", "value": "plot"}, {"type": "ImportFrom", "children": [26], "value": "keras"}, {"type": "alias", "children": [27], "value": "backend"}, {"type": "identifier", "value": "K"}, {"type": "ImportFrom", "children": [29, 30], "value": "keras.layers"}, {"type": "alias", "value": "Input"}, {"type": "alias", "value": "Dense"}, {"type": "ImportFrom", "children": [32], "value": "keras.models"}, {"type": "alias", "value": "Model"}, {"type": "ImportFrom", "children": [34], "value": "keras.callbacks"}, {"type": "alias", "value": "EarlyStopping"}, {"type": "Import", "children": [36]}, {"type": "alias", "children": [37], "value": "matplotlib.image"}, {"type": "identifier", "value": "mpimg"}], "stage": null, "id": 275155, "neighbor_cells": [275154], "header": "", "annotation": []}
{"funcs": ["range"], "file": "/projects/bdata/jupyter/target/nb_231211.py", "target_func": "none_func", "context": "\nfor i in range(1, 50):\n    coefficients_list = ([(0.9 / (1.0 + i))] * 50)\n", "target_lineno": 124, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 7]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "50"}, {"type": "body", "children": [8]}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "coefficients_list"}, {"type": "BinOpMult", "children": [11, 17]}, {"type": "ListLoad", "children": [12]}, {"type": "BinOpDiv", "children": [13, 14]}, {"type": "Num", "value": "0.9"}, {"type": "BinOpAdd", "children": [15, 16]}, {"type": "Num", "value": "1.0"}, {"type": "NameLoad", "value": "i"}, {"type": "Num", "value": "50"}], "stage": null, "id": 147495, "neighbor_cells": [147494], "header": " 3", "annotation": [" 3"]}
{"target_lineno": 62, "file": "/projects/bdata/jupyter/target/nb_203310.py", "context": "\norig_df.describe()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "orig_df"}, {"type": "attr", "value": "describe"}], "funcs": ["pandas.read_csv.describe"], "neighbor_cells": [1317572], "id": 1317573, "header": "", "annotation": []}
{"target_lineno": 390, "file": "/projects/bdata/jupyter/target/nb_908977.py", "context": "\naic_dict\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "aic_dict"}], "funcs": [], "neighbor_cells": [432374], "id": 432375, "header": "", "annotation": []}
{"target_lineno": 5, "file": "/projects/bdata/jupyter/target/nb_982177.py", "context": "\nimport pandas as pd\n\nimport numpy as np\n\nfrom sklearn import cluster\n\nfrom sklearn import metrics\n\nfrom sklearn.metrics import pairwise_distances\n\nimport matplotlib.pyplot as plt\n\nimport matplotlib\n\nfrom matplotlib import pyplot\n\nfrom sklearn import datasets\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 9, 11, 13, 16, 18, 20]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pandas", "children": [3]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "numpy", "children": [6]}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "value": "sklearn", "children": [8]}, {"type": "alias", "value": "cluster"}, {"type": "ImportFrom", "value": "sklearn", "children": [10]}, {"type": "alias", "value": "metrics"}, {"type": "ImportFrom", "value": "sklearn.metrics", "children": [12]}, {"type": "alias", "value": "pairwise_distances"}, {"type": "Import", "children": [14]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [15]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "matplotlib"}, {"type": "ImportFrom", "value": "matplotlib", "children": [19]}, {"type": "alias", "value": "pyplot"}, {"type": "ImportFrom", "value": "sklearn", "children": [21]}, {"type": "alias", "value": "datasets"}], "funcs": [], "neighbor_cells": [-1], "id": 186599, "header": "", "annotation": [" coding utf 8", " Let s first setup our imports"]}
{"funcs": ["numpy.log1p"], "file": "/projects/bdata/jupyter/target/nb_800544.py", "target_func": "none_func", "context": "\ny_train_transformed = np.log1p(y_train)\n", "target_lineno": 237, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y_train_transformed"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "log1p"}, {"type": "NameLoad", "value": "y_train"}], "stage": null, "id": 643976, "neighbor_cells": [643975], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_505793.py", "target_func": "none_func", "context": "\nathlete_factors[1][0]\n", "target_lineno": 442, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 7]}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "athlete_factors"}, {"type": "Index", "children": [6]}, {"type": "Num", "value": "1"}, {"type": "Index", "children": [8]}, {"type": "Num", "value": "0"}], "stage": null, "id": 237135, "neighbor_cells": [237134], "header": " Here we verify that indeed 0 maps to Michael Phelps", "annotation": [" Here we verify that indeed 0 maps to Michael Phelps"]}
{"funcs": ["sklearn.cross_validation.train_test_split", "len", "len"], "file": "/projects/bdata/jupyter/target/nb_547192.py", "target_func": "none_func", "context": "\nfrom sklearn.cross_validation import train_test_split\n\n(X_train, X_test, y_train, y_test) = train_test_split(X, Y, test_size=0.2, random_state=0)\n\nX = X_train\n\nY = y_train\n\nnew_data = X_train\n\nnew_test_data = X_test\n\nprint 'Number of training examples', len(X_train)\n\nprint 'Number of validation examples', len(X_test)\n", "target_lineno": 71, "nodes": [{"type": "Module", "children": [1, 3, 17, 20, 23, 26, 29, 34]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "train_test_split"}, {"type": "Assign", "children": [4, 9]}, {"type": "TupleStore", "children": [5, 6, 7, 8]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [10, 11, 12, 13, 15]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "Y"}, {"type": "keyword", "children": [14], "value": "test_size"}, {"type": "Num", "value": "0.2"}, {"type": "keyword", "children": [16], "value": "random_state"}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "X"}, {"type": "NameLoad", "value": "X_train"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "Y"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "new_data"}, {"type": "NameLoad", "value": "X_train"}, {"type": "Assign", "children": [27, 28]}, {"type": "NameStore", "value": "new_test_data"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Print", "children": [30, 31]}, {"type": "Str", "value": "Number of training examples"}, {"type": "Call", "children": [32, 33]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "X_train"}, {"type": "Print", "children": [35, 36]}, {"type": "Str", "value": "Number of validation examples"}, {"type": "Call", "children": [37, 38]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "X_test"}], "stage": null, "id": 584262, "neighbor_cells": [-1], "header": "", "annotation": []}
{"target_lineno": 167, "file": "/projects/bdata/jupyter/target/nb_182599.py", "context": "\n(X_train, X_test, y_train, y_test) = cross_validation.train_test_split(X, y, test_size=0.3)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 7]}, {"type": "TupleStore", "children": [3, 4, 5, 6]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [8, 11, 12, 13]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "cross_validation"}, {"type": "attr", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "value": "test_size", "children": [14]}, {"type": "Num", "value": "0.3"}], "funcs": ["sklearn.cross_validation.train_test_split"], "neighbor_cells": [803044], "id": 803045, "header": "", "annotation": []}
{"target_lineno": 300, "file": "/projects/bdata/jupyter/target/nb_299487.py", "context": "\nlm = Sequential([Dense(2, activation='softmax', input_shape=(1000,))])\n\nlm.compile(optimizer=RMSprop(lr=0.1), loss='categorical_crossentropy', metrics=['accuracy'])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "lm"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "Sequential"}, {"type": "ListLoad", "children": [6]}, {"type": "Call", "children": [7, 8, 9, 11]}, {"type": "NameLoad", "value": "Dense"}, {"type": "Num", "value": "2"}, {"type": "keyword", "value": "activation", "children": [10]}, {"type": "Str", "value": "softmax"}, {"type": "keyword", "value": "input_shape", "children": [12]}, {"type": "TupleLoad", "children": [13]}, {"type": "Num", "value": "1000"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 19, 24, 26]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "lm"}, {"type": "attr", "value": "compile"}, {"type": "keyword", "value": "optimizer", "children": [20]}, {"type": "Call", "children": [21, 22]}, {"type": "NameLoad", "value": "RMSprop"}, {"type": "keyword", "value": "lr", "children": [23]}, {"type": "Num", "value": "0.1"}, {"type": "keyword", "value": "loss", "children": [25]}, {"type": "Str", "value": "categorical_crossentropy"}, {"type": "keyword", "value": "metrics", "children": [27]}, {"type": "ListLoad", "children": [28]}, {"type": "Str", "value": "accuracy"}], "funcs": ["keras.models.Sequential", "keras.layers.core.Dense", "keras.models.Sequential.compile", "keras.optimizers.RMSprop"], "neighbor_cells": [769421], "id": 769422, "header": "", "annotation": [" Now we can define our linear model just like we did earlier "]}
{"target_lineno": 588, "file": "/projects/bdata/jupyter/target/nb_969946.py", "context": "\n\n@interact(start=(0, 100, 10), stop=((10 ** 2), (10 ** 3), 100), increment=(10, 100, 10))\ndef update_b(start=10, stop=100, increment=10):\n    batch_source.data['batch'] = np.arange(start, stop, increment)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "update_b", "children": [2, 11, 26]}, {"type": "arguments", "children": [3, 7]}, {"type": "args", "children": [4, 5, 6]}, {"type": "arg"}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults", "children": [8, 9, 10]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "100"}, {"type": "Num", "value": "10"}, {"type": "body", "children": [12]}, {"type": "Assign", "children": [13, 19]}, {"type": "SubscriptStore", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "batch_source"}, {"type": "attr", "value": "data"}, {"type": "Index", "children": [18]}, {"type": "Str", "value": "batch"}, {"type": "Call", "children": [20, 23, 24, 25]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "NameLoad", "value": "start"}, {"type": "NameLoad", "value": "stop"}, {"type": "NameLoad", "value": "increment"}, {"type": "decorator_list", "children": [27]}, {"type": "Call", "children": [28, 29, 34, 43]}, {"type": "NameLoad", "value": "interact"}, {"type": "keyword", "value": "start", "children": [30]}, {"type": "TupleLoad", "children": [31, 32, 33]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "100"}, {"type": "Num", "value": "10"}, {"type": "keyword", "value": "stop", "children": [35]}, {"type": "TupleLoad", "children": [36, 39, 42]}, {"type": "BinOpPow", "children": [37, 38]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "2"}, {"type": "BinOpPow", "children": [40, 41]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "100"}, {"type": "keyword", "value": "increment", "children": [44]}, {"type": "TupleLoad", "children": [45, 46, 47]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "100"}, {"type": "Num", "value": "10"}], "funcs": ["numpy.arange", "ipywidgets.interact"], "neighbor_cells": [1180921], "id": 1180922, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_894719.py", "target_func": "none_func", "context": "\nfrom kafka import KafkaConsumer\n\nimport pandas as pd\n\nimport json\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom textblob import TextBlob\n\nimport nltk\n\nimport gensim\n\nimport spacy\n\nimport textprocessing\n\nimport re\n\nfrom textprocessing import preprocessing\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer as Vader\n\nfrom textprocessing import textfeatures\n\nimport psycopg2\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 3, 6, 8, 11, 14, 16, 18, 20, 22, 24, 26, 28, 31, 33]}, {"type": "ImportFrom", "children": [2], "value": "kafka"}, {"type": "alias", "value": "KafkaConsumer"}, {"type": "Import", "children": [4]}, {"type": "alias", "children": [5], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [7]}, {"type": "alias", "value": "json"}, {"type": "Import", "children": [9]}, {"type": "alias", "children": [10], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [12]}, {"type": "alias", "children": [13], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "children": [15], "value": "textblob"}, {"type": "alias", "value": "TextBlob"}, {"type": "Import", "children": [17]}, {"type": "alias", "value": "nltk"}, {"type": "Import", "children": [19]}, {"type": "alias", "value": "gensim"}, {"type": "Import", "children": [21]}, {"type": "alias", "value": "spacy"}, {"type": "Import", "children": [23]}, {"type": "alias", "value": "textprocessing"}, {"type": "Import", "children": [25]}, {"type": "alias", "value": "re"}, {"type": "ImportFrom", "children": [27], "value": "textprocessing"}, {"type": "alias", "value": "preprocessing"}, {"type": "ImportFrom", "children": [29], "value": "nltk.sentiment.vader"}, {"type": "alias", "children": [30], "value": "SentimentIntensityAnalyzer"}, {"type": "identifier", "value": "Vader"}, {"type": "ImportFrom", "children": [32], "value": "textprocessing"}, {"type": "alias", "value": "textfeatures"}, {"type": "Import", "children": [34]}, {"type": "alias", "value": "psycopg2"}], "stage": null, "id": 634217, "neighbor_cells": [-1], "header": "", "annotation": []}
{"target_lineno": 160, "file": "/projects/bdata/jupyter/target/nb_140642.py", "context": "\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelBinarizer()\n\ntest_one = 0\n\n\ndef one_hot_encode(x):\n    '\\n    One hot encode a list of sample labels. Return a one-hot encoded vector for each label.\\n    : x: List of sample Labels\\n    : return: Numpy array of one-hot encoded labels\\n    '\n    global le, test_one\n    if (test_one == 0):\n        test_one += 1\n        le.fit(x)\n    return le.transform(x)\n\n\"\\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\\n\"\n\ntests.test_one_hot_encode(one_hot_encode)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 9, 12, 44, 46]}, {"type": "ImportFrom", "value": "sklearn", "children": [2]}, {"type": "alias", "value": "preprocessing"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "le"}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "preprocessing"}, {"type": "attr", "value": "LabelBinarizer"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "test_one"}, {"type": "Num", "value": "0"}, {"type": "FunctionDef", "value": "one_hot_encode", "children": [13, 17, 43]}, {"type": "arguments", "children": [14, 16]}, {"type": "args", "children": [15]}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [18, 20, 23, 37]}, {"type": "Expr", "children": [19]}, {"type": "Str", "value": "\n    One hot encode a list of sample labels. Return a one-hot encoded vector for each label.\n    : x: List of sample Labels\n    : return: Numpy array of one-hot encoded labels\n    "}, {"type": "Global", "children": [21, 22]}, {"type": "identifier", "value": "le"}, {"type": "identifier", "value": "test_one"}, {"type": "If", "children": [24, 27]}, {"type": "CompareEq", "children": [25, 26]}, {"type": "NameLoad", "value": "test_one"}, {"type": "Num", "value": "0"}, {"type": "body", "children": [28, 31]}, {"type": "AugAssignAdd", "children": [29, 30]}, {"type": "NameStore", "value": "test_one"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 36]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "le"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "x"}, {"type": "Return", "children": [38]}, {"type": "Call", "children": [39, 42]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "le"}, {"type": "attr", "value": "transform"}, {"type": "NameLoad", "value": "x"}, {"type": "decorator_list"}, {"type": "Expr", "children": [45]}, {"type": "Str", "value": "\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n"}, {"type": "Expr", "children": [47]}, {"type": "Call", "children": [48, 51]}, {"type": "AttributeLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "tests"}, {"type": "attr", "value": "test_one_hot_encode"}, {"type": "NameLoad", "value": "one_hot_encode"}], "funcs": ["sklearn.preprocessing.LabelBinarizer", "sklearn.preprocessing.LabelBinarizer.fit", "sklearn.preprocessing.LabelBinarizer.transform", "problem_unittests.test_one_hot_encode"], "neighbor_cells": [744328], "id": 744329, "header": "", "annotation": [" One hot encode", " Just like the previous code cell you ll be implementing a function for preprocessing This time you ll implement the one hot encode function The input x are a list of labels Implement the function to return the list of labels as One Hot encoded Numpy array The possible values for labels are 0 to 9 The one hot encoding function should return the same encoding for each value between each call to one hot encode Make sure to save the map of encodings outside the function ", " ", " Hint ", " ", " Look into LabelBinarizer in the preprocessing module of sklearn ", " One hot ", " ", " one hot encode x One hot One hot Numpy array 0 9 map of encodings ", " ", " ", " ", " sklearn preprocessing LabelBinarizer "]}
{"target_lineno": 198, "file": "/projects/bdata/jupyter/target/nb_198961.py", "context": "\nx_train = np.concatenate((xg_oof_train, et_oof_train, rf_oof_train), axis=1)\n\nx_test = np.concatenate((xg_oof_test, et_oof_test, rf_oof_test), axis=1)\n\nprint('{},{}'.format(x_train.shape, x_test.shape))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13, 25]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x_train"}, {"type": "Call", "children": [4, 7, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "concatenate"}, {"type": "TupleLoad", "children": [8, 9, 10]}, {"type": "NameLoad", "value": "xg_oof_train"}, {"type": "NameLoad", "value": "et_oof_train"}, {"type": "NameLoad", "value": "rf_oof_train"}, {"type": "keyword", "value": "axis", "children": [12]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "x_test"}, {"type": "Call", "children": [16, 19, 23]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "concatenate"}, {"type": "TupleLoad", "children": [20, 21, 22]}, {"type": "NameLoad", "value": "xg_oof_test"}, {"type": "NameLoad", "value": "et_oof_test"}, {"type": "NameLoad", "value": "rf_oof_test"}, {"type": "keyword", "value": "axis", "children": [24]}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [26]}, {"type": "Call", "children": [27, 28]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [29, 32, 35]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "Str", "value": "{},{}"}, {"type": "attr", "value": "format"}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "x_train"}, {"type": "attr", "value": "shape"}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "x_test"}, {"type": "attr", "value": "shape"}], "funcs": ["numpy.concatenate", "numpy.concatenate", "print", "format"], "neighbor_cells": [9982], "id": 9983, "header": "", "annotation": []}
{"funcs": ["numpy.empty", "enumerate", "numpy.squeeze", "to_panel.as_matrix", "to_panel"], "file": "/projects/bdata/jupyter/target/nb_300246.py", "target_func": "none_func", "context": "\nnormed_traces = np.empty((trials, cells, frames))\n\nfor (itrial, trialID) in enumerate(trialIDList):\n    normed_traces[itrial, :, :] = np.squeeze(epoch.loc[trialID][['normed_traces']].to_panel().as_matrix())\n\nnormed_traces = normed_traces.T\n\nworkflow_dict['normed_traces']['corrected_rois'] = normed_traces\n", "target_lineno": 206, "nodes": [{"type": "Module", "children": [1, 11, 47, 52]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "normed_traces"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "empty"}, {"type": "TupleLoad", "children": [8, 9, 10]}, {"type": "NameLoad", "value": "trials"}, {"type": "NameLoad", "value": "cells"}, {"type": "NameLoad", "value": "frames"}, {"type": "For", "children": [12, 15, 18]}, {"type": "TupleStore", "children": [13, 14]}, {"type": "NameStore", "value": "itrial"}, {"type": "NameStore", "value": "trialID"}, {"type": "Call", "children": [16, 17]}, {"type": "NameLoad", "value": "enumerate"}, {"type": "NameLoad", "value": "trialIDList"}, {"type": "body", "children": [19]}, {"type": "Assign", "children": [20, 27]}, {"type": "SubscriptStore", "children": [21, 22]}, {"type": "NameLoad", "value": "normed_traces"}, {"type": "ExtSlice", "children": [23, 25, 26]}, {"type": "Index", "children": [24]}, {"type": "NameLoad", "value": "itrial"}, {"type": "Slice"}, {"type": "Slice"}, {"type": "Call", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "squeeze"}, {"type": "Call", "children": [32]}, {"type": "AttributeLoad", "children": [33, 46]}, {"type": "Call", "children": [34]}, {"type": "AttributeLoad", "children": [35, 45]}, {"type": "SubscriptLoad", "children": [36, 42]}, {"type": "SubscriptLoad", "children": [37, 40]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "epoch"}, {"type": "attr", "value": "loc"}, {"type": "Index", "children": [41]}, {"type": "NameLoad", "value": "trialID"}, {"type": "Index", "children": [43]}, {"type": "ListLoad", "children": [44]}, {"type": "Str", "value": "normed_traces"}, {"type": "attr", "value": "to_panel"}, {"type": "attr", "value": "as_matrix"}, {"type": "Assign", "children": [48, 49]}, {"type": "NameStore", "value": "normed_traces"}, {"type": "AttributeLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "normed_traces"}, {"type": "attr", "value": "T"}, {"type": "Assign", "children": [53, 60]}, {"type": "SubscriptStore", "children": [54, 58]}, {"type": "SubscriptLoad", "children": [55, 56]}, {"type": "NameLoad", "value": "workflow_dict"}, {"type": "Index", "children": [57]}, {"type": "Str", "value": "normed_traces"}, {"type": "Index", "children": [59]}, {"type": "Str", "value": "corrected_rois"}, {"type": "NameLoad", "value": "normed_traces"}], "stage": null, "id": 560546, "neighbor_cells": [560545], "header": " populate normed traces", "annotation": [" populate normed traces"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_127028.py", "target_func": "none_func", "context": "\nkmeans\n", "target_lineno": 219, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "kmeans"}], "stage": null, "id": 361294, "neighbor_cells": [361293], "header": "", "annotation": []}
{"funcs": ["SpectrumAmplitudeRatio"], "file": "/projects/bdata/jupyter/target/nb_330660.py", "target_func": "none_func", "context": "\nratio_of_maxamplitudes = SpectrumAmplitudeRatio(thecorrspectra)\n", "target_lineno": 615, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ratio_of_maxamplitudes"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "SpectrumAmplitudeRatio"}, {"type": "NameLoad", "value": "thecorrspectra"}], "stage": null, "id": 728768, "neighbor_cells": [728767], "header": "", "annotation": []}
{"target_lineno": 294, "file": "/projects/bdata/jupyter/target/nb_108964.py", "context": "\ndiff_df['d'] = (diff_df.a - diff_df.b)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "diff_df"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "d"}, {"type": "BinOpSub", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "diff_df"}, {"type": "attr", "value": "a"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "diff_df"}, {"type": "attr", "value": "b"}], "funcs": [], "neighbor_cells": [247503], "id": 247504, "header": "", "annotation": []}
{"target_lineno": 163, "file": "/projects/bdata/jupyter/target/nb_43853.py", "context": "\ncustomers.columns\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "customers"}, {"type": "attr", "value": "columns"}], "funcs": [], "neighbor_cells": [647150], "id": 647151, "header": "", "annotation": [" Training and Testing Data", " ", " Now that we ve explored the data a bit let s go ahead and split the data into training and testing sets ", " Set a variable X equal to the numerical features of the customers and a variable y equal to the Yearly Amount Spent column "]}
{"target_lineno": 479, "file": "/projects/bdata/jupyter/target/nb_22087.py", "context": "\nx = 10\n\nif ((x > 2) and (x < 20)):\n    print(x)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x"}, {"type": "Num", "value": "10"}, {"type": "If", "children": [5, 12]}, {"type": "BoolOpAnd", "children": [6, 9]}, {"type": "CompareGt", "children": [7, 8]}, {"type": "NameLoad", "value": "x"}, {"type": "Num", "value": "2"}, {"type": "CompareLt", "children": [10, 11]}, {"type": "NameLoad", "value": "x"}, {"type": "Num", "value": "20"}, {"type": "body", "children": [13]}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "x"}], "funcs": ["print"], "neighbor_cells": [668486], "id": 668487, "header": "", "annotation": []}
{"target_lineno": 64, "file": "/projects/bdata/jupyter/target/nb_935933.py", "context": "\nplot_tree_interactive(X, y)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "plot_tree_interactive"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}], "funcs": ["fig_code.plot_tree_interactive"], "neighbor_cells": [120219], "id": 120220, "header": "", "annotation": [" Now using IPython s interact available in IPython 2 0 and requires a live kernel we can view the decision tree splits "]}
{"target_lineno": 1048, "file": "/projects/bdata/jupyter/target/nb_244131.py", "context": "\n\ndef full_word_similarity_evaluation(mat, rownames):\n    'Evaluate the (mat, rownames) VSM against all four datasets.'\n    for reader in (wordsim353_reader, mturk287_reader, mturk771_reader, men_reader):\n        print(('=' * 40))\n        print(reader.__name__)\n        print(('Spearman r: %0.03f' % word_similarity_evaluation(reader, mat, rownames)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "full_word_similarity_evaluation", "children": [2, 7, 40]}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "arg"}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [8, 10]}, {"type": "Expr", "children": [9]}, {"type": "Str", "value": "Evaluate the (mat, rownames) VSM against all four datasets."}, {"type": "For", "children": [11, 12, 17]}, {"type": "NameStore", "value": "reader"}, {"type": "TupleLoad", "children": [13, 14, 15, 16]}, {"type": "NameLoad", "value": "wordsim353_reader"}, {"type": "NameLoad", "value": "mturk287_reader"}, {"type": "NameLoad", "value": "mturk771_reader"}, {"type": "NameLoad", "value": "men_reader"}, {"type": "body", "children": [18, 24, 30]}, {"type": "Expr", "children": [19]}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMult", "children": [22, 23]}, {"type": "Str", "value": "="}, {"type": "Num", "value": "40"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 27]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "reader"}, {"type": "attr", "value": "__name__"}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32, 33]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [34, 35]}, {"type": "Str", "value": "Spearman r: %0.03f"}, {"type": "Call", "children": [36, 37, 38, 39]}, {"type": "NameLoad", "value": "word_similarity_evaluation"}, {"type": "NameLoad", "value": "reader"}, {"type": "NameLoad", "value": "mat"}, {"type": "NameLoad", "value": "rownames"}, {"type": "decorator_list"}], "funcs": ["print", "print", "print", "word_similarity_evaluation"], "neighbor_cells": [332903], "id": 332904, "header": "", "annotation": [" Evaluation is then simple The following lets us evaluate a VSM against all four datasets "]}
{"target_lineno": 23, "file": "/projects/bdata/jupyter/target/nb_881931.py", "context": "\ntrain = pd.read_csv('D:\\\\Kaggle Projects\\\\Market Check\\\\train.csv')\n\ntest = pd.read_csv('D:\\\\Kaggle Projects\\\\Market Check\\\\test.csv')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "train"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "D:\\Kaggle Projects\\Market Check\\train.csv"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "test"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "D:\\Kaggle Projects\\Market Check\\test.csv"}], "funcs": ["pandas.read_csv", "pandas.read_csv"], "neighbor_cells": [844897], "id": 844898, "header": "", "annotation": []}
{"funcs": ["pandas.read_pickle", "pandas.read_pickle.head"], "file": "/projects/bdata/jupyter/target/nb_289050.py", "target_func": "none_func", "context": "\nimport pandas as pd\n\ndata = pd.read_pickle('/home/hudson/Downloads/prostate.df')\n\ndata.head(2)\n", "target_lineno": 45, "nodes": [{"type": "Module", "children": [1, 4, 11]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_pickle"}, {"type": "Str", "value": "/home/hudson/Downloads/prostate.df"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "2"}], "stage": null, "id": 641005, "neighbor_cells": [641004], "header": "", "annotation": [" Prostate Cancer Dataset", " ", " Gene expression measurements for samples of prostate tumors and adjacent prostate tissue not containing tumor ", " ", " Platform Affymetrix Human Genome U95Av2 Array", " ", " Diagnostic classes ", " normal tissue normal 50 examples 49 0 ", " prostate tumor tumor 52 examples 51 0 ", " ", " Number of genes 12533 br ", " Number of samples 102"]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_193511.py", "target_func": "none_func", "context": "\npoly_svm.dual_coef_\n", "target_lineno": 191, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "poly_svm"}, {"type": "attr", "value": "dual_coef_"}], "stage": null, "id": 1068712, "neighbor_cells": [1068711], "header": "", "annotation": []}
{"target_lineno": 86, "file": "/projects/bdata/jupyter/target/nb_891701.py", "context": "\ntest_features = features[(- 1):]\n\ntest_label = labels[(- 1):]\n\ntest_features\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 15]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "test_features"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "features"}, {"type": "Slice", "children": [6]}, {"type": "UnaryOpUSub", "children": [7]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "test_label"}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "labels"}, {"type": "Slice", "children": [13]}, {"type": "UnaryOpUSub", "children": [14]}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [16]}, {"type": "NameLoad", "value": "test_features"}], "funcs": [], "neighbor_cells": [502747], "id": 502748, "header": "", "annotation": []}
{"target_lineno": 62, "file": "/projects/bdata/jupyter/target/nb_29689.py", "context": "\nlen(X1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "X1"}], "funcs": ["len"], "neighbor_cells": [114606], "id": 114607, "header": "", "annotation": []}
{"target_lineno": 491, "file": "/projects/bdata/jupyter/target/nb_610471.py", "context": "\nplt.figure()\n\nrecall.plot()\n\nplt.ylabel('Recall')\n\nplt.xlabel('Review rating')\n\nplt.title('Recall of classification for different algorithms')\n\nplt.legend(loc='best')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 11, 17, 23, 29]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "figure"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "recall"}, {"type": "attr", "value": "plot"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Recall"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "Review rating"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Recall of classification for different algorithms"}, {"type": "Expr", "children": [30]}, {"type": "Call", "children": [31, 34]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "legend"}, {"type": "keyword", "value": "loc", "children": [35]}, {"type": "Str", "value": "best"}], "funcs": ["matplotlib.pyplot.figure", "pandas.DataFrame.plot", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.title", "matplotlib.pyplot.legend"], "neighbor_cells": [955514], "id": 955515, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_180618.py", "target_func": "none_func", "context": "\nuber_pre = uber[(uber.Date < '2015-01-01')]\n\nuber_post = uber[(uber.Date >= '2015-01-01')]\n", "target_lineno": 707, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "uber_pre"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "uber"}, {"type": "Index", "children": [6]}, {"type": "CompareLt", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "uber"}, {"type": "attr", "value": "Date"}, {"type": "Str", "value": "2015-01-01"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "uber_post"}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "uber"}, {"type": "Index", "children": [16]}, {"type": "CompareGtE", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "uber"}, {"type": "attr", "value": "Date"}, {"type": "Str", "value": "2015-01-01"}], "stage": null, "id": 921558, "neighbor_cells": [921557], "header": "", "annotation": []}
{"target_lineno": 311, "file": "/projects/bdata/jupyter/target/nb_139215.py", "context": "\ndb.close()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "db"}, {"type": "attr", "value": "close"}], "funcs": ["pg.DB.close"], "neighbor_cells": [503835], "id": 503836, "header": "", "annotation": [" Functions", " ", " Functions for preprocessing input and plotting are imported from preprocess py preprocess py and plotting functions py plotting functions py ", " Preprocessing functions include ", " 1 makestartdatetime DataFrame makeenddatetime DataFrame ", " 2 makestopindex DataFrame ", " 3 preprocess scoot", " 4 preprocess flow", " 5 get start end month", " 6 fill missing values", " ", " Plotting functions include ", " 1 TOD", " 2 daily vol", " 3 seasonality plot"]}
{"funcs": ["read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_492953.py", "target_func": "none_func", "context": "\noptions.head(3)\n", "target_lineno": 1553, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "options"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "3"}], "stage": null, "id": 73502, "neighbor_cells": [73501], "header": "", "annotation": []}
{"funcs": ["hist"], "file": "/projects/bdata/jupyter/target/nb_926138.py", "target_func": "none_func", "context": "\ngender_age_train['group_encoded'].hist()\n", "target_lineno": 91, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "gender_age_train"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "group_encoded"}, {"type": "attr", "value": "hist"}], "stage": null, "id": 1137329, "neighbor_cells": [1137328], "header": "", "annotation": []}
{"funcs": ["assaytools.platereader.read_icontrol_xml", "assaytools.platereader.select_data", "assaytools.platereader.select_data"], "file": "/projects/bdata/jupyter/target/nb_50728.py", "target_func": "none_func", "context": "\ndata = platereader.read_icontrol_xml(singlet_file)\n\ndata_protein = platereader.select_data(data, '280_480_TOP_120', 'I')\n\ndata_buffer = platereader.select_data(data, '280_480_TOP_120', 'J')\n", "target_lineno": 45, "nodes": [{"type": "Module", "children": [1, 8, 17]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "platereader"}, {"type": "attr", "value": "read_icontrol_xml"}, {"type": "NameLoad", "value": "singlet_file"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "data_protein"}, {"type": "Call", "children": [11, 14, 15, 16]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "platereader"}, {"type": "attr", "value": "select_data"}, {"type": "NameLoad", "value": "data"}, {"type": "Str", "value": "280_480_TOP_120"}, {"type": "Str", "value": "I"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "data_buffer"}, {"type": "Call", "children": [20, 23, 24, 25]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "platereader"}, {"type": "attr", "value": "select_data"}, {"type": "NameLoad", "value": "data"}, {"type": "Str", "value": "280_480_TOP_120"}, {"type": "Str", "value": "J"}], "stage": null, "id": 864674, "neighbor_cells": [864673], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_232192.py", "target_func": "none_func", "context": "\nimport seaborn as sns\n", "target_lineno": 293, "nodes": [{"type": "Module", "children": [1]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "seaborn"}, {"type": "identifier", "value": "sns"}], "stage": null, "id": 1066541, "neighbor_cells": [1066540], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_84379.py", "target_func": "none_func", "context": "\nclassification_algorithms = [{\n    'name': 'Logistic Regression',\n    'fn': fit_logicsticregression,\n}]\n", "target_lineno": 263, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "classification_algorithms"}, {"type": "ListLoad", "children": [4]}, {"type": "Dict", "children": [5, 6, 7, 8]}, {"type": "Str", "value": "name"}, {"type": "Str", "value": "fn"}, {"type": "Str", "value": "Logistic Regression"}, {"type": "NameLoad", "value": "fit_logicsticregression"}], "stage": null, "id": 855004, "neighbor_cells": [855003], "header": "", "annotation": []}
{"funcs": ["get_ipython.magic.DataFrame.Embarked.fillna"], "file": "/projects/bdata/jupyter/target/nb_972699.py", "target_func": "none_func", "context": "\ndf.Embarked.fillna('S', inplace=True)\n", "target_lineno": 88, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 8, 9]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "Embarked"}, {"type": "attr", "value": "fillna"}, {"type": "Str", "value": "S"}, {"type": "keyword", "children": [10], "value": "inplace"}, {"type": "NameLoad", "value": "True"}], "stage": null, "id": 261790, "neighbor_cells": [261789], "header": "", "annotation": []}
{"target_lineno": 99, "file": "/projects/bdata/jupyter/target/nb_639125.py", "context": "\nsns.pairplot(tips, hue='sex', palette='coolwarm')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "pairplot"}, {"type": "NameLoad", "value": "tips"}, {"type": "keyword", "value": "hue", "children": [8]}, {"type": "Str", "value": "sex"}, {"type": "keyword", "value": "palette", "children": [10]}, {"type": "Str", "value": "coolwarm"}], "funcs": ["seaborn.pairplot"], "neighbor_cells": [719912], "id": 719913, "header": "", "annotation": []}
{"target_lineno": 238, "file": "/projects/bdata/jupyter/target/nb_998821.py", "context": "\njoblib.dump(m, 'buckling_fck30.pkl')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "joblib"}, {"type": "attr", "value": "dump"}, {"type": "NameLoad", "value": "m"}, {"type": "Str", "value": "buckling_fck30.pkl"}], "funcs": ["sklearn.externals.joblib.dump"], "neighbor_cells": [694046], "id": 694047, "header": "", "annotation": []}
{"funcs": ["len"], "file": "/projects/bdata/jupyter/target/nb_872845.py", "target_func": "none_func", "context": "\nprint 'target:', digits.target[0]\n\nprint 'features: \\n', digits.data[0]\n\nprint 'number of features:', len(digits.data[0])\n", "target_lineno": 35, "nodes": [{"type": "Module", "children": [1, 9, 17]}, {"type": "Print", "children": [2, 3]}, {"type": "Str", "value": "target:"}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "digits"}, {"type": "attr", "value": "target"}, {"type": "Index", "children": [8]}, {"type": "Num", "value": "0"}, {"type": "Print", "children": [10, 11]}, {"type": "Str", "value": "features: \n"}, {"type": "SubscriptLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "digits"}, {"type": "attr", "value": "data"}, {"type": "Index", "children": [16]}, {"type": "Num", "value": "0"}, {"type": "Print", "children": [18, 19]}, {"type": "Str", "value": "number of features:"}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "len"}, {"type": "SubscriptLoad", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "digits"}, {"type": "attr", "value": "data"}, {"type": "Index", "children": [26]}, {"type": "Num", "value": "0"}], "stage": null, "id": 958572, "neighbor_cells": [958571], "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.LogisticRegression.predict"], "file": "/projects/bdata/jupyter/target/nb_958144.py", "target_func": "none_func", "context": "\nPosHat = lr.predict(X)\n", "target_lineno": 121, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "PosHat"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "lr"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X"}], "stage": null, "id": 973209, "neighbor_cells": [973208], "header": "", "annotation": []}
{"target_lineno": 129, "file": "/projects/bdata/jupyter/target/nb_713865.py", "context": "\nfor i in range(2500):\n    next(benign_generator)\n    next(malignant_generator)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 6]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "2500"}, {"type": "body", "children": [7, 11]}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "next"}, {"type": "NameLoad", "value": "benign_generator"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "next"}, {"type": "NameLoad", "value": "malignant_generator"}], "funcs": ["range", "next", "next"], "neighbor_cells": [842394], "id": 842395, "header": "", "annotation": []}
{"target_lineno": 663, "file": "/projects/bdata/jupyter/target/nb_299900.py", "context": "\nK.set_value(opt.lr, 0.01)\n\nfit_model(model, batches, val_batches, 3)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 9]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "K"}, {"type": "attr", "value": "set_value"}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "opt"}, {"type": "attr", "value": "lr"}, {"type": "Num", "value": "0.01"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13, 14, 15, 16]}, {"type": "NameLoad", "value": "fit_model"}, {"type": "NameLoad", "value": "model"}, {"type": "NameLoad", "value": "batches"}, {"type": "NameLoad", "value": "val_batches"}, {"type": "Num", "value": "3"}], "funcs": ["keras.backend.set_value", "fit_model"], "neighbor_cells": [1055794], "id": 1055795, "header": "", "annotation": [" Since we haven t changed our architecture there s no need to re compile the model instead we just set the learning rate Since we re training more layers and since we ve already optimized the last layer we should use a lower learning rate than previously "]}
{"target_lineno": 258, "file": "/projects/bdata/jupyter/target/nb_97539.py", "context": "\nwrite_result(bd['test'], predictions)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 8]}, {"type": "NameLoad", "value": "write_result"}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "bd"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "test"}, {"type": "NameLoad", "value": "predictions"}], "funcs": ["write_result"], "neighbor_cells": [243896], "id": 243897, "header": " Writing result", "annotation": [" Writing result"]}
{"target_lineno": 40, "file": "/projects/bdata/jupyter/target/nb_958264.py", "context": "\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\n\npca.fit(X)\n\nprint(pca.explained_variance_)\n\nprint(pca.components_)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 9, 15, 21]}, {"type": "ImportFrom", "value": "sklearn.decomposition", "children": [2]}, {"type": "alias", "value": "PCA"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "pca"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "PCA"}, {"type": "keyword", "value": "n_components", "children": [8]}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "explained_variance_"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 24]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "components_"}], "funcs": ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "print", "print"], "neighbor_cells": [290633], "id": 290634, "header": "", "annotation": [" We can see that there is a definite trend in the data What PCA seeks to do is to find the Principal Axes in the data and explain how important those axes are in describing the data distribution "]}
{"target_lineno": 39, "file": "/projects/bdata/jupyter/target/nb_200011.py", "context": "\nindicators.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "indicators"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.rename.dropna.replace.pivot_table.head"], "neighbor_cells": [179736], "id": 179737, "header": "", "annotation": []}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_104961.py", "target_func": "none_func", "context": "\nget_ipython().magic(u'matplotlib inline')\n\nfrom utils import *\n\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, GradientBoostingClassifier, AdaBoostClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, LogisticRegression, ElasticNet, Lars, Huber\n\nfrom sklearn.preprocessing import normalize\n\nfrom sklearn.grid_search import ParameterGrid\n\nfrom sklearn import metrics\n\nfrom datetime import datetime\n\nimport itertools\n", "target_lineno": 3, "nodes": [{"type": "Module", "children": [1, 8, 10, 13, 16, 19, 21, 23, 28, 30, 38, 40, 42, 44, 46]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "ImportFrom", "children": [9], "value": "utils"}, {"type": "alias", "value": "*"}, {"type": "Import", "children": [11]}, {"type": "alias", "children": [12], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [14]}, {"type": "alias", "children": [15], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [17]}, {"type": "alias", "children": [18], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "children": [20], "value": "sklearn.neighbors"}, {"type": "alias", "value": "KNeighborsClassifier"}, {"type": "ImportFrom", "children": [22], "value": "sklearn.linear_model"}, {"type": "alias", "value": "LogisticRegression"}, {"type": "ImportFrom", "children": [24, 25, 26, 27], "value": "sklearn.ensemble"}, {"type": "alias", "value": "RandomForestClassifier"}, {"type": "alias", "value": "ExtraTreesClassifier"}, {"type": "alias", "value": "GradientBoostingClassifier"}, {"type": "alias", "value": "AdaBoostClassifier"}, {"type": "ImportFrom", "children": [29], "value": "sklearn.tree"}, {"type": "alias", "value": "DecisionTreeClassifier"}, {"type": "ImportFrom", "children": [31, 32, 33, 34, 35, 36, 37], "value": "sklearn.linear_model"}, {"type": "alias", "value": "LinearRegression"}, {"type": "alias", "value": "Ridge"}, {"type": "alias", "value": "Lasso"}, {"type": "alias", "value": "LogisticRegression"}, {"type": "alias", "value": "ElasticNet"}, {"type": "alias", "value": "Lars"}, {"type": "alias", "value": "Huber"}, {"type": "ImportFrom", "children": [39], "value": "sklearn.preprocessing"}, {"type": "alias", "value": "normalize"}, {"type": "ImportFrom", "children": [41], "value": "sklearn.grid_search"}, {"type": "alias", "value": "ParameterGrid"}, {"type": "ImportFrom", "children": [43], "value": "sklearn"}, {"type": "alias", "value": "metrics"}, {"type": "ImportFrom", "children": [45], "value": "datetime"}, {"type": "alias", "value": "datetime"}, {"type": "Import", "children": [47]}, {"type": "alias", "value": "itertools"}], "stage": null, "id": 115907, "neighbor_cells": [-1], "header": "", "annotation": []}
{"target_lineno": 169, "file": "/projects/bdata/jupyter/target/nb_360756.py", "context": "\nif augment:\n    da_trn_labels = np.concatenate(([trn_labels] * (aug_batches + 1)))\n    if full:\n        da_val_labels = np.concatenate(([val_labels] * (aug_batches + 1)))\n    else:\n        da_val_labels = val_labels\nelse:\n    da_trn_labels = trn_labels\n    da_val_labels = val_labels\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "If", "children": [2, 3, 35]}, {"type": "NameLoad", "value": "augment"}, {"type": "body", "children": [4, 16]}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "da_trn_labels"}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "concatenate"}, {"type": "BinOpMult", "children": [11, 13]}, {"type": "ListLoad", "children": [12]}, {"type": "NameLoad", "value": "trn_labels"}, {"type": "BinOpAdd", "children": [14, 15]}, {"type": "NameLoad", "value": "aug_batches"}, {"type": "Num", "value": "1"}, {"type": "If", "children": [17, 18, 31]}, {"type": "NameLoad", "value": "full"}, {"type": "body", "children": [19]}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "da_val_labels"}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "concatenate"}, {"type": "BinOpMult", "children": [26, 28]}, {"type": "ListLoad", "children": [27]}, {"type": "NameLoad", "value": "val_labels"}, {"type": "BinOpAdd", "children": [29, 30]}, {"type": "NameLoad", "value": "aug_batches"}, {"type": "Num", "value": "1"}, {"type": "orelse", "children": [32]}, {"type": "Assign", "children": [33, 34]}, {"type": "NameStore", "value": "da_val_labels"}, {"type": "NameLoad", "value": "val_labels"}, {"type": "orelse", "children": [36, 39]}, {"type": "Assign", "children": [37, 38]}, {"type": "NameStore", "value": "da_trn_labels"}, {"type": "NameLoad", "value": "trn_labels"}, {"type": "Assign", "children": [40, 41]}, {"type": "NameStore", "value": "da_val_labels"}, {"type": "NameLoad", "value": "val_labels"}], "funcs": ["numpy.concatenate", "numpy.concatenate"], "neighbor_cells": [228283], "id": 228284, "header": "", "annotation": []}
{"funcs": ["unique", "len", "len"], "file": "/projects/bdata/jupyter/target/nb_473518.py", "target_func": "none_func", "context": "\niowa_clean_uniq_stors = iowa_clean['Store Number'].unique()\n\n(len(iowa_clean_uniq_stors), len(iowa_clean['Store Number']))\n\nprint iowa_clean_uniq_stors\n", "target_lineno": 131, "nodes": [{"type": "Module", "children": [1, 10, 21]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "iowa_clean_uniq_stors"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 9]}, {"type": "SubscriptLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "iowa_clean"}, {"type": "Index", "children": [8]}, {"type": "Str", "value": "Store Number"}, {"type": "attr", "value": "unique"}, {"type": "Expr", "children": [11]}, {"type": "TupleLoad", "children": [12, 15]}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "iowa_clean_uniq_stors"}, {"type": "Call", "children": [16, 17]}, {"type": "NameLoad", "value": "len"}, {"type": "SubscriptLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "iowa_clean"}, {"type": "Index", "children": [20]}, {"type": "Str", "value": "Store Number"}, {"type": "Print", "children": [22]}, {"type": "NameLoad", "value": "iowa_clean_uniq_stors"}], "stage": null, "id": 267260, "neighbor_cells": [267259], "header": "", "annotation": [" ", " ", " 4 Filter adjust the store data", " ", " ", " ", " Some stores may have opened or closed in 2015 These stores will have incorrect yearly summary statistics since they were not open the full year We need to filter them out or find another way to deal with the inconsistent numbers of months across stores ", " ", " 1 I investigate problematic stores ", " 2 I will ecide on an approach to deal with stores not open for the full 2015 year ", " 3 I will implement a plan ", " 4 I will Briefly report on what I did and why ", " "]}
{"target_lineno": 90, "file": "/projects/bdata/jupyter/target/nb_561215.py", "context": "\nsymbols = ['ORCL', 'SPY']\n\ndf = pd.DataFrame()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "symbols"}, {"type": "ListLoad", "children": [4, 5]}, {"type": "Str", "value": "ORCL"}, {"type": "Str", "value": "SPY"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [9]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}], "funcs": ["pandas.DataFrame"], "neighbor_cells": [602664], "id": 602665, "header": "", "annotation": []}
{"target_lineno": 84, "file": "/projects/bdata/jupyter/target/nb_464745.py", "context": "\ndf['Days_log'] = df['Open Date'].apply(np.log)\n\ndf = df.drop(['Open Date'], axis=1)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 16]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "Days_log"}, {"type": "Call", "children": [7, 13]}, {"type": "AttributeLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "Open Date"}, {"type": "attr", "value": "apply"}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "log"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "df"}, {"type": "Call", "children": [19, 22, 24]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "drop"}, {"type": "ListLoad", "children": [23]}, {"type": "Str", "value": "Open Date"}, {"type": "keyword", "value": "axis", "children": [25]}, {"type": "Num", "value": "1"}], "funcs": ["apply", "pandas.concat.drop.drop"], "neighbor_cells": [612250], "id": 612251, "header": "", "annotation": []}
{"target_lineno": 74, "file": "/projects/bdata/jupyter/target/nb_920017.py", "context": "\nsns.set_palette('GnBu_d')\n\nsns.set_style('whitegrid')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "set_palette"}, {"type": "Str", "value": "GnBu_d"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "set_style"}, {"type": "Str", "value": "whitegrid"}], "funcs": ["seaborn.set_palette", "seaborn.set_style"], "neighbor_cells": [1193891], "id": 1193892, "header": "", "annotation": [" Exploratory Data Analysis", " ", " Let s explore the data ", " ", " For the rest of the exercise we ll only be using the numerical data of the csv file ", " ", " Use seaborn to create a jointplot to compare the Time on Website and Yearly Amount Spent columns Does the correlation make sense "]}
{"funcs": ["influxdb.DataFrameClient.query"], "file": "/projects/bdata/jupyter/target/nb_986379.py", "target_func": "none_func", "context": "\nendoHRbike = client.query('select * from \"bike (transport)\"')['bike (transport)']\n", "target_lineno": 126, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "endoHRbike"}, {"type": "SubscriptLoad", "children": [4, 9]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "client"}, {"type": "attr", "value": "query"}, {"type": "Str", "value": "select * from \"bike (transport)\""}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "bike (transport)"}], "stage": null, "id": 1170722, "neighbor_cells": [1170721], "header": "", "annotation": []}
{"target_lineno": 145, "file": "/projects/bdata/jupyter/target/nb_1487.py", "context": "\nimputed_dframe['diabetes'] = imputed_dframe['diabetes'].map(diabetes_map_dictionary)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "imputed_dframe"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "diabetes"}, {"type": "Call", "children": [7, 13]}, {"type": "AttributeLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "imputed_dframe"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "diabetes"}, {"type": "attr", "value": "map"}, {"type": "NameLoad", "value": "diabetes_map_dictionary"}], "funcs": ["map"], "neighbor_cells": [798565], "id": 798566, "header": "", "annotation": []}
{"target_lineno": 714, "file": "/projects/bdata/jupyter/target/nb_750643.py", "context": "\nfrom sklearn.learning_curve import learning_curve\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "value": "sklearn.learning_curve", "children": [2]}, {"type": "alias", "value": "learning_curve"}], "funcs": [], "neighbor_cells": [680379], "id": 680380, "header": " Plot the learning curves", "annotation": [" Even if we didn t use a cross validation set to fit the regularization parameter we get that C 3 125 gives better results", " Plot the learning curves"]}
{"target_lineno": 149, "file": "/projects/bdata/jupyter/target/nb_212424.py", "context": "\nK_bigInv = np.linalg.inv((K_big + (np.eye(K_big.shape[0]) * 0.001)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "K_bigInv"}, {"type": "Call", "children": [4, 9]}, {"type": "AttributeLoad", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "linalg"}, {"type": "attr", "value": "inv"}, {"type": "BinOpAdd", "children": [10, 11]}, {"type": "NameLoad", "value": "K_big"}, {"type": "BinOpMult", "children": [12, 22]}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "eye"}, {"type": "SubscriptLoad", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "K_big"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [21]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0.001"}], "funcs": ["numpy.linalg.inv", "numpy.eye"], "neighbor_cells": [203666], "id": 203667, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_472232.py", "target_func": "none_func", "context": "\nprint test_labels\n", "target_lineno": 57, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "test_labels"}], "stage": null, "id": 1124671, "neighbor_cells": [1124670], "header": "", "annotation": []}
{"funcs": ["camera_meets_shutter_wave"], "file": "/projects/bdata/jupyter/target/nb_87915.py", "target_func": "none_func", "context": "\ninter_sn35 = camera_meets_shutter_wave('sine', time, cam35, 3.5)\n", "target_lineno": 354, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "inter_sn35"}, {"type": "Call", "children": [4, 5, 6, 7, 8]}, {"type": "NameLoad", "value": "camera_meets_shutter_wave"}, {"type": "Str", "value": "sine"}, {"type": "NameLoad", "value": "time"}, {"type": "NameLoad", "value": "cam35"}, {"type": "Num", "value": "3.5"}], "stage": null, "id": 81796, "neighbor_cells": [81795], "header": "", "annotation": []}
{"funcs": ["urllib2.urlopen", "open", "csv.reader", "append", "f.close", "pop"], "file": "/projects/bdata/jupyter/target/nb_553443.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nimport csv\n\nimport urllib2\n\nurl = 'https://raw.githubusercontent.com/ga-students/DSI-DC-1/master/week-01/project-01/assets/sat_scores.csv?token=ARcePVPRggyPx_gS71Yma_Ran8GuTrpXks5XHYOuwA%3D%3D'\n\nresponse = urllib2.urlopen(url)\n\ndata = []\n\nwith open('sat_scores.csv', 'U') as f:\n    reader = csv.reader(f)\n    for row in reader:\n        data.append(row)\n\nf.close()\n\ndata.pop(0)\n\nprint data\n", "target_lineno": 11, "nodes": [{"type": "Module", "children": [1, 4, 6, 8, 11, 18, 21, 45, 50, 56]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "csv"}, {"type": "Import", "children": [7]}, {"type": "alias", "value": "urllib2"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "url"}, {"type": "Str", "value": "https://raw.githubusercontent.com/ga-students/DSI-DC-1/master/week-01/project-01/assets/sat_scores.csv?token=ARcePVPRggyPx_gS71Yma_Ran8GuTrpXks5XHYOuwA%3D%3D"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "response"}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "urllib2"}, {"type": "attr", "value": "urlopen"}, {"type": "NameLoad", "value": "url"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "data"}, {"type": "ListLoad"}, {"type": "With", "children": [22, 26, 27]}, {"type": "Call", "children": [23, 24, 25]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "sat_scores.csv"}, {"type": "Str", "value": "U"}, {"type": "NameStore", "value": "f"}, {"type": "body", "children": [28, 35]}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "reader"}, {"type": "Call", "children": [31, 34]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "csv"}, {"type": "attr", "value": "reader"}, {"type": "NameLoad", "value": "f"}, {"type": "For", "children": [36, 37, 38]}, {"type": "NameStore", "value": "row"}, {"type": "NameLoad", "value": "reader"}, {"type": "body", "children": [39]}, {"type": "Expr", "children": [40]}, {"type": "Call", "children": [41, 44]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "row"}, {"type": "Expr", "children": [46]}, {"type": "Call", "children": [47]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "f"}, {"type": "attr", "value": "close"}, {"type": "Expr", "children": [51]}, {"type": "Call", "children": [52, 55]}, {"type": "AttributeLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "pop"}, {"type": "Num", "value": "0"}, {"type": "Print", "children": [57]}, {"type": "NameLoad", "value": "data"}], "stage": null, "id": 1079690, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8", " Step One", " ", " 1 That data describes SAT scores from all 50 states and the District of Columbia Each data point contains the following pieces of information state the rate at which students took the SAT their average score on the verbal section and their average score on the math section ", " ", " 2 At a very broad level the data is complete No states are missing and no states are missing values That being said the amoutn of categories being reported on is a little on the low side The data present is certainly enough to begin to draw out some trends and large scale characteristics but it will be difficult to pull out reasons for the differences in achievement rates between states More data points in each state would be needed for those comparisons ", " ", " 3 Data Dictionary will be created below"]}
{"funcs": ["computeEntropyChange"], "file": "/projects/bdata/jupyter/target/nb_685601.py", "target_func": "none_func", "context": "\nfor item in feature_cols:\n    computeEntropyChange(item)\n", "target_lineno": 126, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 4]}, {"type": "NameStore", "value": "item"}, {"type": "NameLoad", "value": "feature_cols"}, {"type": "body", "children": [5]}, {"type": "Expr", "children": [6]}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "computeEntropyChange"}, {"type": "NameLoad", "value": "item"}], "stage": null, "id": 491911, "neighbor_cells": [491910], "header": "", "annotation": []}
{"target_lineno": 448, "file": "/projects/bdata/jupyter/target/nb_217889.py", "context": "\nF1c = sol_theta[:, 0]\n\nA2 = sol_theta[:, 1]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "F1c"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sol_theta"}, {"type": "ExtSlice", "children": [6, 7]}, {"type": "Slice"}, {"type": "Index", "children": [8]}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "A2"}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "sol_theta"}, {"type": "ExtSlice", "children": [14, 15]}, {"type": "Slice"}, {"type": "Index", "children": [16]}, {"type": "Num", "value": "1"}], "funcs": [], "neighbor_cells": [1134867], "id": 1134868, "header": "", "annotation": []}
{"target_lineno": 288, "file": "/projects/bdata/jupyter/target/nb_926462.py", "context": "\n(X4, y4, X_rest_4, y_rest_4) = create_training(features, labels, 90)\n\ny4\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12]}, {"type": "Assign", "children": [2, 7]}, {"type": "TupleStore", "children": [3, 4, 5, 6]}, {"type": "NameStore", "value": "X4"}, {"type": "NameStore", "value": "y4"}, {"type": "NameStore", "value": "X_rest_4"}, {"type": "NameStore", "value": "y_rest_4"}, {"type": "Call", "children": [8, 9, 10, 11]}, {"type": "NameLoad", "value": "create_training"}, {"type": "NameLoad", "value": "features"}, {"type": "NameLoad", "value": "labels"}, {"type": "Num", "value": "90"}, {"type": "Expr", "children": [13]}, {"type": "NameLoad", "value": "y4"}], "funcs": ["create_training"], "neighbor_cells": [444984], "id": 444985, "header": "", "annotation": []}
{"target_lineno": 244, "file": "/projects/bdata/jupyter/target/nb_285886.py", "context": "\nplt.figure()\n\nsns.lmplot(data=test, x='x1', y='x2', hue='y', fit_reg=False)\n\nplt.pcolormesh(x1grid, x2grid, output, cmap=matplotlib.cm.Pastel1, zorder=0)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 21]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "figure"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8, 11, 13, 15, 17, 19]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "lmplot"}, {"type": "keyword", "value": "data", "children": [12]}, {"type": "NameLoad", "value": "test"}, {"type": "keyword", "value": "x", "children": [14]}, {"type": "Str", "value": "x1"}, {"type": "keyword", "value": "y", "children": [16]}, {"type": "Str", "value": "x2"}, {"type": "keyword", "value": "hue", "children": [18]}, {"type": "Str", "value": "y"}, {"type": "keyword", "value": "fit_reg", "children": [20]}, {"type": "NameConstant"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 26, 27, 28, 29, 35]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "pcolormesh"}, {"type": "NameLoad", "value": "x1grid"}, {"type": "NameLoad", "value": "x2grid"}, {"type": "NameLoad", "value": "output"}, {"type": "keyword", "value": "cmap", "children": [30]}, {"type": "AttributeLoad", "children": [31, 34]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "matplotlib"}, {"type": "attr", "value": "cm"}, {"type": "attr", "value": "Pastel1"}, {"type": "keyword", "value": "zorder", "children": [36]}, {"type": "Num", "value": "0"}], "funcs": ["matplotlib.pylab.figure", "seaborn.lmplot", "matplotlib.pylab.pcolormesh"], "neighbor_cells": [540279], "id": 540280, "header": "", "annotation": [" Use test datapoints as test with the same boundary "]}
{"funcs": ["sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"], "file": "/projects/bdata/jupyter/target/nb_530457.py", "target_func": "none_func", "context": "\nX = vectorizer.fit_transform(df.txt)\n", "target_lineno": 60, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "vectorizer"}, {"type": "attr", "value": "fit_transform"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "txt"}], "stage": null, "id": 1096643, "neighbor_cells": [1096642], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_28843.py", "target_func": "none_func", "context": "\noptimizers = [SGD, Adadelta, Adamax, Adam, Adagrad, RMSprop, Nadam]\n\noptimArray = ['SGD', 'Adadelta', 'Adamax', 'Adam', 'Adagrad', 'RMSprop', 'Nadam']\n", "target_lineno": 107, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "optimizers"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9, 10]}, {"type": "NameLoad", "value": "SGD"}, {"type": "NameLoad", "value": "Adadelta"}, {"type": "NameLoad", "value": "Adamax"}, {"type": "NameLoad", "value": "Adam"}, {"type": "NameLoad", "value": "Adagrad"}, {"type": "NameLoad", "value": "RMSprop"}, {"type": "NameLoad", "value": "Nadam"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "optimArray"}, {"type": "ListLoad", "children": [14, 15, 16, 17, 18, 19, 20]}, {"type": "Str", "value": "SGD"}, {"type": "Str", "value": "Adadelta"}, {"type": "Str", "value": "Adamax"}, {"type": "Str", "value": "Adam"}, {"type": "Str", "value": "Adagrad"}, {"type": "Str", "value": "RMSprop"}, {"type": "Str", "value": "Nadam"}], "stage": null, "id": 424472, "neighbor_cells": [424471], "header": "", "annotation": [" Phase2 window flame Learning "]}
{"target_lineno": 43, "file": "/projects/bdata/jupyter/target/nb_364731.py", "context": "\nweather.head(2)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "weather"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "2"}], "funcs": ["pandas.read_csv.head"], "neighbor_cells": [902216], "id": 902217, "header": "", "annotation": []}
{"target_lineno": 1036, "file": "/projects/bdata/jupyter/target/nb_535753.py", "context": "\npd.get_dummies(data.Embarked, prefix='Embarked').head(5)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 14]}, {"type": "AttributeLoad", "children": [4, 13]}, {"type": "Call", "children": [5, 8, 11]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "get_dummies"}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "Embarked"}, {"type": "keyword", "value": "prefix", "children": [12]}, {"type": "Str", "value": "Embarked"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "5"}], "funcs": ["pandas.get_dummies.head", "pandas.get_dummies"], "neighbor_cells": [959725], "id": 959726, "header": "", "annotation": []}
{"target_lineno": 48, "file": "/projects/bdata/jupyter/target/nb_237888.py", "context": "\n(f, ax) = plt.subplots()\n\nax.set(xlim=(df_slice['lat_dec'].min(), df_slice['lat_dec'].max()))\n\nax = sns.regplot(x='lat_dec', y='nitrate_um', data=df_slice, scatter_kws={\n    's': 80,\n}, order=2, ci=None)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 30]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "f"}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "subplots"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "ax"}, {"type": "attr", "value": "set"}, {"type": "keyword", "value": "xlim", "children": [15]}, {"type": "TupleLoad", "children": [16, 23]}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 22]}, {"type": "SubscriptLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "df_slice"}, {"type": "Index", "children": [21]}, {"type": "Str", "value": "lat_dec"}, {"type": "attr", "value": "min"}, {"type": "Call", "children": [24]}, {"type": "AttributeLoad", "children": [25, 29]}, {"type": "SubscriptLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "df_slice"}, {"type": "Index", "children": [28]}, {"type": "Str", "value": "lat_dec"}, {"type": "attr", "value": "max"}, {"type": "Assign", "children": [31, 32]}, {"type": "NameStore", "value": "ax"}, {"type": "Call", "children": [33, 36, 38, 40, 42, 46, 48]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "regplot"}, {"type": "keyword", "value": "x", "children": [37]}, {"type": "Str", "value": "lat_dec"}, {"type": "keyword", "value": "y", "children": [39]}, {"type": "Str", "value": "nitrate_um"}, {"type": "keyword", "value": "data", "children": [41]}, {"type": "NameLoad", "value": "df_slice"}, {"type": "keyword", "value": "scatter_kws", "children": [43]}, {"type": "Dict", "children": [44, 45]}, {"type": "Str", "value": "s"}, {"type": "Num", "value": "80"}, {"type": "keyword", "value": "order", "children": [47]}, {"type": "Num", "value": "2"}, {"type": "keyword", "value": "ci", "children": [49]}, {"type": "NameConstant"}], "funcs": ["matplotlib.pyplot.subplots", "seaborn.regplot.set", "min", "max", "seaborn.regplot"], "neighbor_cells": [1189149], "id": 1189150, "header": "", "annotation": []}
{"target_lineno": 257, "file": "/projects/bdata/jupyter/target/nb_970865.py", "context": "\nmv_lens.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "mv_lens"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.merge.head"], "neighbor_cells": [515939], "id": 515940, "header": "", "annotation": []}
{"target_lineno": 151, "file": "/projects/bdata/jupyter/target/nb_381779.py", "context": "\nfeature_names = vectorizer.get_feature_names()\n\nprint(feature_names[::10])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "feature_names"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "vectorizer"}, {"type": "attr", "value": "get_feature_names"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "feature_names"}, {"type": "Slice", "children": [13]}, {"type": "Num", "value": "10"}], "funcs": ["sklearn.feature_extraction.text.CountVectorizer.get_feature_names", "print"], "neighbor_cells": [1313500], "id": 1313501, "header": "", "annotation": []}
{"target_lineno": 83, "file": "/projects/bdata/jupyter/target/nb_936233.py", "context": "\nalgo = AnnealingEpsilonGreedy([], [])\n\nAlg_name = 'Annealing Epsilon Greedy Algorithm'\n\npath = './AnnealingEpsilonGreedy/'\n\nsys.path.append('./AnnealingEpsilonGreedy')\n\nexec(open('mnist_cnnFORTESTING.py').read())\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 10, 13, 21]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "algo"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "AnnealingEpsilonGreedy"}, {"type": "ListLoad"}, {"type": "ListLoad"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "Alg_name"}, {"type": "Str", "value": "Annealing Epsilon Greedy Algorithm"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "path"}, {"type": "Str", "value": "./AnnealingEpsilonGreedy/"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 20]}, {"type": "AttributeLoad", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "sys"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "append"}, {"type": "Str", "value": "./AnnealingEpsilonGreedy"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23, 24]}, {"type": "NameLoad", "value": "exec"}, {"type": "Call", "children": [25]}, {"type": "AttributeLoad", "children": [26, 29]}, {"type": "Call", "children": [27, 28]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "mnist_cnnFORTESTING.py"}, {"type": "attr", "value": "read"}], "funcs": ["AnnealingEpsilonGreedy", "sys.path.append", "exec", "open.read", "open"], "neighbor_cells": [1321069], "id": 1321070, "header": " Run Annealing Epsilon Greedy pruning Algorithm", "annotation": [" Run Annealing Epsilon Greedy pruning Algorithm"]}
{"target_lineno": 404, "file": "/projects/bdata/jupyter/target/nb_996616.py", "context": "\ndata = np.array([[float(j) for j in e.strip().split()] for e in open('/Users/newuser/Desktop/Research(Tian_Ye)/online_course/CS 109 Data Science/2015lab4-master/data/chall.txt')])\n\ndata\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 26]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListComp", "children": [8, 21]}, {"type": "ListComp", "children": [9, 12]}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "float"}, {"type": "NameLoad", "value": "j"}, {"type": "comprehension", "children": [13, 14]}, {"type": "NameStore", "value": "j"}, {"type": "Call", "children": [15]}, {"type": "AttributeLoad", "children": [16, 20]}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "e"}, {"type": "attr", "value": "strip"}, {"type": "attr", "value": "split"}, {"type": "comprehension", "children": [22, 23]}, {"type": "NameStore", "value": "e"}, {"type": "Call", "children": [24, 25]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "/Users/newuser/Desktop/Research(Tian_Ye)/online_course/CS 109 Data Science/2015lab4-master/data/chall.txt"}, {"type": "Expr", "children": [27]}, {"type": "NameLoad", "value": "data"}], "funcs": ["numpy.array", "float", "e.strip.split", "e.strip", "open"], "neighbor_cells": [693411], "id": 693412, "header": "", "annotation": [" K fold cross validation", " Procedure ", " 1 Randomly assign your n samples to one of K groups They ll each have about frac n k samples", " 2 For each group k ", " 1 Fit the model on all data excluding the k th group", " 2 Use the model to predict the outcomes in group k ", " 3 Calculate your predctio error for each observation in k th group", " 3 Calculate the average prediction error across all samples", " Luckily we don t have to do this entire process all by hand for loops etc every single time sci kit learn has a very nice implementation of this have a look at the documentation http scikit learn org stable modules cross validation html ", " On January 28 1986 the space shuttle Challenger exploded and seven astronauts died because two rubber O rings leaked These rings had lost their resiliency because the shuttle was launched on a very cold day Ambient temperatures were in the low 30s and the O rings themselves were much colder less than 20F ", " ", " ", " One day before the flight the predicted temperature for the launch was 26F to 29F Concerned that the rings would not seal at such a cold temperature the engineers who designed the rocket opposed launching Challenger the next day ", " ", " We have here data on previous failures of the O rings at various temperatures ", " "]}
{"target_lineno": 1420, "file": "/projects/bdata/jupyter/target/nb_77478.py", "context": "\nfrom sklearn.model_selection import train_test_split\n\n(X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=99, test_size=0.5)\n\nknn = KNeighborsClassifier(n_neighbors=1)\n\nknn.fit(X_train, y_train)\n\ny_pred_class = knn.predict(X_test)\n\nprint(metrics.accuracy_score(y_test, y_pred_class))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 17, 23, 30, 37]}, {"type": "ImportFrom", "value": "sklearn.model_selection", "children": [2]}, {"type": "alias", "value": "train_test_split"}, {"type": "Assign", "children": [4, 9]}, {"type": "TupleStore", "children": [5, 6, 7, 8]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [10, 11, 12, 13, 15]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "value": "random_state", "children": [14]}, {"type": "Num", "value": "99"}, {"type": "keyword", "value": "test_size", "children": [16]}, {"type": "Num", "value": "0.5"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "knn"}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "KNeighborsClassifier"}, {"type": "keyword", "value": "n_neighbors", "children": [22]}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 28, 29]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "knn"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Assign", "children": [31, 32]}, {"type": "NameStore", "value": "y_pred_class"}, {"type": "Call", "children": [33, 36]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "knn"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 40]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [41, 44, 45]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred_class"}], "funcs": ["sklearn.model_selection.train_test_split", "sklearn.neighbors.KNeighborsClassifier", "sklearn.neighbors.KNeighborsClassifier.fit", "sklearn.neighbors.KNeighborsClassifier.predict", "print", "sklearn.metrics.accuracy_score"], "neighbor_cells": [367575], "id": 367576, "header": "", "annotation": [" The accuracy is almost like its overfitting ", " Lets try a test train split", " Create a 50 50 train test split of your target and predictors"]}
{"funcs": ["max"], "file": "/projects/bdata/jupyter/target/nb_549303.py", "target_func": "none_func", "context": "\nmax(master.death_by_chol_per_100k)\n", "target_lineno": 519, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "max"}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "master"}, {"type": "attr", "value": "death_by_chol_per_100k"}], "stage": null, "id": 877545, "neighbor_cells": [877544], "header": "", "annotation": []}
{"funcs": ["build_net.load_weights", "build_net.predict", "np.mean", "astype", "sklearn.metrics.roc_auc_score"], "file": "/projects/bdata/jupyter/target/nb_660515.py", "target_func": "none_func", "context": "\nnet.load_weights((model_path + 'net4_redhat.h5'))\n\npred_tr = net.predict([X_most[randSample], X_group.values[randSample]], batch_size=512)\n\nprint ('Train accuracy:', np.mean((y_tr[:, None] == (pred_tr >= 0.5).astype('int8'))))\n\nprint ('Train auc:', roc_auc_score(y_tr, pred_tr))\n", "target_lineno": 523, "nodes": [{"type": "Module", "children": [1, 9, 28, 49]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "net"}, {"type": "attr", "value": "load_weights"}, {"type": "BinOpAdd", "children": [7, 8]}, {"type": "NameLoad", "value": "model_path"}, {"type": "Str", "value": "net4_redhat.h5"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "pred_tr"}, {"type": "Call", "children": [12, 15, 26]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "net"}, {"type": "attr", "value": "predict"}, {"type": "ListLoad", "children": [16, 20]}, {"type": "SubscriptLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "X_most"}, {"type": "Index", "children": [19]}, {"type": "NameLoad", "value": "randSample"}, {"type": "SubscriptLoad", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "X_group"}, {"type": "attr", "value": "values"}, {"type": "Index", "children": [25]}, {"type": "NameLoad", "value": "randSample"}, {"type": "keyword", "children": [27], "value": "batch_size"}, {"type": "Num", "value": "512"}, {"type": "Print", "children": [29]}, {"type": "TupleLoad", "children": [30, 31]}, {"type": "Str", "value": "Train accuracy:"}, {"type": "Call", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "CompareEq", "children": [36, 42]}, {"type": "SubscriptLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "y_tr"}, {"type": "ExtSlice", "children": [39, 40]}, {"type": "Slice"}, {"type": "Index", "children": [41]}, {"type": "NameLoad", "value": "None"}, {"type": "Call", "children": [43, 48]}, {"type": "AttributeLoad", "children": [44, 47]}, {"type": "CompareGtE", "children": [45, 46]}, {"type": "NameLoad", "value": "pred_tr"}, {"type": "Num", "value": "0.5"}, {"type": "attr", "value": "astype"}, {"type": "Str", "value": "int8"}, {"type": "Print", "children": [50]}, {"type": "TupleLoad", "children": [51, 52]}, {"type": "Str", "value": "Train auc:"}, {"type": "Call", "children": [53, 54, 55]}, {"type": "NameLoad", "value": "roc_auc_score"}, {"type": "NameLoad", "value": "y_tr"}, {"type": "NameLoad", "value": "pred_tr"}], "stage": null, "id": 704504, "neighbor_cells": [704503], "header": "", "annotation": []}
{"target_lineno": 219, "file": "/projects/bdata/jupyter/target/nb_929259.py", "context": "\nprint(confusion_matrix(y_test, grid_pred))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 6, 7]}, {"type": "NameLoad", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "grid_pred"}], "funcs": ["print", "sklearn.metrics.confusion_matrix"], "neighbor_cells": [1043761], "id": 1043762, "header": "", "annotation": []}
{"target_lineno": 177, "file": "/projects/bdata/jupyter/target/nb_754823.py", "context": "\nsns.boxplot(x='species', y='sepal_length', data=df)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 8, 10]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "boxplot"}, {"type": "keyword", "value": "x", "children": [7]}, {"type": "Str", "value": "species"}, {"type": "keyword", "value": "y", "children": [9]}, {"type": "Str", "value": "sepal_length"}, {"type": "keyword", "value": "data", "children": [11]}, {"type": "NameLoad", "value": "df"}], "funcs": ["seaborn.boxplot"], "neighbor_cells": [911680], "id": 911681, "header": "", "annotation": [" Categorical Data", " Seaborn has some nice functions to plot categorical data https stanford edu mwaskom software seaborn tutorial categorical html "]}
{"target_lineno": 67, "file": "/projects/bdata/jupyter/target/nb_941665.py", "context": "\nimport pandas as pd\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nget_ipython().magic('matplotlib inline')\n\nfrom sklearn import datasets\n\nfrom sklearn import tree\n\nfrom sklearn.cross_validation import train_test_split\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 17, 19, 21]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "pandas", "children": [3]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "numpy", "children": [6]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [9]}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 16]}, {"type": "AttributeLoad", "children": [13, 15]}, {"type": "Call", "children": [14]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "ImportFrom", "value": "sklearn", "children": [18]}, {"type": "alias", "value": "datasets"}, {"type": "ImportFrom", "value": "sklearn", "children": [20]}, {"type": "alias", "value": "tree"}, {"type": "ImportFrom", "value": "sklearn.cross_validation", "children": [22]}, {"type": "alias", "value": "train_test_split"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [351135], "id": 351136, "header": " Create a decision tree with the data", "annotation": [" Create a decision tree with the data"]}
{"funcs": ["numpy.round", "describe"], "file": "/projects/bdata/jupyter/target/nb_680328.py", "target_func": "none_func", "context": "\nnp.round(df.describe(), 2).T[['count', 'mean', 'std', 'min', 'max']]\n", "target_lineno": 148, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 14]}, {"type": "AttributeLoad", "children": [4, 13]}, {"type": "Call", "children": [5, 8, 12]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "round"}, {"type": "Call", "children": [9]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "describe"}, {"type": "Num", "value": "2"}, {"type": "attr", "value": "T"}, {"type": "Index", "children": [15]}, {"type": "ListLoad", "children": [16, 17, 18, 19, 20]}, {"type": "Str", "value": "count"}, {"type": "Str", "value": "mean"}, {"type": "Str", "value": "std"}, {"type": "Str", "value": "min"}, {"type": "Str", "value": "max"}], "stage": null, "id": 768318, "neighbor_cells": [768317], "header": "", "annotation": [" br ", " Describe the Data", " As shown below we have our dependent variable RTs binary and 7 potential independent explanatory variables four of which are binary and three of which are ratio level "]}
{"target_lineno": 66, "file": "/projects/bdata/jupyter/target/nb_15225.py", "context": "\nclf = LinearSVC(C=0.005, loss='squared_hinge', penalty='l2', multi_class='ovr')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "clf"}, {"type": "Call", "children": [4, 5, 7, 9, 11]}, {"type": "NameLoad", "value": "LinearSVC"}, {"type": "keyword", "value": "C", "children": [6]}, {"type": "Num", "value": "0.005"}, {"type": "keyword", "value": "loss", "children": [8]}, {"type": "Str", "value": "squared_hinge"}, {"type": "keyword", "value": "penalty", "children": [10]}, {"type": "Str", "value": "l2"}, {"type": "keyword", "value": "multi_class", "children": [12]}, {"type": "Str", "value": "ovr"}], "funcs": ["sklearn.svm.LinearSVC"], "neighbor_cells": [706004], "id": 706005, "header": " Fitting a SVM model ", "annotation": [" Fitting a SVM model "]}
{"target_lineno": 828, "file": "/projects/bdata/jupyter/target/nb_3528.py", "context": "\nmx = ((len(x_rnn) // bs) * bs)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mx"}, {"type": "BinOpMult", "children": [4, 9]}, {"type": "BinOpFloorDiv", "children": [5, 8]}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "x_rnn"}, {"type": "NameLoad", "value": "bs"}, {"type": "NameLoad", "value": "bs"}], "funcs": ["len"], "neighbor_cells": [1246020], "id": 1246021, "header": "", "annotation": [" Since we re using a fixed batch shape we have to ensure our inputs and outputs are a even multiple of the batch size "]}
{"funcs": ["pickle.load", "open"], "file": "/projects/bdata/jupyter/target/nb_78038.py", "target_func": "none_func", "context": "\nx_train_dict = pickle.load(open('training_num.pik', 'rb'))\n", "target_lineno": 61, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x_train_dict"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "load"}, {"type": "Call", "children": [8, 9, 10]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "training_num.pik"}, {"type": "Str", "value": "rb"}], "stage": null, "id": 911067, "neighbor_cells": [-1], "header": "", "annotation": [" ", " ", " br ", " Open the Preprocessed Poster Data", " ", " br ", " Image data is stored in a numpy format and existing on a pickle dump file and numerical features in a csv file", " ", " br ", " 1 Image Features ", " ", " br "]}
{"target_lineno": 46, "file": "/projects/bdata/jupyter/target/nb_496933.py", "context": "\nX = pd.get_dummies(data=X)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "get_dummies"}, {"type": "keyword", "value": "data", "children": [8]}, {"type": "NameLoad", "value": "X"}], "funcs": ["pandas.get_dummies"], "neighbor_cells": [884073], "id": 884074, "header": "", "annotation": []}
{"target_lineno": 701, "file": "/projects/bdata/jupyter/target/nb_991133.py", "context": "\nget_ipython().magic('pinfo plt.legend')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "pinfo plt.legend"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [63516], "id": 63517, "header": "", "annotation": []}
{"target_lineno": 436, "file": "/projects/bdata/jupyter/target/nb_330629.py", "context": "\nfrom scipy import stats\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "value": "scipy", "children": [2]}, {"type": "alias", "value": "stats"}], "funcs": [], "neighbor_cells": [541302], "id": 541303, "header": "", "annotation": [" There are no Continuous variable in our data set ", " ", " Categorical Continuous While exploring relation between categorical and continuous variables we can draw box plots for each level of categorical variables If levels are small in number it will not show the statistical significance To look at the statistical significance we can perform Z test T test or ANOVA ", " ", " 1 Z Test T Test Either test assess whether mean of two groups are statistically different from each other or not ", " ", " If the probability of Z is small then the difference of two averages is more significant The T test is very similar to Z test but it is used when number of observation for both categories is less than 30 ", " ", " 2 ANOVA It assesses whether the average of more than two groups is statistically different ", " ", " Example Suppose we want to test the effect of five different exercises For this we recruit 20 men and assign one type of exercise to 4 men 5 groups Their weights are recorded after a few weeks We need to find out whether the effect of these exercises on them is significantly different or not This can be done by comparing the weights of the 5 groups of 4 men each ", " "]}
{"funcs": ["dropna", "dropna"], "file": "/projects/bdata/jupyter/target/nb_75640.py", "target_func": "none_func", "context": "\ndf['ageM'].dropna(inplace=True)\n\ndf['ageF'].dropna(inplace=True)\n", "target_lineno": 100, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 9]}, {"type": "AttributeLoad", "children": [4, 8]}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "ageM"}, {"type": "attr", "value": "dropna"}, {"type": "keyword", "children": [10], "value": "inplace"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 19]}, {"type": "AttributeLoad", "children": [14, 18]}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [17]}, {"type": "Str", "value": "ageF"}, {"type": "attr", "value": "dropna"}, {"type": "keyword", "children": [20], "value": "inplace"}, {"type": "NameLoad", "value": "True"}], "stage": null, "id": 543917, "neighbor_cells": [543916], "header": "", "annotation": []}
{"funcs": ["sklearn.pipeline.Pipeline.predict", "sklearn.pipeline.Pipeline.score", "numpy.linalg.norm", "sklearn.metrics.mean_squared_error"], "file": "/projects/bdata/jupyter/target/nb_64795.py", "target_func": "none_func", "context": "\ny_pred_test = model.predict(X_test[:, n_regressors])\n\nprint 'R-squared', model.score(X_test[:, n_regressors], y_test)\n\nprint 'Sum Euclidean Distance Between Points', np.linalg.norm((y_pred_test - y_test))\n\nprint 'MSE', mse(y_pred_test, y_test)\n", "target_lineno": 166, "nodes": [{"type": "Module", "children": [1, 13, 26, 37]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y_pred_test"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "predict"}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "X_test"}, {"type": "ExtSlice", "children": [10, 11]}, {"type": "Slice"}, {"type": "Index", "children": [12]}, {"type": "NameLoad", "value": "n_regressors"}, {"type": "Print", "children": [14, 15]}, {"type": "Str", "value": "R-squared"}, {"type": "Call", "children": [16, 19, 25]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "score"}, {"type": "SubscriptLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "X_test"}, {"type": "ExtSlice", "children": [22, 23]}, {"type": "Slice"}, {"type": "Index", "children": [24]}, {"type": "NameLoad", "value": "n_regressors"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Print", "children": [27, 28]}, {"type": "Str", "value": "Sum Euclidean Distance Between Points"}, {"type": "Call", "children": [29, 34]}, {"type": "AttributeLoad", "children": [30, 33]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "linalg"}, {"type": "attr", "value": "norm"}, {"type": "BinOpSub", "children": [35, 36]}, {"type": "NameLoad", "value": "y_pred_test"}, {"type": "NameLoad", "value": "y_test"}, {"type": "Print", "children": [38, 39]}, {"type": "Str", "value": "MSE"}, {"type": "Call", "children": [40, 41, 42]}, {"type": "NameLoad", "value": "mse"}, {"type": "NameLoad", "value": "y_pred_test"}, {"type": "NameLoad", "value": "y_test"}], "stage": null, "id": 651026, "neighbor_cells": [651025], "header": " Predict new locations", "annotation": [" Predict new locations"]}
{"target_lineno": 44, "file": "/projects/bdata/jupyter/target/nb_800354.py", "context": "\nbike_data.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "bike_data"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.dropna.head"], "neighbor_cells": [1044555], "id": 1044556, "header": "", "annotation": []}
{"funcs": ["numpy.array", "numpy.array", "numpy.linalg.solve"], "file": "/projects/bdata/jupyter/target/nb_503513.py", "target_func": "none_func", "context": "\nimport numpy as np\n\nfrom scipy import linalg\n\nA = np.array([[1, 3, 5], [2, 5, 1], [2, 3, 8]])\n\nb = np.array([[10], [8], [3]])\n\nnp.linalg.solve(A, b)\n", "target_lineno": 48, "nodes": [{"type": "Module", "children": [1, 4, 6, 25, 38]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "children": [5], "value": "scipy"}, {"type": "alias", "value": "linalg"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "A"}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [13, 17, 21]}, {"type": "ListLoad", "children": [14, 15, 16]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "5"}, {"type": "ListLoad", "children": [18, 19, 20]}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "1"}, {"type": "ListLoad", "children": [22, 23, 24]}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "8"}, {"type": "Assign", "children": [26, 27]}, {"type": "NameStore", "value": "b"}, {"type": "Call", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [32, 34, 36]}, {"type": "ListLoad", "children": [33]}, {"type": "Num", "value": "10"}, {"type": "ListLoad", "children": [35]}, {"type": "Num", "value": "8"}, {"type": "ListLoad", "children": [37]}, {"type": "Num", "value": "3"}, {"type": "Expr", "children": [39]}, {"type": "Call", "children": [40, 45, 46]}, {"type": "AttributeLoad", "children": [41, 44]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "linalg"}, {"type": "attr", "value": "solve"}, {"type": "NameLoad", "value": "A"}, {"type": "NameLoad", "value": "b"}], "stage": null, "id": 669065, "neighbor_cells": [669064], "header": "", "annotation": []}
{"target_lineno": 479, "file": "/projects/bdata/jupyter/target/nb_712104.py", "context": "\nprint(GNB.score(emo_X_train, emo_y_train))\n\nprint(GNB.score(emo_X_test, emo_y_test))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 8, 9]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "GNB"}, {"type": "attr", "value": "score"}, {"type": "NameLoad", "value": "emo_X_train"}, {"type": "NameLoad", "value": "emo_y_train"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [14, 17, 18]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "GNB"}, {"type": "attr", "value": "score"}, {"type": "NameLoad", "value": "emo_X_test"}, {"type": "NameLoad", "value": "emo_y_test"}], "funcs": ["print", "sklearn.naive_bayes.GaussianNB.score", "print", "sklearn.naive_bayes.GaussianNB.score"], "neighbor_cells": [738182], "id": 738183, "header": "", "annotation": []}
{"funcs": ["sklearn.metrics.mean_squared_error"], "file": "/projects/bdata/jupyter/target/nb_971374.py", "target_func": "none_func", "context": "\nprint (((((10 ** 2) + (0 ** 2)) + (20 ** 2)) + (10 ** 2)) / 4.0)\n\nprint metrics.mean_squared_error(true, pred)\n", "target_lineno": 1001, "nodes": [{"type": "Module", "children": [1, 19]}, {"type": "Print", "children": [2]}, {"type": "BinOpDiv", "children": [3, 18]}, {"type": "BinOpAdd", "children": [4, 15]}, {"type": "BinOpAdd", "children": [5, 12]}, {"type": "BinOpAdd", "children": [6, 9]}, {"type": "BinOpPow", "children": [7, 8]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "2"}, {"type": "BinOpPow", "children": [10, 11]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "2"}, {"type": "BinOpPow", "children": [13, 14]}, {"type": "Num", "value": "20"}, {"type": "Num", "value": "2"}, {"type": "BinOpPow", "children": [16, 17]}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "4.0"}, {"type": "Print", "children": [20]}, {"type": "Call", "children": [21, 24, 25]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "mean_squared_error"}, {"type": "NameLoad", "value": "true"}, {"type": "NameLoad", "value": "pred"}], "stage": null, "id": 1122943, "neighbor_cells": [1122942], "header": "", "annotation": [" Mean Squared Error MSE is the mean of the squared errors ", " ", " frac 1n sum i 1 n y i hat y i 2 "]}
{"target_lineno": 217, "file": "/projects/bdata/jupyter/target/nb_616135.py", "context": "\ncomponents = pd.merge(components, component_weight_df, on='component_id', how='left')\n\ncomponents.head(3)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "components"}, {"type": "Call", "children": [4, 7, 8, 9, 11]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "merge"}, {"type": "NameLoad", "value": "components"}, {"type": "NameLoad", "value": "component_weight_df"}, {"type": "keyword", "value": "on", "children": [10]}, {"type": "Str", "value": "component_id"}, {"type": "keyword", "value": "how", "children": [12]}, {"type": "Str", "value": "left"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "components"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "3"}], "funcs": ["pandas.merge", "pandas.merge.head"], "neighbor_cells": [813975], "id": 813976, "header": " Merge Component Weight with Component DF", "annotation": [" Merge Component Weight with Component DF"]}
{"funcs": ["list", "numpy.unique", "append"], "file": "/projects/bdata/jupyter/target/nb_540574.py", "target_func": "none_func", "context": "\nprefix_len = 5\n\nprefixes = list(np.unique([code[:prefix_len] for code in all_wcms_codes]))\n\nprefix_dict = {prefix: [] for prefix in prefixes}\n\nfor code in all_wcms_codes:\n    prefix_dict[code[:prefix_len]].append(code)\n", "target_lineno": 298, "nodes": [{"type": "Module", "children": [1, 4, 20, 28]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "prefix_len"}, {"type": "Num", "value": "5"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "prefixes"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "list"}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "unique"}, {"type": "ListComp", "children": [13, 17]}, {"type": "SubscriptLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "code"}, {"type": "Slice", "children": [16]}, {"type": "NameLoad", "value": "prefix_len"}, {"type": "comprehension", "children": [18, 19]}, {"type": "NameStore", "value": "code"}, {"type": "NameLoad", "value": "all_wcms_codes"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "prefix_dict"}, {"type": "DictComp", "children": [23, 24, 25]}, {"type": "NameLoad", "value": "prefix"}, {"type": "ListLoad"}, {"type": "comprehension", "children": [26, 27]}, {"type": "NameStore", "value": "prefix"}, {"type": "NameLoad", "value": "prefixes"}, {"type": "For", "children": [29, 30, 31]}, {"type": "NameStore", "value": "code"}, {"type": "NameLoad", "value": "all_wcms_codes"}, {"type": "body", "children": [32]}, {"type": "Expr", "children": [33]}, {"type": "Call", "children": [34, 43]}, {"type": "AttributeLoad", "children": [35, 42]}, {"type": "SubscriptLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "prefix_dict"}, {"type": "Index", "children": [38]}, {"type": "SubscriptLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "code"}, {"type": "Slice", "children": [41]}, {"type": "NameLoad", "value": "prefix_len"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "code"}], "stage": null, "id": 647798, "neighbor_cells": [647797], "header": "", "annotation": []}
{"target_lineno": 105, "file": "/projects/bdata/jupyter/target/nb_631468.py", "context": "\ndataset.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "dataset"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [155983], "id": 155984, "header": "", "annotation": []}
{"target_lineno": 134, "file": "/projects/bdata/jupyter/target/nb_994044.py", "context": "\ndataframe = df['power']['active']['2012-06-01':'2012-08-31'].resample('15min')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dataframe"}, {"type": "Call", "children": [4, 17]}, {"type": "AttributeLoad", "children": [5, 16]}, {"type": "SubscriptLoad", "children": [6, 13]}, {"type": "SubscriptLoad", "children": [7, 11]}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [10]}, {"type": "Str", "value": "power"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "active"}, {"type": "Slice", "children": [14, 15]}, {"type": "Str", "value": "2012-06-01"}, {"type": "Str", "value": "2012-08-31"}, {"type": "attr", "value": "resample"}, {"type": "Str", "value": "15min"}], "funcs": ["resample"], "neighbor_cells": [769549], "id": 769550, "header": "", "annotation": []}
{"target_lineno": 107, "file": "/projects/bdata/jupyter/target/nb_85894.py", "context": "\ncolormap = np.array(['red', 'blue', 'yellow'])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "colormap"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [8, 9, 10]}, {"type": "Str", "value": "red"}, {"type": "Str", "value": "blue"}, {"type": "Str", "value": "yellow"}], "funcs": ["numpy.array"], "neighbor_cells": [700439], "id": 700440, "header": " Check the predicted vs actual classifcations", "annotation": [" Check the predicted vs actual classifcations"]}
{"target_lineno": 92, "file": "/projects/bdata/jupyter/target/nb_856204.py", "context": "\nfrom numpy import loadtxt\n\nfrom xgboost import XGBClassifier\n\nfrom xgboost import plot_importance\n\nfrom matplotlib import pyplot\n\ndataset = loadtxt('pima-indians-diabetes.csv', delimiter=',')\n\nX = dataset[:, 0:8]\n\ny = dataset[:, 8]\n\nmodel = XGBClassifier()\n\nmodel.fit(X, y)\n\nplot_importance(model)\n\npyplot.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 5, 7, 9, 16, 25, 33, 37, 44, 48]}, {"type": "ImportFrom", "value": "numpy", "children": [2]}, {"type": "alias", "value": "loadtxt"}, {"type": "ImportFrom", "value": "xgboost", "children": [4]}, {"type": "alias", "value": "XGBClassifier"}, {"type": "ImportFrom", "value": "xgboost", "children": [6]}, {"type": "alias", "value": "plot_importance"}, {"type": "ImportFrom", "value": "matplotlib", "children": [8]}, {"type": "alias", "value": "pyplot"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "dataset"}, {"type": "Call", "children": [12, 13, 14]}, {"type": "NameLoad", "value": "loadtxt"}, {"type": "Str", "value": "pima-indians-diabetes.csv"}, {"type": "keyword", "value": "delimiter", "children": [15]}, {"type": "Str", "value": ","}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "X"}, {"type": "SubscriptLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "dataset"}, {"type": "ExtSlice", "children": [21, 22]}, {"type": "Slice"}, {"type": "Slice", "children": [23, 24]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "8"}, {"type": "Assign", "children": [26, 27]}, {"type": "NameStore", "value": "y"}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "dataset"}, {"type": "ExtSlice", "children": [30, 31]}, {"type": "Slice"}, {"type": "Index", "children": [32]}, {"type": "Num", "value": "8"}, {"type": "Assign", "children": [34, 35]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [36]}, {"type": "NameLoad", "value": "XGBClassifier"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 42, 43]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "Expr", "children": [45]}, {"type": "Call", "children": [46, 47]}, {"type": "NameLoad", "value": "plot_importance"}, {"type": "NameLoad", "value": "model"}, {"type": "Expr", "children": [49]}, {"type": "Call", "children": [50]}, {"type": "AttributeLoad", "children": [51, 52]}, {"type": "NameLoad", "value": "pyplot"}, {"type": "attr", "value": "show"}], "funcs": ["numpy.loadtxt", "xgboost.XGBClassifier", "xgboost.XGBClassifier.fit", "xgboost.plot_importance", "matplotlib.pyplot.show"], "neighbor_cells": [-1], "id": 344474, "header": "", "annotation": [" A downside of this plot is that the features are ordered by their input index rather than their importance We could sort the features before plotting ", " ", " Thankfully there is a built in plot function to help us ", " ", " Using theBuilt in XGBoost Feature Importance Plot", " ", " The XGBoost library provides a built in function to plot features ordered by their importance ", " ", " The function is called plot importance and can be used as follows ", " ", " pre ", " plot feature importance", " plot importance model ", " pyplot show ", " pre ", " ", " For example below is a complete code listing plotting the feature importance for the Pima Indians dataset using the built in plot importance function "]}
{"target_lineno": 56, "file": "/projects/bdata/jupyter/target/nb_369183.py", "context": "\n(sample_size, features) = raw_data.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "sample_size"}, {"type": "NameStore", "value": "features"}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "raw_data"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [1141852], "id": 1141853, "header": "", "annotation": []}
{"funcs": ["head"], "file": "/projects/bdata/jupyter/target/nb_166923.py", "target_func": "none_func", "context": "\nY = df.Had_Affair\n\nY.head()\n", "target_lineno": 281, "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "Y"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "Had_Affair"}, {"type": "Expr", "children": [7]}, {"type": "Call", "children": [8]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "Y"}, {"type": "attr", "value": "head"}], "stage": null, "id": 398542, "neighbor_cells": [398541], "header": "", "annotation": [" Now let s go ahead and set up the Y "]}
{"target_lineno": 765, "file": "/projects/bdata/jupyter/target/nb_764777.py", "context": "\nclf = LogisticRegression(penalty='l1')\n\nmdl = clf.fit(train_tfidf, labels_binary[train_set_idx])\n\ny_score = mdl.predict_proba(test_tfidf)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 18]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "clf"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "LogisticRegression"}, {"type": "keyword", "value": "penalty", "children": [6]}, {"type": "Str", "value": "l1"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "mdl"}, {"type": "Call", "children": [10, 13, 14]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "train_tfidf"}, {"type": "SubscriptLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "labels_binary"}, {"type": "Index", "children": [17]}, {"type": "NameLoad", "value": "train_set_idx"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "y_score"}, {"type": "Call", "children": [21, 24]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "mdl"}, {"type": "attr", "value": "predict_proba"}, {"type": "NameLoad", "value": "test_tfidf"}], "funcs": ["sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.fit.predict_proba"], "neighbor_cells": [32824], "id": 32825, "header": "", "annotation": [" The classifier we are using in the example is LogisticRegression As we saw in the Machine Learning tutorial we first decide on a classifier then we fit the classfier to create a model We can then test our model with our testing set by passing in the features of the testing set The model will output the probablity of each document being classfied as a Credit Analyst or Financial Analyst "]}
{"target_lineno": 479, "file": "/projects/bdata/jupyter/target/nb_244103.py", "context": "\nwhite_output = 'test_videos_output/solidWhiteRight.mp4'\n\nclip1 = VideoFileClip('test_videos/solidWhiteRight.mp4')\n\nwhite_clip = clip1.fl_image(process_image)\n\nget_ipython().run_line_magic('time', 'white_clip.write_videofile(white_output, audio=False)')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 9, 16]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "white_output"}, {"type": "Str", "value": "test_videos_output/solidWhiteRight.mp4"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "clip1"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "VideoFileClip"}, {"type": "Str", "value": "test_videos/solidWhiteRight.mp4"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "white_clip"}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "clip1"}, {"type": "attr", "value": "fl_image"}, {"type": "NameLoad", "value": "process_image"}, {"type": "Expr", "children": [17]}, {"type": "Call", "children": [18, 22, 23]}, {"type": "AttributeLoad", "children": [19, 21]}, {"type": "Call", "children": [20]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "time"}, {"type": "Str", "value": "white_clip.write_videofile(white_output, audio=False)"}], "funcs": ["moviepy.editor.VideoFileClip", "moviepy.editor.VideoFileClip.fl_image", "get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [1178288], "id": 1178289, "header": "", "annotation": [" Let s try the one with the solid white lane on the right first "]}
{"target_lineno": 226, "file": "/projects/bdata/jupyter/target/nb_98150.py", "context": "\npred[0]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "pred"}, {"type": "Index", "children": [5]}, {"type": "Num", "value": "0"}], "funcs": [], "neighbor_cells": [1321798], "id": 1321799, "header": "", "annotation": []}
{"target_lineno": 51, "file": "/projects/bdata/jupyter/target/nb_423844.py", "context": "\n(X_train, X_test, y_train, y_test) = train_test_split(X, y, test_size=0.3)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 7]}, {"type": "TupleStore", "children": [3, 4, 5, 6]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [8, 9, 10, 11]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "value": "test_size", "children": [12]}, {"type": "Num", "value": "0.3"}], "funcs": ["sklearn.cross_validation.train_test_split"], "neighbor_cells": [438832], "id": 438833, "header": "", "annotation": []}
{"funcs": ["pandas.DataFrame.from_csv.drop.date_recorded.apply"], "file": "/projects/bdata/jupyter/target/nb_90706.py", "target_func": "none_func", "context": "\ntest_set.date_recorded = test_set.date_recorded.apply(to_datetime)\n", "target_lineno": 180, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 5]}, {"type": "AttributeStore", "children": [3, 4]}, {"type": "NameLoad", "value": "test_set"}, {"type": "attr", "value": "date_recorded"}, {"type": "Call", "children": [6, 11]}, {"type": "AttributeLoad", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "test_set"}, {"type": "attr", "value": "date_recorded"}, {"type": "attr", "value": "apply"}, {"type": "NameLoad", "value": "to_datetime"}], "stage": null, "id": 432336, "neighbor_cells": [432335], "header": "", "annotation": []}
{"target_lineno": 147, "file": "/projects/bdata/jupyter/target/nb_183969.py", "context": "\nplt.plot(data['Floor'], data['Price'], 'o')\n\nplt.title('Price and floor')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 15]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 10, 14]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "Floor"}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [13]}, {"type": "Str", "value": "Price"}, {"type": "Str", "value": "o"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Price and floor"}], "funcs": ["matplotlib.pylab.plot", "matplotlib.pylab.title"], "neighbor_cells": [1126766], "id": 1126767, "header": "", "annotation": []}
{"funcs": ["str", "len", "str", "len", "pandas.merge.rename.dropna.dropna", "pandas.merge.rename.dropna.dropna", "len", "str", "len", "pandas.merge.rename.dropna.duplicated"], "file": "/projects/bdata/jupyter/target/nb_870069.py", "target_func": "none_func", "context": "\nprint (str(len(students)) + ' Total Students Enrolled')\n\nprint (str(len(students.dropna(how='any'))) + ' remaining students after nulls dropped ~5%')\n\nstudents = students.dropna(how='any')\n\nprint len(students)\n\nprint (str(len(students[students.duplicated()])) + ' absolute duplicates in the data')\n", "target_lineno": 55, "nodes": [{"type": "Module", "children": [1, 9, 22, 30, 34]}, {"type": "Print", "children": [2]}, {"type": "BinOpAdd", "children": [3, 8]}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "str"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "students"}, {"type": "Str", "value": " Total Students Enrolled"}, {"type": "Print", "children": [10]}, {"type": "BinOpAdd", "children": [11, 21]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "str"}, {"type": "Call", "children": [14, 15]}, {"type": "NameLoad", "value": "len"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "students"}, {"type": "attr", "value": "dropna"}, {"type": "keyword", "children": [20], "value": "how"}, {"type": "Str", "value": "any"}, {"type": "Str", "value": " remaining students after nulls dropped ~5%"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "students"}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "students"}, {"type": "attr", "value": "dropna"}, {"type": "keyword", "children": [29], "value": "how"}, {"type": "Str", "value": "any"}, {"type": "Print", "children": [31]}, {"type": "Call", "children": [32, 33]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "students"}, {"type": "Print", "children": [35]}, {"type": "BinOpAdd", "children": [36, 47]}, {"type": "Call", "children": [37, 38]}, {"type": "NameLoad", "value": "str"}, {"type": "Call", "children": [39, 40]}, {"type": "NameLoad", "value": "len"}, {"type": "SubscriptLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "students"}, {"type": "Index", "children": [43]}, {"type": "Call", "children": [44]}, {"type": "AttributeLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "students"}, {"type": "attr", "value": "duplicated"}, {"type": "Str", "value": " absolute duplicates in the data"}], "stage": null, "id": 613100, "neighbor_cells": [613099], "header": "", "annotation": [" Data Cleaning", " ", " removing nulls and duplicates", " incorrect data where end and start time is flipped", " not including students who are still enrolled only those I know the time of enrollment"]}
{"target_lineno": 264, "file": "/projects/bdata/jupyter/target/nb_300119.py", "context": "\nmodel_ASM = Sequential()\n\nmodel_ASM.add(Dense(30, input_shape=(30,), activation='relu', W_regularizer=l2(0.001)))\n\nmodel_ASM.add(Dropout(0.5))\n\nmodel_ASM.add(Dense(2, activation='softmax'))\n\nmodel_ASM.load_weights('/Users/salemameen/Desktop/banditsbook/python_cancer/AnnealingSoftmax/spam5.hdf5')\n\nmodel_ASM.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 5, 22, 30, 40, 46]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "model_ASM"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "Sequential"}, {"type": "Expr", "children": [6]}, {"type": "Call", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "model_ASM"}, {"type": "attr", "value": "add"}, {"type": "Call", "children": [11, 12, 13, 16, 18]}, {"type": "NameLoad", "value": "Dense"}, {"type": "Num", "value": "30"}, {"type": "keyword", "value": "input_shape", "children": [14]}, {"type": "TupleLoad", "children": [15]}, {"type": "Num", "value": "30"}, {"type": "keyword", "value": "activation", "children": [17]}, {"type": "Str", "value": "relu"}, {"type": "keyword", "value": "W_regularizer", "children": [19]}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "l2"}, {"type": "Num", "value": "0.001"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "model_ASM"}, {"type": "attr", "value": "add"}, {"type": "Call", "children": [28, 29]}, {"type": "NameLoad", "value": "Dropout"}, {"type": "Num", "value": "0.5"}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "model_ASM"}, {"type": "attr", "value": "add"}, {"type": "Call", "children": [36, 37, 38]}, {"type": "NameLoad", "value": "Dense"}, {"type": "Num", "value": "2"}, {"type": "keyword", "value": "activation", "children": [39]}, {"type": "Str", "value": "softmax"}, {"type": "Expr", "children": [41]}, {"type": "Call", "children": [42, 45]}, {"type": "AttributeLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "model_ASM"}, {"type": "attr", "value": "load_weights"}, {"type": "Str", "value": "/Users/salemameen/Desktop/banditsbook/python_cancer/AnnealingSoftmax/spam5.hdf5"}, {"type": "Expr", "children": [47]}, {"type": "Call", "children": [48, 51, 53, 56]}, {"type": "AttributeLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "model_ASM"}, {"type": "attr", "value": "compile"}, {"type": "keyword", "value": "loss", "children": [52]}, {"type": "Str", "value": "categorical_crossentropy"}, {"type": "keyword", "value": "metrics", "children": [54]}, {"type": "ListLoad", "children": [55]}, {"type": "Str", "value": "accuracy"}, {"type": "keyword", "value": "optimizer", "children": [57]}, {"type": "Str", "value": "adam"}], "funcs": ["keras.models.Sequential", "keras.models.Sequential.add", "keras.layers.Dense", "keras.regularizers.l2", "keras.models.Sequential.add", "keras.layers.Dropout", "keras.models.Sequential.add", "keras.layers.Dense", "keras.models.Sequential.load_weights", "keras.models.Sequential.compile"], "neighbor_cells": [1055082], "id": 1055083, "header": " ANNEELYING SOFTMAX", "annotation": [" ANNEELYING SOFTMAX"]}
{"target_lineno": 64, "file": "/projects/bdata/jupyter/target/nb_134090.py", "context": "\nprint('-x     = ', (- x))\n\nprint('x ** 2 = ', (x ** 2))\n\nprint('x % 2  = ', (x % 2))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 14]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "-x     = "}, {"type": "UnaryOpUSub", "children": [6]}, {"type": "NameLoad", "value": "x"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 10, 11]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "x ** 2 = "}, {"type": "BinOpPow", "children": [12, 13]}, {"type": "NameLoad", "value": "x"}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 17, 18]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "x % 2  = "}, {"type": "BinOpMod", "children": [19, 20]}, {"type": "NameLoad", "value": "x"}, {"type": "Num", "value": "2"}], "funcs": ["print", "print", "print"], "neighbor_cells": [939021], "id": 939022, "header": "", "annotation": []}
{"target_lineno": 765, "file": "/projects/bdata/jupyter/target/nb_652862.py", "context": "\nprediction1 = clf1.predict(Xtest)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "prediction1"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "clf1"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "Xtest"}], "funcs": ["sklearn.ensemble.RandomForestRegressor.predict"], "neighbor_cells": [1304680], "id": 1304681, "header": "", "annotation": []}
{"funcs": ["jakely.toolbox.find_nearest", "numpy.min", "jakely.toolbox.find_nearest", "numpy.min"], "file": "/projects/bdata/jupyter/target/nb_808102.py", "target_func": "none_func", "context": "\nmin1 = wlv[jakely.toolbox.find_nearest(obs_ncor, np.min(obs_ncor[((wlv > 5890) & (wlv < 5895))]))]\n\nprint 'vacuum wavelength of first minimum:', min1, 'Angstroms'\n\nmin2 = wlv[jakely.toolbox.find_nearest(obs_ncor, np.min(obs_ncor[((wlv > 5895) & (wlv < 5900))]))]\n\nprint 'vacuum wavelength of second minimum:', min2, 'Angstroms'\n", "target_lineno": 115, "nodes": [{"type": "Module", "children": [1, 27, 31, 57]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "min1"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "wlv"}, {"type": "Index", "children": [6]}, {"type": "Call", "children": [7, 12, 13]}, {"type": "AttributeLoad", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "jakely"}, {"type": "attr", "value": "toolbox"}, {"type": "attr", "value": "find_nearest"}, {"type": "NameLoad", "value": "obs_ncor"}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "min"}, {"type": "SubscriptLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "obs_ncor"}, {"type": "Index", "children": [20]}, {"type": "BinOpBitAnd", "children": [21, 24]}, {"type": "CompareGt", "children": [22, 23]}, {"type": "NameLoad", "value": "wlv"}, {"type": "Num", "value": "5890"}, {"type": "CompareLt", "children": [25, 26]}, {"type": "NameLoad", "value": "wlv"}, {"type": "Num", "value": "5895"}, {"type": "Print", "children": [28, 29, 30]}, {"type": "Str", "value": "vacuum wavelength of first minimum:"}, {"type": "NameLoad", "value": "min1"}, {"type": "Str", "value": "Angstroms"}, {"type": "Assign", "children": [32, 33]}, {"type": "NameStore", "value": "min2"}, {"type": "SubscriptLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "wlv"}, {"type": "Index", "children": [36]}, {"type": "Call", "children": [37, 42, 43]}, {"type": "AttributeLoad", "children": [38, 41]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "jakely"}, {"type": "attr", "value": "toolbox"}, {"type": "attr", "value": "find_nearest"}, {"type": "NameLoad", "value": "obs_ncor"}, {"type": "Call", "children": [44, 47]}, {"type": "AttributeLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "min"}, {"type": "SubscriptLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "obs_ncor"}, {"type": "Index", "children": [50]}, {"type": "BinOpBitAnd", "children": [51, 54]}, {"type": "CompareGt", "children": [52, 53]}, {"type": "NameLoad", "value": "wlv"}, {"type": "Num", "value": "5895"}, {"type": "CompareLt", "children": [55, 56]}, {"type": "NameLoad", "value": "wlv"}, {"type": "Num", "value": "5900"}, {"type": "Print", "children": [58, 59, 60]}, {"type": "Str", "value": "vacuum wavelength of second minimum:"}, {"type": "NameLoad", "value": "min2"}, {"type": "Str", "value": "Angstroms"}], "stage": null, "id": 920981, "neighbor_cells": [920980], "header": "", "annotation": [" Find the vacuum wavelengths of their minima use the IDL where and min functions "]}
{"target_lineno": 402, "file": "/projects/bdata/jupyter/target/nb_126880.py", "context": "\ndf2.describe()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df2"}, {"type": "attr", "value": "describe"}], "funcs": ["describe"], "neighbor_cells": [467860], "id": 467861, "header": "", "annotation": []}
{"target_lineno": 178, "file": "/projects/bdata/jupyter/target/nb_315246.py", "context": "\nLinRegNew = smf.ols(formula='Temp ~ MEI + TSI + N2O + Aerosols', data=datatrain).fit()\n\nLinRegNew.summary()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "LinRegNew"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 13]}, {"type": "Call", "children": [6, 9, 11]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "smf"}, {"type": "attr", "value": "ols"}, {"type": "keyword", "value": "formula", "children": [10]}, {"type": "Str", "value": "Temp ~ MEI + TSI + N2O + Aerosols"}, {"type": "keyword", "value": "data", "children": [12]}, {"type": "NameLoad", "value": "datatrain"}, {"type": "attr", "value": "fit"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "LinRegNew"}, {"type": "attr", "value": "summary"}], "funcs": ["statsmodels.formula.api.ols.fit", "statsmodels.formula.api.ols", "statsmodels.formula.api.ols.fit.summary"], "neighbor_cells": [132137], "id": 132138, "header": "", "annotation": []}
{"target_lineno": 209, "file": "/projects/bdata/jupyter/target/nb_383920.py", "context": "\nhd = open('movie_data.csv', 'r')\n\nnext(hd)\n\ncorpus_words = []\n\nfor review in hd:\n    review = review.rstrip()\n    words = tokenizer(review[:(- 2)])\n    for word in words:\n        corpus_words.append(word)\n\ncorpus_words = nltk.FreqDist(corpus_words)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 11, 14, 43]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "hd"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "movie_data.csv"}, {"type": "Str", "value": "r"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "next"}, {"type": "NameLoad", "value": "hd"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "corpus_words"}, {"type": "ListLoad"}, {"type": "For", "children": [15, 16, 17]}, {"type": "NameStore", "value": "review"}, {"type": "NameLoad", "value": "hd"}, {"type": "body", "children": [18, 24, 33]}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "review"}, {"type": "Call", "children": [21]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "review"}, {"type": "attr", "value": "rstrip"}, {"type": "Assign", "children": [25, 26]}, {"type": "NameStore", "value": "words"}, {"type": "Call", "children": [27, 28]}, {"type": "NameLoad", "value": "tokenizer"}, {"type": "SubscriptLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "review"}, {"type": "Slice", "children": [31]}, {"type": "UnaryOpUSub", "children": [32]}, {"type": "Num", "value": "2"}, {"type": "For", "children": [34, 35, 36]}, {"type": "NameStore", "value": "word"}, {"type": "NameLoad", "value": "words"}, {"type": "body", "children": [37]}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 42]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "corpus_words"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "word"}, {"type": "Assign", "children": [44, 45]}, {"type": "NameStore", "value": "corpus_words"}, {"type": "Call", "children": [46, 49]}, {"type": "AttributeLoad", "children": [47, 48]}, {"type": "NameLoad", "value": "nltk"}, {"type": "attr", "value": "FreqDist"}, {"type": "NameLoad", "value": "corpus_words"}], "funcs": ["open", "next", "review.rstrip.rstrip", "tokenizer", "nltk.FreqDist.append", "nltk.FreqDist"], "neighbor_cells": [75552], "id": 75553, "header": " Construct the entire corpus", "annotation": [" Compare the Minibatch Learning and Batch Learning", " ", " Previous we considered either 100 or 1000 minibatches to perform the logistic regression for sentiment model How does it compare with the entire batches Here we revisit the same data but use Nive Bayes classifier from sklearn and NLTK ", " ", " Construct the entire corpus"]}
{"target_lineno": 143, "file": "/projects/bdata/jupyter/target/nb_283689.py", "context": "\nn_users = rating_data.userid.unique().size\n\nn_items = rating_data.itemid.unique().size\n\ntrain_data_matrix = np.zeros((n_users, n_items))\n\nfor i in train_data.itertuples():\n    train_data_matrix[((i[1] - 1), (i[2] - 1))] = i[3]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11, 21, 30]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "n_users"}, {"type": "AttributeLoad", "children": [4, 10]}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "rating_data"}, {"type": "attr", "value": "userid"}, {"type": "attr", "value": "unique"}, {"type": "attr", "value": "size"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "n_items"}, {"type": "AttributeLoad", "children": [14, 20]}, {"type": "Call", "children": [15]}, {"type": "AttributeLoad", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "rating_data"}, {"type": "attr", "value": "itemid"}, {"type": "attr", "value": "unique"}, {"type": "attr", "value": "size"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "train_data_matrix"}, {"type": "Call", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "zeros"}, {"type": "TupleLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "n_users"}, {"type": "NameLoad", "value": "n_items"}, {"type": "For", "children": [31, 32, 36]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [33]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "train_data"}, {"type": "attr", "value": "itertuples"}, {"type": "body", "children": [37]}, {"type": "Assign", "children": [38, 54]}, {"type": "SubscriptStore", "children": [39, 40]}, {"type": "NameLoad", "value": "train_data_matrix"}, {"type": "Index", "children": [41]}, {"type": "TupleLoad", "children": [42, 48]}, {"type": "BinOpSub", "children": [43, 47]}, {"type": "SubscriptLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "i"}, {"type": "Index", "children": [46]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "BinOpSub", "children": [49, 53]}, {"type": "SubscriptLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "i"}, {"type": "Index", "children": [52]}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "1"}, {"type": "SubscriptLoad", "children": [55, 56]}, {"type": "NameLoad", "value": "i"}, {"type": "Index", "children": [57]}, {"type": "Num", "value": "3"}], "funcs": ["pandas.read_csv.userid.unique", "pandas.read_csv.itemid.unique", "numpy.zeros", "train_data.itertuples"], "neighbor_cells": [1228744], "id": 1228745, "header": "", "annotation": []}
{"target_lineno": 166, "file": "/projects/bdata/jupyter/target/nb_855003.py", "context": "\nprint('The SPDR S&P 500 ETF Trust dataframe has', df_sp_nrow, 'rows and', df_sp_ncol, 'columns.')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 6, 7, 8]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "The SPDR S&P 500 ETF Trust dataframe has"}, {"type": "NameLoad", "value": "df_sp_nrow"}, {"type": "Str", "value": "rows and"}, {"type": "NameLoad", "value": "df_sp_ncol"}, {"type": "Str", "value": "columns."}], "funcs": ["print"], "neighbor_cells": [964608], "id": 964609, "header": "", "annotation": []}
{"target_lineno": 92, "file": "/projects/bdata/jupyter/target/nb_671129.py", "context": "\nfor (train_index, test_index) in sss.split(X, y):\n    print('TRAIN:', train_index, 'TEST:', test_index)\n    (X_train, X_test) = (X[train_index], X[test_index])\n    (y_train, y_test) = (y[train_index], y[test_index])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 5, 11]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "train_index"}, {"type": "NameStore", "value": "test_index"}, {"type": "Call", "children": [6, 9, 10]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "sss"}, {"type": "attr", "value": "split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "body", "children": [12, 19, 32]}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 15, 16, 17, 18]}, {"type": "NameLoad", "value": "print"}, {"type": "Str", "value": "TRAIN:"}, {"type": "NameLoad", "value": "train_index"}, {"type": "Str", "value": "TEST:"}, {"type": "NameLoad", "value": "test_index"}, {"type": "Assign", "children": [20, 23]}, {"type": "TupleStore", "children": [21, 22]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "TupleLoad", "children": [24, 28]}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "X"}, {"type": "Index", "children": [27]}, {"type": "NameLoad", "value": "train_index"}, {"type": "SubscriptLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "X"}, {"type": "Index", "children": [31]}, {"type": "NameLoad", "value": "test_index"}, {"type": "Assign", "children": [33, 36]}, {"type": "TupleStore", "children": [34, 35]}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "TupleLoad", "children": [37, 41]}, {"type": "SubscriptLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "y"}, {"type": "Index", "children": [40]}, {"type": "NameLoad", "value": "train_index"}, {"type": "SubscriptLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "y"}, {"type": "Index", "children": [44]}, {"type": "NameLoad", "value": "test_index"}], "funcs": ["sklearn.model_selection.StratifiedShuffleSplit.split", "print"], "neighbor_cells": [1153510], "id": 1153511, "header": "", "annotation": []}
{"target_lineno": 281, "file": "/projects/bdata/jupyter/target/nb_940324.py", "context": "\nfig = sns.FacetGrid(titanic_df, hue='Pclass', aspect=4)\n\nfig.map(sns.kdeplot, 'Age', shade=True)\n\noldest = titanic_df['Age'].max()\n\nfig.set(xlim=(0, oldest))\n\nfig.set(title='Distribution of Age Grouped by Class')\n\nfig.add_legend()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12, 23, 32, 41, 48]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "fig"}, {"type": "Call", "children": [4, 7, 8, 10]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "FacetGrid"}, {"type": "NameLoad", "value": "titanic_df"}, {"type": "keyword", "value": "hue", "children": [9]}, {"type": "Str", "value": "Pclass"}, {"type": "keyword", "value": "aspect", "children": [11]}, {"type": "Num", "value": "4"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 17, 20, 21]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "fig"}, {"type": "attr", "value": "map"}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "kdeplot"}, {"type": "Str", "value": "Age"}, {"type": "keyword", "value": "shade", "children": [22]}, {"type": "NameConstant"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "oldest"}, {"type": "Call", "children": [26]}, {"type": "AttributeLoad", "children": [27, 31]}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "titanic_df"}, {"type": "Index", "children": [30]}, {"type": "Str", "value": "Age"}, {"type": "attr", "value": "max"}, {"type": "Expr", "children": [33]}, {"type": "Call", "children": [34, 37]}, {"type": "AttributeLoad", "children": [35, 36]}, {"type": "NameLoad", "value": "fig"}, {"type": "attr", "value": "set"}, {"type": "keyword", "value": "xlim", "children": [38]}, {"type": "TupleLoad", "children": [39, 40]}, {"type": "Num", "value": "0"}, {"type": "NameLoad", "value": "oldest"}, {"type": "Expr", "children": [42]}, {"type": "Call", "children": [43, 46]}, {"type": "AttributeLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "fig"}, {"type": "attr", "value": "set"}, {"type": "keyword", "value": "title", "children": [47]}, {"type": "Str", "value": "Distribution of Age Grouped by Class"}, {"type": "Expr", "children": [49]}, {"type": "Call", "children": [50]}, {"type": "AttributeLoad", "children": [51, 52]}, {"type": "NameLoad", "value": "fig"}, {"type": "attr", "value": "add_legend"}], "funcs": ["seaborn.FacetGrid", "seaborn.FacetGrid.map", "max", "seaborn.FacetGrid.set", "seaborn.FacetGrid.set", "seaborn.FacetGrid.add_legend"], "neighbor_cells": [1235856], "id": 1235857, "header": " Grouped by Class", "annotation": [" Grouped by Class"]}
{"funcs": ["pandas.concat.head"], "file": "/projects/bdata/jupyter/target/nb_59680.py", "target_func": "none_func", "context": "\nX.head()\n", "target_lineno": 143, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "head"}], "stage": null, "id": 381717, "neighbor_cells": [381716], "header": "", "annotation": []}
{"target_lineno": 237, "file": "/projects/bdata/jupyter/target/nb_333971.py", "context": "\nX = X.values\n\ny = y.values\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "values"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "y"}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "y"}, {"type": "attr", "value": "values"}], "funcs": [], "neighbor_cells": [1086717], "id": 1086718, "header": "", "annotation": []}
{"target_lineno": 3, "file": "/projects/bdata/jupyter/target/nb_428197.py", "context": "\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport sklearn\n\nfrom sklearn import preprocessing\n\nfrom sklearn import linear_model\n\nfrom sklearn import svm\n\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.naive_bayes import BernoulliNB\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nget_ipython().run_line_magic('matplotlib', 'inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 12, 14, 16, 18, 20, 22, 24, 26]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "pandas", "children": [6]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [9]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "sklearn"}, {"type": "ImportFrom", "value": "sklearn", "children": [13]}, {"type": "alias", "value": "preprocessing"}, {"type": "ImportFrom", "value": "sklearn", "children": [15]}, {"type": "alias", "value": "linear_model"}, {"type": "ImportFrom", "value": "sklearn", "children": [17]}, {"type": "alias", "value": "svm"}, {"type": "ImportFrom", "value": "sklearn", "children": [19]}, {"type": "alias", "value": "metrics"}, {"type": "ImportFrom", "value": "sklearn.model_selection", "children": [21]}, {"type": "alias", "value": "train_test_split"}, {"type": "ImportFrom", "value": "sklearn.naive_bayes", "children": [23]}, {"type": "alias", "value": "BernoulliNB"}, {"type": "ImportFrom", "value": "sklearn.ensemble", "children": [25]}, {"type": "alias", "value": "RandomForestClassifier"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 32, 33]}, {"type": "AttributeLoad", "children": [29, 31]}, {"type": "Call", "children": [30]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 253134, "header": "", "annotation": [" usr bin env python", " coding utf 8"]}
{"target_lineno": 55, "file": "/projects/bdata/jupyter/target/nb_50106.py", "context": "\nfrom sklearn.datasets import load_digits\n\ndigits = load_digits()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "sklearn.datasets", "children": [2]}, {"type": "alias", "value": "load_digits"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "digits"}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "load_digits"}], "funcs": ["sklearn.datasets.load_digits"], "neighbor_cells": [488620], "id": 488621, "header": "", "annotation": [" Classifying Digits ", " SKLearn has many intereting datasets pre loaded in it one of which is load digits sklearn datasets load digits http scikit learn org stable modules generated sklearn datasets load digits html Load digits is a dataset of digits with each datapoint being a 8x8 image of a digit ", " ", " You can load this dataset as follows"]}
{"target_lineno": 54, "file": "/projects/bdata/jupyter/target/nb_919970.py", "context": "\ncustomers.describe()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "customers"}, {"type": "attr", "value": "describe"}], "funcs": ["pandas.read_csv.describe"], "neighbor_cells": [1317464], "id": 1317465, "header": "", "annotation": []}
{"target_lineno": 28, "file": "/projects/bdata/jupyter/target/nb_810549.py", "context": "\n(np.random.binomial(1000, 0.5) / 1000)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpDiv", "children": [3, 11]}, {"type": "Call", "children": [4, 9, 10]}, {"type": "AttributeLoad", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "random"}, {"type": "attr", "value": "binomial"}, {"type": "Num", "value": "1000"}, {"type": "Num", "value": "0.5"}, {"type": "Num", "value": "1000"}], "funcs": ["numpy.random.binomial"], "neighbor_cells": [92260], "id": 92261, "header": "", "annotation": []}
{"funcs": ["reshape.reshape"], "file": "/projects/bdata/jupyter/target/nb_845461.py", "target_func": "none_func", "context": "\nheight_no = remove_out.height[(remove_out.height_outlier == False)].values\n\nweight_no = remove_out.weight[(remove_out.height_outlier == False)].values\n\nprint weight_no.shape\n\nweight_no = weight_no.reshape(weight_no.shape[0], 1)\n\nprint height_no.shape, weight_no.shape\n", "target_lineno": 251, "nodes": [{"type": "Module", "children": [1, 15, 29, 33, 46]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "height_no"}, {"type": "AttributeLoad", "children": [4, 14]}, {"type": "SubscriptLoad", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "remove_out"}, {"type": "attr", "value": "height"}, {"type": "Index", "children": [9]}, {"type": "CompareEq", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "remove_out"}, {"type": "attr", "value": "height_outlier"}, {"type": "NameLoad", "value": "False"}, {"type": "attr", "value": "values"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "weight_no"}, {"type": "AttributeLoad", "children": [18, 28]}, {"type": "SubscriptLoad", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "remove_out"}, {"type": "attr", "value": "weight"}, {"type": "Index", "children": [23]}, {"type": "CompareEq", "children": [24, 27]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "remove_out"}, {"type": "attr", "value": "height_outlier"}, {"type": "NameLoad", "value": "False"}, {"type": "attr", "value": "values"}, {"type": "Print", "children": [30]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "weight_no"}, {"type": "attr", "value": "shape"}, {"type": "Assign", "children": [34, 35]}, {"type": "NameStore", "value": "weight_no"}, {"type": "Call", "children": [36, 39, 45]}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "weight_no"}, {"type": "attr", "value": "reshape"}, {"type": "SubscriptLoad", "children": [40, 43]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "weight_no"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [44]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "Print", "children": [47, 50]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "height_no"}, {"type": "attr", "value": "shape"}, {"type": "AttributeLoad", "children": [51, 52]}, {"type": "NameLoad", "value": "weight_no"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 396700, "neighbor_cells": [396699], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.describe"], "file": "/projects/bdata/jupyter/target/nb_974380.py", "target_func": "none_func", "context": "\ntrain_df.describe()\n", "target_lineno": 80, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "train_df"}, {"type": "attr", "value": "describe"}], "stage": null, "id": 1140986, "neighbor_cells": [1140985], "header": "", "annotation": []}
{"funcs": ["igraph.Graph.Read_Pajek.community_label_propagation"], "file": "/projects/bdata/jupyter/target/nb_48195.py", "target_func": "none_func", "context": "\ncomm = g.community_label_propagation()\n", "target_lineno": 376, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "comm"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "g"}, {"type": "attr", "value": "community_label_propagation"}], "stage": null, "id": 511022, "neighbor_cells": [511021], "header": "", "annotation": []}
{"target_lineno": 66, "file": "/projects/bdata/jupyter/target/nb_195258.py", "context": "\nimport os\n\nfrom scipy import ndimage\n\n\ndef load_images_from_folder(folder):\n    images = []\n    for filename in os.listdir(folder)[0:len(os.listdir(folder))]:\n        img = (ndimage.imread(os.path.join(folder, filename), flatten=True) / 255)\n        if (img is not None):\n            images.append(img)\n    return images\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 5]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "os"}, {"type": "ImportFrom", "value": "scipy", "children": [4]}, {"type": "alias", "value": "ndimage"}, {"type": "FunctionDef", "value": "load_images_from_folder", "children": [6, 10, 63]}, {"type": "arguments", "children": [7, 9]}, {"type": "args", "children": [8]}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [11, 14, 61]}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "images"}, {"type": "ListLoad"}, {"type": "For", "children": [15, 16, 31]}, {"type": "NameStore", "value": "filename"}, {"type": "SubscriptLoad", "children": [17, 22]}, {"type": "Call", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "listdir"}, {"type": "NameLoad", "value": "folder"}, {"type": "Slice", "children": [23, 24]}, {"type": "Num", "value": "0"}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "len"}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "listdir"}, {"type": "NameLoad", "value": "folder"}, {"type": "body", "children": [32, 50]}, {"type": "Assign", "children": [33, 34]}, {"type": "NameStore", "value": "img"}, {"type": "BinOpDiv", "children": [35, 49]}, {"type": "Call", "children": [36, 39, 47]}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "ndimage"}, {"type": "attr", "value": "imread"}, {"type": "Call", "children": [40, 45, 46]}, {"type": "AttributeLoad", "children": [41, 44]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "os"}, {"type": "attr", "value": "path"}, {"type": "attr", "value": "join"}, {"type": "NameLoad", "value": "folder"}, {"type": "NameLoad", "value": "filename"}, {"type": "keyword", "value": "flatten", "children": [48]}, {"type": "NameConstant"}, {"type": "Num", "value": "255"}, {"type": "If", "children": [51, 54]}, {"type": "CompareIsNot", "children": [52, 53]}, {"type": "NameLoad", "value": "img"}, {"type": "NameConstant"}, {"type": "body", "children": [55]}, {"type": "Expr", "children": [56]}, {"type": "Call", "children": [57, 60]}, {"type": "AttributeLoad", "children": [58, 59]}, {"type": "NameLoad", "value": "images"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "img"}, {"type": "Return", "children": [62]}, {"type": "NameLoad", "value": "images"}, {"type": "decorator_list"}], "funcs": ["os.listdir", "len", "os.listdir", "scipy.ndimage.imread", "os.path.join", "append"], "neighbor_cells": [927662], "id": 927663, "header": " Extract all Images into greyscale", "annotation": [" Extract all Images into greyscale"]}
{"funcs": ["dropna", "dropna.head"], "file": "/projects/bdata/jupyter/target/nb_754267.py", "target_func": "none_func", "context": "\ndeck = titanic_df['Cabin'].dropna()\n\ndeck.head()\n", "target_lineno": 614, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "deck"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 9]}, {"type": "SubscriptLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "titanic_df"}, {"type": "Index", "children": [8]}, {"type": "Str", "value": "Cabin"}, {"type": "attr", "value": "dropna"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "deck"}, {"type": "attr", "value": "head"}], "stage": null, "id": 715048, "neighbor_cells": [715047], "header": " 2 What deck were the passengers on and how does that relate to their class ", "annotation": [" 2 What deck were the passengers on and how does that relate to their class "]}
{"target_lineno": 287, "file": "/projects/bdata/jupyter/target/nb_993548.py", "context": "\nn_dists = 1000\n\nmm = make_mm(n_dists)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "n_dists"}, {"type": "Num", "value": "1000"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "mm"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "make_mm"}, {"type": "NameLoad", "value": "n_dists"}], "funcs": ["make_mm"], "neighbor_cells": [764311], "id": 764312, "header": "", "annotation": []}
{"target_lineno": 191, "file": "/projects/bdata/jupyter/target/nb_712090.py", "context": "\npreds.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "preds"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [759761], "id": 759762, "header": "", "annotation": []}
{"target_lineno": 31, "file": "/projects/bdata/jupyter/target/nb_667282.py", "context": "\nimport numpy as np\n\nimport keras\n\nimport idx2numpy\n\nimport os\n\nimport h5py\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 6, 8, 10]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "keras"}, {"type": "Import", "children": [7]}, {"type": "alias", "value": "idx2numpy"}, {"type": "Import", "children": [9]}, {"type": "alias", "value": "os"}, {"type": "Import", "children": [11]}, {"type": "alias", "value": "h5py"}], "funcs": [], "neighbor_cells": [-1], "id": 388289, "header": " Import necessary packages", "annotation": [" usr bin env python", " coding utf 8", " Machine Learning Engineer Nanodegree", " Deep Learning", " Project Build a Digit Recognition Program", " ", " In this notebook a template is provided for you to implement your functionality in stages which is required to successfully complete this project If additional code is required that cannot be included in the notebook be sure that the Python code is successfully imported and included in your submission if necessary Sections that begin with Implementation in the header indicate where you should begin your implementation for your project Note that some sections of implementation are optional and will be marked with Optional in the header ", " ", " In addition to implementing code there will be questions that you must answer which relate to the project and your implementation Each section where you will answer a question is preceded by a Question header Carefully read each question and provide thorough answers in the following text boxes that begin with Answer Your project submission will be evaluated based on your answers to each of the questions and the implementation you provide ", " ", " Note Code and Markdown cells can be executed using the Shift Enter keyboard shortcut In addition Markdown cells can be edited by typically double clicking the cell to enter edit mode ", " ", " Step 1 Design and Test a Model Architecture", " Design and implement a deep learning model that learns to recognize sequences of digits Train the model using synthetic data generated by concatenating character images from notMNIST http yaroslavvb blogspot com 2011 09 notmnist dataset html or MNIST http yann lecun com exdb mnist To produce a synthetic sequence of digits for testing you can for example limit yourself to sequences up to five digits and use five classifiers on top of your deep network You would have to incorporate an additional blank character to account for shorter number sequences ", " ", " There are various aspects to consider when thinking about this problem ", " Your model can be derived from a deep neural net or a convolutional network ", " You could experiment sharing or not the weights between the softmax classifiers ", " You can also use a recurrent network in your deep neural net to replace the classification layers and directly emit the sequence of digits one at a time ", " ", " You can use Keras to implement your model Read more at keras io https keras io ", " ", " Here is an example of a published baseline model on this problem http static googleusercontent com media research google com en pubs archive 42241 pdf video https www youtube com watch v vGPI JvLoN0 You are not expected to model your architecture precisely using this model nor get the same performance levels but this is more to show an exampe of an approach used to solve this particular problem We encourage you to try out different architectures for yourself and see what works best for you Here is a useful forum post https discussions udacity com t goodfellow et al 2013 architecture 202363 discussing the architecture as described in the paper and here is another one https discussions udacity com t what loss function to use for multi digit svhn training 176897 discussing the loss function ", " Implementation", " Use the code cell or multiple code cells if necessary to implement the first step of your project Once you have completed your implementation and are satisfied with the results be sure to thoroughly answer the questions that follow ", " Import necessary packages"]}
{"funcs": ["get_words_dict"], "file": "/projects/bdata/jupyter/target/nb_6942.py", "target_func": "none_func", "context": "\n(words_dict, common_words) = get_words_dict(df, model.vocab)\n", "target_lineno": 132, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "words_dict"}, {"type": "NameStore", "value": "common_words"}, {"type": "Call", "children": [6, 7, 8]}, {"type": "NameLoad", "value": "get_words_dict"}, {"type": "NameLoad", "value": "df"}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "vocab"}], "stage": null, "id": 943846, "neighbor_cells": [943845], "header": "", "annotation": []}
{"funcs": ["sklearn.cross_validation.cross_val_score", "sklearn.cross_validation.cross_val_score.mean", "sklearn.cross_validation.cross_val_score.std", "sklearn.tree.DecisionTreeRegressor.fit"], "file": "/projects/bdata/jupyter/target/nb_564185.py", "target_func": "none_func", "context": "\nscoring = 'mean_squared_error'\n\nresults = cross_validation.cross_val_score(model, X, Y, cv=kfold, scoring=scoring)\n\nprint 'Scoring according to mean_squared_error'\n\nprint results\n\nprint '\\n Mean      Standard deviation'\n\nprint ('%.2f      %.2f' % (results.mean(), results.std()))\n\nmodel.fit(X, Y)\n", "target_lineno": 416, "nodes": [{"type": "Module", "children": [1, 4, 17, 19, 21, 23, 35]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "scoring"}, {"type": "Str", "value": "mean_squared_error"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "results"}, {"type": "Call", "children": [7, 10, 11, 12, 13, 15]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "cross_validation"}, {"type": "attr", "value": "cross_val_score"}, {"type": "NameLoad", "value": "model"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "Y"}, {"type": "keyword", "children": [14], "value": "cv"}, {"type": "NameLoad", "value": "kfold"}, {"type": "keyword", "children": [16], "value": "scoring"}, {"type": "NameLoad", "value": "scoring"}, {"type": "Print", "children": [18]}, {"type": "Str", "value": "Scoring according to mean_squared_error"}, {"type": "Print", "children": [20]}, {"type": "NameLoad", "value": "results"}, {"type": "Print", "children": [22]}, {"type": "Str", "value": "\n Mean      Standard deviation"}, {"type": "Print", "children": [24]}, {"type": "BinOpMod", "children": [25, 26]}, {"type": "Str", "value": "%.2f      %.2f"}, {"type": "TupleLoad", "children": [27, 31]}, {"type": "Call", "children": [28]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "results"}, {"type": "attr", "value": "mean"}, {"type": "Call", "children": [32]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "results"}, {"type": "attr", "value": "std"}, {"type": "Expr", "children": [36]}, {"type": "Call", "children": [37, 40, 41]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "Y"}], "stage": null, "id": 1095501, "neighbor_cells": [1095500], "header": " Cross validation", "annotation": [" Cross validation"]}
{"funcs": ["seaborn.countplot"], "file": "/projects/bdata/jupyter/target/nb_435329.py", "target_func": "none_func", "context": "\nsns.countplot(attr)\n", "target_lineno": 481, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "countplot"}, {"type": "NameLoad", "value": "attr"}], "stage": null, "id": 884114, "neighbor_cells": [884113], "header": "", "annotation": []}
{"target_lineno": 69, "file": "/projects/bdata/jupyter/target/nb_532193.py", "context": "\ncluster_grid_res\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "cluster_grid_res"}], "funcs": [], "neighbor_cells": [298906], "id": 298907, "header": "", "annotation": []}
{"target_lineno": 65, "file": "/projects/bdata/jupyter/target/nb_83301.py", "context": "\nfeatures = ['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "features"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9, 10, 11]}, {"type": "Str", "value": "Survived"}, {"type": "Str", "value": "Pclass"}, {"type": "Str", "value": "Sex"}, {"type": "Str", "value": "Age"}, {"type": "Str", "value": "SibSp"}, {"type": "Str", "value": "Parch"}, {"type": "Str", "value": "Fare"}, {"type": "Str", "value": "Embarked"}], "funcs": [], "neighbor_cells": [856116], "id": 856117, "header": "", "annotation": [" How many different levels are in each feature "]}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_83540.py", "target_func": "none_func", "context": "\nget_ipython().magic(u'pwd')\n", "target_lineno": 7, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "pwd"}], "stage": null, "id": 450722, "neighbor_cells": [-1], "header": "", "annotation": [" coding utf 8", " Class 10 Homework Yelp Votes", " Read yelp csv into a DataFrame "]}
{"funcs": ["matplotlib.pyplot.scatter", "matplotlib.pyplot.scatter", "matplotlib.pyplot.axis", "matplotlib.pyplot.show"], "file": "/projects/bdata/jupyter/target/nb_782939.py", "target_func": "none_func", "context": "\nplt.scatter(data[:, 0], data[:, 1], c=group, cmap=plt.cm.Pastel1)\n\nplt.scatter(model.k_means[:, 0], model.k_means[:, 1], c='b', s=30)\n\nplt.axis('off')\n\nplt.show()\n", "target_lineno": 512, "nodes": [{"type": "Module", "children": [1, 26, 51, 57]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 12, 18, 20]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "data"}, {"type": "ExtSlice", "children": [9, 10]}, {"type": "Slice"}, {"type": "Index", "children": [11]}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "data"}, {"type": "ExtSlice", "children": [15, 16]}, {"type": "Slice"}, {"type": "Index", "children": [17]}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [19], "value": "c"}, {"type": "NameLoad", "value": "group"}, {"type": "keyword", "children": [21], "value": "cmap"}, {"type": "AttributeLoad", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "cm"}, {"type": "attr", "value": "Pastel1"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 31, 39, 47, 49]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "SubscriptLoad", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "k_means"}, {"type": "ExtSlice", "children": [36, 37]}, {"type": "Slice"}, {"type": "Index", "children": [38]}, {"type": "Num", "value": "0"}, {"type": "SubscriptLoad", "children": [40, 43]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "k_means"}, {"type": "ExtSlice", "children": [44, 45]}, {"type": "Slice"}, {"type": "Index", "children": [46]}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [48], "value": "c"}, {"type": "Str", "value": "b"}, {"type": "keyword", "children": [50], "value": "s"}, {"type": "Num", "value": "30"}, {"type": "Expr", "children": [52]}, {"type": "Call", "children": [53, 56]}, {"type": "AttributeLoad", "children": [54, 55]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "axis"}, {"type": "Str", "value": "off"}, {"type": "Expr", "children": [58]}, {"type": "Call", "children": [59]}, {"type": "AttributeLoad", "children": [60, 61]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "stage": null, "id": 1145763, "neighbor_cells": [1145762], "header": "", "annotation": []}
{"target_lineno": 149, "file": "/projects/bdata/jupyter/target/nb_195258.py", "context": "\nsvm = joblib.load('svm.pkl')\n\nsvm_performance = BinaryClassificationPerformance(svm.predict(data_train), y_train, 'svm')\n\nsvm_performance.compute_measures()\n\nprint(svm_performance.performance_measures)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 19, 24]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "svm"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "joblib"}, {"type": "attr", "value": "load"}, {"type": "Str", "value": "svm.pkl"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "svm_performance"}, {"type": "Call", "children": [11, 12, 17, 18]}, {"type": "NameLoad", "value": "BinaryClassificationPerformance"}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "svm"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "data_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Str", "value": "svm"}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "svm_performance"}, {"type": "attr", "value": "compute_measures"}, {"type": "Expr", "children": [25]}, {"type": "Call", "children": [26, 27]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "svm_performance"}, {"type": "attr", "value": "performance_measures"}], "funcs": ["sklearn.externals.joblib.load", "BinaryClassificationPerformance", "sklearn.externals.joblib.load.predict", "BinaryClassificationPerformance.compute_measures", "print"], "neighbor_cells": [927667], "id": 927668, "header": "", "annotation": []}
{"target_lineno": 197, "file": "/projects/bdata/jupyter/target/nb_486145.py", "context": "\nfrom sklearn.feature_selection import SelectKBest\n\nfrom sklearn.feature_selection import chi2\n\nfrom sklearn import preprocessing\n\nnormalized_x = preprocessing.normalize(train_data.drop('100', axis=1))\n\nx_data = pd.DataFrame(data=normalized_x)\n\ny_data = train_data['100']\n\ny_data\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 5, 7, 20, 28, 34]}, {"type": "ImportFrom", "value": "sklearn.feature_selection", "children": [2]}, {"type": "alias", "value": "SelectKBest"}, {"type": "ImportFrom", "value": "sklearn.feature_selection", "children": [4]}, {"type": "alias", "value": "chi2"}, {"type": "ImportFrom", "value": "sklearn", "children": [6]}, {"type": "alias", "value": "preprocessing"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "normalized_x"}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "preprocessing"}, {"type": "attr", "value": "normalize"}, {"type": "Call", "children": [14, 17, 18]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "train_data"}, {"type": "attr", "value": "drop"}, {"type": "Str", "value": "100"}, {"type": "keyword", "value": "axis", "children": [19]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "x_data"}, {"type": "Call", "children": [23, 26]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "keyword", "value": "data", "children": [27]}, {"type": "NameLoad", "value": "normalized_x"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "y_data"}, {"type": "SubscriptLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "train_data"}, {"type": "Index", "children": [33]}, {"type": "Str", "value": "100"}, {"type": "Expr", "children": [35]}, {"type": "NameLoad", "value": "y_data"}], "funcs": ["sklearn.preprocessing.normalize", "pandas.read_csv.append.drop.dropna.drop", "pandas.DataFrame"], "neighbor_cells": [92056], "id": 92057, "header": "", "annotation": []}
{"target_lineno": 35, "file": "/projects/bdata/jupyter/target/nb_600081.py", "context": "\ndataLocation = '/vol/data/numpyTraining/'\n\ntrainingImages = 'padded_normalized_training_images.npy'\n\ntrainingLabels = 'padded_normalized_training_labels.npy'\n\nimg_rows = 320\n\nimg_cols = 256\n\nsmooth = 1.0\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10, 13, 16]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dataLocation"}, {"type": "Str", "value": "/vol/data/numpyTraining/"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "trainingImages"}, {"type": "Str", "value": "padded_normalized_training_images.npy"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "trainingLabels"}, {"type": "Str", "value": "padded_normalized_training_labels.npy"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "img_rows"}, {"type": "Num", "value": "320"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "img_cols"}, {"type": "Num", "value": "256"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "smooth"}, {"type": "Num", "value": "1.0"}], "funcs": [], "neighbor_cells": [226191], "id": 226192, "header": "", "annotation": []}
{"funcs": ["numpy.unique", "numpy.nonzero"], "file": "/projects/bdata/jupyter/target/nb_711920.py", "target_func": "none_func", "context": "\n\ndef remove_NAs(data, bbox_array):\n    nonZero_indices = np.unique(np.nonzero(data)[0])\n    data = data[nonZero_indices]\n    labels = bbox_array[nonZero_indices]\n    labels = labels[:, :, 1]\n    return (data, labels)\n", "target_lineno": 348, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 7, 47], "value": "remove_NAs"}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "NameParam", "value": "data"}, {"type": "NameParam", "value": "bbox_array"}, {"type": "defaults"}, {"type": "body", "children": [8, 22, 28, 34, 43]}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "nonZero_indices"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "unique"}, {"type": "SubscriptLoad", "children": [15, 20]}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "nonzero"}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [21]}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "data"}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [27]}, {"type": "NameLoad", "value": "nonZero_indices"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "labels"}, {"type": "SubscriptLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "bbox_array"}, {"type": "Index", "children": [33]}, {"type": "NameLoad", "value": "nonZero_indices"}, {"type": "Assign", "children": [35, 36]}, {"type": "NameStore", "value": "labels"}, {"type": "SubscriptLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "labels"}, {"type": "ExtSlice", "children": [39, 40, 41]}, {"type": "Slice"}, {"type": "Slice"}, {"type": "Index", "children": [42]}, {"type": "Num", "value": "1"}, {"type": "Return", "children": [44]}, {"type": "TupleLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "data"}, {"type": "NameLoad", "value": "labels"}, {"type": "decorator_list"}], "stage": null, "id": 243034, "neighbor_cells": [243033], "header": "", "annotation": []}
{"target_lineno": 106, "file": "/projects/bdata/jupyter/target/nb_375075.py", "context": "\ny = output_vector.values\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y"}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "output_vector"}, {"type": "attr", "value": "values"}], "funcs": [], "neighbor_cells": [585127], "id": 585128, "header": "", "annotation": []}
{"funcs": ["linspace", "subplots", "plot", "scipy.stats.norm.pdf", "plot", "scipy.stats.norm.cdf", "hist", "scipy.stats.norm.rvs"], "file": "/projects/bdata/jupyter/target/nb_625221.py", "target_func": "none_func", "context": "\nx = linspace((-5), 5, 100)\n\n(fig, axes) = subplots(3, 1, sharex=True)\n\naxes[0].plot(x, Y.pdf(x))\n\naxes[1].plot(x, Y.cdf(x))\n\naxes[2].hist(Y.rvs(size=1000), bins=50)\n", "target_lineno": 944, "nodes": [{"type": "Module", "children": [1, 8, 18, 32, 46]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "x"}, {"type": "Call", "children": [4, 5, 6, 7]}, {"type": "NameLoad", "value": "linspace"}, {"type": "Num", "value": "-5"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "100"}, {"type": "Assign", "children": [9, 12]}, {"type": "TupleStore", "children": [10, 11]}, {"type": "NameStore", "value": "fig"}, {"type": "NameStore", "value": "axes"}, {"type": "Call", "children": [13, 14, 15, 16]}, {"type": "NameLoad", "value": "subplots"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [17], "value": "sharex"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [19]}, {"type": "Call", "children": [20, 26, 27]}, {"type": "AttributeLoad", "children": [21, 25]}, {"type": "SubscriptLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "axes"}, {"type": "Index", "children": [24]}, {"type": "Num", "value": "0"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "x"}, {"type": "Call", "children": [28, 31]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "Y"}, {"type": "attr", "value": "pdf"}, {"type": "NameLoad", "value": "x"}, {"type": "Expr", "children": [33]}, {"type": "Call", "children": [34, 40, 41]}, {"type": "AttributeLoad", "children": [35, 39]}, {"type": "SubscriptLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "axes"}, {"type": "Index", "children": [38]}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "x"}, {"type": "Call", "children": [42, 45]}, {"type": "AttributeLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "Y"}, {"type": "attr", "value": "cdf"}, {"type": "NameLoad", "value": "x"}, {"type": "Expr", "children": [47]}, {"type": "Call", "children": [48, 54, 60]}, {"type": "AttributeLoad", "children": [49, 53]}, {"type": "SubscriptLoad", "children": [50, 51]}, {"type": "NameLoad", "value": "axes"}, {"type": "Index", "children": [52]}, {"type": "Num", "value": "2"}, {"type": "attr", "value": "hist"}, {"type": "Call", "children": [55, 58]}, {"type": "AttributeLoad", "children": [56, 57]}, {"type": "NameLoad", "value": "Y"}, {"type": "attr", "value": "rvs"}, {"type": "keyword", "children": [59], "value": "size"}, {"type": "Num", "value": "1000"}, {"type": "keyword", "children": [61], "value": "bins"}, {"type": "Num", "value": "50"}], "stage": null, "id": 676323, "neighbor_cells": [676322], "header": "", "annotation": []}
{"funcs": ["detectionInformation", "index", "GeorgeW_Bush_Detektor"], "file": "/projects/bdata/jupyter/target/nb_850756.py", "target_func": "none_func", "context": "\nprint SuchePerson\n\ndetectionInformation(HKgewichtsVektor_w, HKSchwellwert_b, projezierteTestBilder[NameList.index(SuchePerson)], GeorgeW_Bush_Detektor(TestBilder, SuchePerson))\n\nprint HKgewichtsVektor_w, HKSchwellwert_b\n", "target_lineno": 644, "nodes": [{"type": "Module", "children": [1, 3, 20]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "SuchePerson"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 6, 7, 8, 16]}, {"type": "NameLoad", "value": "detectionInformation"}, {"type": "NameLoad", "value": "HKgewichtsVektor_w"}, {"type": "NameLoad", "value": "HKSchwellwert_b"}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "projezierteTestBilder"}, {"type": "Index", "children": [11]}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "NameList"}, {"type": "attr", "value": "index"}, {"type": "NameLoad", "value": "SuchePerson"}, {"type": "Call", "children": [17, 18, 19]}, {"type": "NameLoad", "value": "GeorgeW_Bush_Detektor"}, {"type": "NameLoad", "value": "TestBilder"}, {"type": "NameLoad", "value": "SuchePerson"}, {"type": "Print", "children": [21, 22]}, {"type": "NameLoad", "value": "HKgewichtsVektor_w"}, {"type": "NameLoad", "value": "HKSchwellwert_b"}], "stage": null, "id": 504921, "neighbor_cells": [504920], "header": "", "annotation": []}
{"target_lineno": 106, "file": "/projects/bdata/jupyter/target/nb_919893.py", "context": "\nsns.pairplot(customers)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "pairplot"}, {"type": "NameLoad", "value": "customers"}], "funcs": ["seaborn.pairplot"], "neighbor_cells": [928154], "id": 928155, "header": "", "annotation": [" Let s explore these types of relationships across the entire data set Use pairplot https stanford edu mwaskom software seaborn tutorial axis grids html plotting pairwise relationships with pairgrid and pairplot to recreate the plot below Don t worry about the the colors "]}
{"target_lineno": 40, "file": "/projects/bdata/jupyter/target/nb_929506.py", "context": "\ndata['Time'] = time\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "data"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "Time"}, {"type": "NameLoad", "value": "time"}], "funcs": [], "neighbor_cells": [587363], "id": 587364, "header": "", "annotation": []}
{"target_lineno": 48, "file": "/projects/bdata/jupyter/target/nb_247891.py", "context": "\nvectors = vectorizer.fit_transform(newsgroups_train.data)\n\nvectors\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "vectors"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "vectorizer"}, {"type": "attr", "value": "fit_transform"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "newsgroups_train"}, {"type": "attr", "value": "data"}, {"type": "Expr", "children": [11]}, {"type": "NameLoad", "value": "vectors"}], "funcs": ["sklearn.feature_extraction.text.CountVectorizer.fit_transform"], "neighbor_cells": [1338101], "id": 1338102, "header": "", "annotation": []}
{"funcs": ["numpy.max"], "file": "/projects/bdata/jupyter/target/nb_834960.py", "target_func": "none_func", "context": "\nmaxPriceByTicker = numpy.max(cleanPrices, axis=0)\n\nprint cleanPrices.ix[:, (maxPriceByTicker > 1000)]\n", "target_lineno": 879, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "maxPriceByTicker"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "numpy"}, {"type": "attr", "value": "max"}, {"type": "NameLoad", "value": "cleanPrices"}, {"type": "keyword", "children": [9], "value": "axis"}, {"type": "Num", "value": "0"}, {"type": "Print", "children": [11]}, {"type": "SubscriptLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "cleanPrices"}, {"type": "attr", "value": "ix"}, {"type": "ExtSlice", "children": [16, 17]}, {"type": "Slice"}, {"type": "Index", "children": [18]}, {"type": "CompareGt", "children": [19, 20]}, {"type": "NameLoad", "value": "maxPriceByTicker"}, {"type": "Num", "value": "1000"}], "stage": null, "id": 1005420, "neighbor_cells": [1005419], "header": "", "annotation": [" We check for relatively high prices "]}
{"target_lineno": 52, "file": "/projects/bdata/jupyter/target/nb_59035.py", "context": "\nX_train = pd.read_csv('data/train_inter.csv')\n\nX_test = pd.read_csv('data/test_inter.csv')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X_train"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "data/train_inter.csv"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "X_test"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "data/test_inter.csv"}], "funcs": ["pandas.read_csv", "pandas.read_csv"], "neighbor_cells": [-1], "id": 464406, "header": "", "annotation": []}
{"target_lineno": 289, "file": "/projects/bdata/jupyter/target/nb_510154.py", "context": "\nplt.plot(r, p)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "r"}, {"type": "NameLoad", "value": "p"}], "funcs": ["matplotlib.pyplot.plot"], "neighbor_cells": [998698], "id": 998699, "header": "", "annotation": []}
{"funcs": ["sklearn.feature_extraction.text.CountVectorizer.fit.transform"], "file": "/projects/bdata/jupyter/target/nb_189205.py", "target_func": "none_func", "context": "\nbow4 = bow_transformer.transform([message4])\n\nprint bow4\n\nprint bow4.shape\n", "target_lineno": 295, "nodes": [{"type": "Module", "children": [1, 9, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "bow4"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "bow_transformer"}, {"type": "attr", "value": "transform"}, {"type": "ListLoad", "children": [8]}, {"type": "NameLoad", "value": "message4"}, {"type": "Print", "children": [10]}, {"type": "NameLoad", "value": "bow4"}, {"type": "Print", "children": [12]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "bow4"}, {"type": "attr", "value": "shape"}], "stage": null, "id": 403788, "neighbor_cells": [403787], "header": "", "annotation": []}
{"target_lineno": 414, "file": "/projects/bdata/jupyter/target/nb_408211.py", "context": "\nlogreg_train = LogisticRegression().fit(X_train, y_train)\n\nprint(logreg_train.coef_)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "logreg_train"}, {"type": "Call", "children": [4, 8, 9]}, {"type": "AttributeLoad", "children": [5, 7]}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "LogisticRegression"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "logreg_train"}, {"type": "attr", "value": "coef_"}], "funcs": ["sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "print"], "neighbor_cells": [922073], "id": 922074, "header": "", "annotation": []}
{"funcs": ["sklearn.feature_extraction.text.TfidfVectorizer", "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", "scipy.sparse.linalg.svds", "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform.dot", "V.transpose"], "file": "/projects/bdata/jupyter/target/nb_601768.py", "target_func": "none_func", "context": "\nvectorizer = TfidfVectorizer(stop_words='english', max_df=0.75, ngram_range=(1, 1))\n\nTFIDF_matrix = vectorizer.fit_transform(corpus)\n\nnum_topics = 150\n\n(_, _, V) = svds(TFIDF_matrix, k=num_topics)\n\nTOPIC_matrix = TFIDF_matrix.dot(V.transpose())\n\ndel V\n", "target_lineno": 92, "nodes": [{"type": "Module", "children": [1, 13, 20, 23, 33, 43]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "vectorizer"}, {"type": "Call", "children": [4, 5, 7, 9]}, {"type": "NameLoad", "value": "TfidfVectorizer"}, {"type": "keyword", "children": [6], "value": "stop_words"}, {"type": "Str", "value": "english"}, {"type": "keyword", "children": [8], "value": "max_df"}, {"type": "Num", "value": "0.75"}, {"type": "keyword", "children": [10], "value": "ngram_range"}, {"type": "TupleLoad", "children": [11, 12]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "TFIDF_matrix"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "vectorizer"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "corpus"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "num_topics"}, {"type": "Num", "value": "150"}, {"type": "Assign", "children": [24, 28]}, {"type": "TupleStore", "children": [25, 26, 27]}, {"type": "NameStore", "value": "_"}, {"type": "NameStore", "value": "_"}, {"type": "NameStore", "value": "V"}, {"type": "Call", "children": [29, 30, 31]}, {"type": "NameLoad", "value": "svds"}, {"type": "NameLoad", "value": "TFIDF_matrix"}, {"type": "keyword", "children": [32], "value": "k"}, {"type": "NameLoad", "value": "num_topics"}, {"type": "Assign", "children": [34, 35]}, {"type": "NameStore", "value": "TOPIC_matrix"}, {"type": "Call", "children": [36, 39]}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "TFIDF_matrix"}, {"type": "attr", "value": "dot"}, {"type": "Call", "children": [40]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "V"}, {"type": "attr", "value": "transpose"}, {"type": "Delete", "children": [44]}, {"type": "NameDel", "value": "V"}], "stage": null, "id": 821455, "neighbor_cells": [821454], "header": "", "annotation": []}
{"target_lineno": 64, "file": "/projects/bdata/jupyter/target/nb_856776.py", "context": "\ndata = pd.read_csv('/Users/Andy/Documents/The_New_School_M.S./Spring_2016/Machine_Learning/Assignments/Amazon.csv')\n\ndata.head(5)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "/Users/Andy/Documents/The_New_School_M.S./Spring_2016/Machine_Learning/Assignments/Amazon.csv"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 13]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "data"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "5"}], "funcs": ["pandas.read_csv", "pandas.read_csv.head"], "neighbor_cells": [53515], "id": 53516, "header": "", "annotation": []}
{"target_lineno": 244, "file": "/projects/bdata/jupyter/target/nb_910772.py", "context": "\nabs(clf.best_score_)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "abs"}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "best_score_"}], "funcs": ["abs"], "neighbor_cells": [799153], "id": 799154, "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_664122.py", "target_func": "none_func", "context": "\nt = get_ipython().run_line_magic('timeit', '-o best_logreg.fit(X_train_std, y_train)')\n", "target_lineno": 525, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "t"}, {"type": "Call", "children": [4, 8, 9]}, {"type": "AttributeLoad", "children": [5, 7]}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "timeit"}, {"type": "Str", "value": "-o best_logreg.fit(X_train_std, y_train)"}], "stage": null, "id": 645537, "neighbor_cells": [645536], "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression.fit.predict", "matplotlib.pyplot.scatter", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.show", "sklearn.metrics.mean_squared_error"], "file": "/projects/bdata/jupyter/target/nb_979440.py", "target_func": "none_func", "context": "\nX = df\n\nmodel = lm.fit(X, y)\n\npredictions = model.predict(X)\n\nplt.scatter(predictions, y, s=30, c='r', marker='+', zorder=10)\n\nplt.xlabel('Predicted Values from all X')\n\nplt.ylabel('Actual Values MEDV')\n\nplt.show()\n\nprint 'MSE:', mean_squared_error(y, predictions)\n", "target_lineno": 234, "nodes": [{"type": "Module", "children": [1, 4, 12, 19, 34, 40, 46, 51]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X"}, {"type": "NameLoad", "value": "df"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [7, 10, 11]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "lm"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "predictions"}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "model"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X"}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21, 24, 25, 26, 28, 30, 32]}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "scatter"}, {"type": "NameLoad", "value": "predictions"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "children": [27], "value": "s"}, {"type": "Num", "value": "30"}, {"type": "keyword", "children": [29], "value": "c"}, {"type": "Str", "value": "r"}, {"type": "keyword", "children": [31], "value": "marker"}, {"type": "Str", "value": "+"}, {"type": "keyword", "children": [33], "value": "zorder"}, {"type": "Num", "value": "10"}, {"type": "Expr", "children": [35]}, {"type": "Call", "children": [36, 39]}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "Predicted Values from all X"}, {"type": "Expr", "children": [41]}, {"type": "Call", "children": [42, 45]}, {"type": "AttributeLoad", "children": [43, 44]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Actual Values MEDV"}, {"type": "Expr", "children": [47]}, {"type": "Call", "children": [48]}, {"type": "AttributeLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}, {"type": "Print", "children": [52, 53]}, {"type": "Str", "value": "MSE:"}, {"type": "Call", "children": [54, 55, 56]}, {"type": "NameLoad", "value": "mean_squared_error"}, {"type": "NameLoad", "value": "y"}, {"type": "NameLoad", "value": "predictions"}], "stage": null, "id": 970055, "neighbor_cells": [970054], "header": "", "annotation": [" Comparing the models", " ", " A perfect fit would yield a straight line when we plot the predicted values versus the true values We ll quantify the goodness of fit soon ", " ", " Exercise", " ", " Run the fit on all the variables with X df Did this improve the fit versus the previously tested variable combinations Use mean squared error "]}
{"funcs": ["len"], "file": "/projects/bdata/jupyter/target/nb_343884.py", "target_func": "none_func", "context": "\nlen(midrange_sqft)\n", "target_lineno": 332, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "midrange_sqft"}], "stage": null, "id": 810500, "neighbor_cells": [810499], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_822065.py", "target_func": "none_func", "context": "\nwiki[(wiki['name'] == 'Wynn Normington Hugh-Jones')]\n", "target_lineno": 405, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "SubscriptLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "wiki"}, {"type": "Index", "children": [5]}, {"type": "CompareEq", "children": [6, 10]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "wiki"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "name"}, {"type": "Str", "value": "Wynn Normington Hugh-Jones"}], "stage": null, "id": 297533, "neighbor_cells": [297532], "header": "", "annotation": [" Compare the result with a former British diplomat whose bin representation agrees with Obama s in only 8 out of 16 places "]}
{"funcs": ["sympy.symbols", "sympy.integrate.evalf", "sympy.integrate", "sympy.cos", "sympy.sin"], "file": "/projects/bdata/jupyter/target/nb_958258.py", "target_func": "none_func", "context": "\nfrom sympy import sin, cos, symbols, integrate\n\nx = symbols('x')\n\nintegrate(((x * cos((71 * x))) + sin((13 * x))), (x, 0, 1)).evalf(6)\n", "target_lineno": 445, "nodes": [{"type": "Module", "children": [1, 6, 11]}, {"type": "ImportFrom", "children": [2, 3, 4, 5], "value": "sympy"}, {"type": "alias", "value": "sin"}, {"type": "alias", "value": "cos"}, {"type": "alias", "value": "symbols"}, {"type": "alias", "value": "integrate"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "x"}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "symbols"}, {"type": "Str", "value": "x"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 34]}, {"type": "AttributeLoad", "children": [14, 33]}, {"type": "Call", "children": [15, 16, 29]}, {"type": "NameLoad", "value": "integrate"}, {"type": "BinOpAdd", "children": [17, 24]}, {"type": "BinOpMult", "children": [18, 19]}, {"type": "NameLoad", "value": "x"}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "cos"}, {"type": "BinOpMult", "children": [22, 23]}, {"type": "Num", "value": "71"}, {"type": "NameLoad", "value": "x"}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "sin"}, {"type": "BinOpMult", "children": [27, 28]}, {"type": "Num", "value": "13"}, {"type": "NameLoad", "value": "x"}, {"type": "TupleLoad", "children": [30, 31, 32]}, {"type": "NameLoad", "value": "x"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "evalf"}, {"type": "Num", "value": "6"}], "stage": null, "id": 405778, "neighbor_cells": [405777], "header": " Exact solution", "annotation": [" Exact solution"]}
{"funcs": ["range", "ccdproc.CCDData.read", "append"], "file": "/projects/bdata/jupyter/target/nb_242646.py", "target_func": "none_func", "context": "\nalldarks = []\n\nfor chan in range(1, (NB_OF_CHAN_AMPL + 1), 1):\n    ccd_chan = ccdproc.CCDData.read(filename, hdu=chan, unit='adu')\n    alldarks.append(ccd_chan)\n", "target_lineno": 117, "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "alldarks"}, {"type": "ListLoad"}, {"type": "For", "children": [5, 6, 13]}, {"type": "NameStore", "value": "chan"}, {"type": "Call", "children": [7, 8, 9, 12]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "1"}, {"type": "BinOpAdd", "children": [10, 11]}, {"type": "NameLoad", "value": "NB_OF_CHAN_AMPL"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "body", "children": [14, 27]}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "ccd_chan"}, {"type": "Call", "children": [17, 22, 23, 25]}, {"type": "AttributeLoad", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "ccdproc"}, {"type": "attr", "value": "CCDData"}, {"type": "attr", "value": "read"}, {"type": "NameLoad", "value": "filename"}, {"type": "keyword", "children": [24], "value": "hdu"}, {"type": "NameLoad", "value": "chan"}, {"type": "keyword", "children": [26], "value": "unit"}, {"type": "Str", "value": "adu"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "alldarks"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "ccd_chan"}], "stage": null, "id": 110370, "neighbor_cells": [110369], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_856644.py", "target_func": "none_func", "context": "\nfrom my_func import my_func\n", "target_lineno": 242, "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "children": [2], "value": "my_func"}, {"type": "alias", "value": "my_func"}], "stage": null, "id": 174043, "neighbor_cells": [174042], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_656209.py", "target_func": "none_func", "context": "\nY_df = df_DepDelay15_ohe\n", "target_lineno": 188, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "Y_df"}, {"type": "NameLoad", "value": "df_DepDelay15_ohe"}], "stage": null, "id": 218235, "neighbor_cells": [218234], "header": "", "annotation": []}
{"target_lineno": 18, "file": "/projects/bdata/jupyter/target/nb_733496.py", "context": "\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nfrom scipy import linalg\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nimport matplotlib as mpl\n\nfrom matplotlib import colors\n\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 11, 14, 17, 20, 22, 24]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "ImportFrom", "value": "scipy", "children": [10]}, {"type": "alias", "value": "linalg"}, {"type": "Import", "children": [12]}, {"type": "alias", "value": "numpy", "children": [13]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [15]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [16]}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [18]}, {"type": "alias", "value": "matplotlib", "children": [19]}, {"type": "identifier", "value": "mpl"}, {"type": "ImportFrom", "value": "matplotlib", "children": [21]}, {"type": "alias", "value": "colors"}, {"type": "ImportFrom", "value": "sklearn.discriminant_analysis", "children": [23]}, {"type": "alias", "value": "LinearDiscriminantAnalysis"}, {"type": "ImportFrom", "value": "sklearn.discriminant_analysis", "children": [25]}, {"type": "alias", "value": "QuadraticDiscriminantAnalysis"}], "funcs": ["get_ipython.run_line_magic", "get_ipython"], "neighbor_cells": [-1], "id": 1076421, "header": "", "annotation": [" usr bin env python", " coding utf 8", " Linear and Quadratic Discriminant Analysis with confidence ellipsoid", " ", " ", " http scikit learn org stable auto examples classification plot lda qda html", " ", " ", " function", " ", " ", " 1 scipy linalg linalg eigh ", " 2 matplotlib colors ", " 3 LinearDiscriminantAnalysis ", " 4 QuadraticDiscriminantAnalysis "]}
{"funcs": ["read_and_plot", "read_and_plot", "read_and_plot", "matplotlib.pyplot.show"], "file": "/projects/bdata/jupyter/target/nb_661628.py", "target_func": "none_func", "context": "\nfor p in [50, 90, 99, 99.9, 99.99]:\n    (high_perc_1, high_d_1) = read_and_plot(high_dir_1, p, high_perc_1, high_d_1)\n    (high_perc_2, high_d_2) = read_and_plot(high_dir_2, p, high_perc_2, high_d_2)\n    (high_perc_4, high_d_4) = read_and_plot(high_dir_4, p, high_perc_4, high_d_4, threashold=0.9)\n    plt.show()\n", "target_lineno": 245, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 9]}, {"type": "NameStore", "value": "p"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8]}, {"type": "Num", "value": "50"}, {"type": "Num", "value": "90"}, {"type": "Num", "value": "99"}, {"type": "Num", "value": "99.9"}, {"type": "Num", "value": "99.99"}, {"type": "body", "children": [10, 20, 30, 42]}, {"type": "Assign", "children": [11, 14]}, {"type": "TupleStore", "children": [12, 13]}, {"type": "NameStore", "value": "high_perc_1"}, {"type": "NameStore", "value": "high_d_1"}, {"type": "Call", "children": [15, 16, 17, 18, 19]}, {"type": "NameLoad", "value": "read_and_plot"}, {"type": "NameLoad", "value": "high_dir_1"}, {"type": "NameLoad", "value": "p"}, {"type": "NameLoad", "value": "high_perc_1"}, {"type": "NameLoad", "value": "high_d_1"}, {"type": "Assign", "children": [21, 24]}, {"type": "TupleStore", "children": [22, 23]}, {"type": "NameStore", "value": "high_perc_2"}, {"type": "NameStore", "value": "high_d_2"}, {"type": "Call", "children": [25, 26, 27, 28, 29]}, {"type": "NameLoad", "value": "read_and_plot"}, {"type": "NameLoad", "value": "high_dir_2"}, {"type": "NameLoad", "value": "p"}, {"type": "NameLoad", "value": "high_perc_2"}, {"type": "NameLoad", "value": "high_d_2"}, {"type": "Assign", "children": [31, 34]}, {"type": "TupleStore", "children": [32, 33]}, {"type": "NameStore", "value": "high_perc_4"}, {"type": "NameStore", "value": "high_d_4"}, {"type": "Call", "children": [35, 36, 37, 38, 39, 40]}, {"type": "NameLoad", "value": "read_and_plot"}, {"type": "NameLoad", "value": "high_dir_4"}, {"type": "NameLoad", "value": "p"}, {"type": "NameLoad", "value": "high_perc_4"}, {"type": "NameLoad", "value": "high_d_4"}, {"type": "keyword", "children": [41], "value": "threashold"}, {"type": "Num", "value": "0.9"}, {"type": "Expr", "children": [43]}, {"type": "Call", "children": [44]}, {"type": "AttributeLoad", "children": [45, 46]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "stage": null, "id": 854475, "neighbor_cells": [854474], "header": " Same for Highlander", "annotation": [" Same for Highlander"]}
{"funcs": ["head"], "file": "/projects/bdata/jupyter/target/nb_313648.py", "target_func": "none_func", "context": "\nprint ('Your loans      : %s\\n' % validation_data2['predictions'].head(4))\n\nprint ('Expected answer : %s' % [0.4492515948736132, 0.6119100103640573, 0.3835981314851436, 0.3693306705994325])\n", "target_lineno": 384, "nodes": [{"type": "Module", "children": [1, 12]}, {"type": "Print", "children": [2]}, {"type": "BinOpMod", "children": [3, 4]}, {"type": "Str", "value": "Your loans      : %s\n"}, {"type": "Call", "children": [5, 11]}, {"type": "AttributeLoad", "children": [6, 10]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "validation_data2"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "predictions"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "4"}, {"type": "Print", "children": [13]}, {"type": "BinOpMod", "children": [14, 15]}, {"type": "Str", "value": "Expected answer : %s"}, {"type": "ListLoad", "children": [16, 17, 18, 19]}, {"type": "Num", "value": "0.449251594874"}, {"type": "Num", "value": "0.611910010364"}, {"type": "Num", "value": "0.383598131485"}, {"type": "Num", "value": "0.369330670599"}], "stage": null, "id": 717823, "neighbor_cells": [717822], "header": "", "annotation": [" Checkpoint For each row the probabilities should be a number in the range 0 1 We have provided a simple check here to make sure your answers are correct "]}
{"target_lineno": 376, "file": "/projects/bdata/jupyter/target/nb_790335.py", "context": "\ndf.columns = species\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 5]}, {"type": "AttributeStore", "children": [3, 4]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "columns"}, {"type": "NameLoad", "value": "species"}], "funcs": [], "neighbor_cells": [567349], "id": 567350, "header": "", "annotation": []}
{"funcs": ["sklearn.ensemble.AdaBoostClassifier", "sklearn.tree.DecisionTreeClassifier", "sklearn.ensemble.AdaBoostClassifier.fit", "sklearn.ensemble.AdaBoostClassifier.predict", "UseChallenge3Predictions"], "file": "/projects/bdata/jupyter/target/nb_321970.py", "target_func": "none_func", "context": "\nparams = {\n    'max_depth': 10,\n    'algorithm': 'SAMME',\n    'n_estimators': 500,\n}\n\ntrain = tfidfTrain\n\ntest = tfidfTest\n\ndepth = params['max_depth']\n\nalgo = params['algorithm']\n\nestimators = params['n_estimators']\n\nbdt = AdaBoostClassifier(DecisionTreeClassifier(max_depth=depth), algorithm=algo, n_estimators=estimators)\n\nbdt.fit(train, YTrain)\n\nYPred = bdt.predict(test)\n\nUseChallenge3Predictions(YPred)\n", "target_lineno": 1002, "nodes": [{"type": "Module", "children": [1, 10, 13, 16, 22, 28, 34, 46, 53, 60]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "params"}, {"type": "Dict", "children": [4, 5, 6, 7, 8, 9]}, {"type": "Str", "value": "max_depth"}, {"type": "Str", "value": "algorithm"}, {"type": "Str", "value": "n_estimators"}, {"type": "Num", "value": "10"}, {"type": "Str", "value": "SAMME"}, {"type": "Num", "value": "500"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "train"}, {"type": "NameLoad", "value": "tfidfTrain"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "test"}, {"type": "NameLoad", "value": "tfidfTest"}, {"type": "Assign", "children": [17, 18]}, {"type": "NameStore", "value": "depth"}, {"type": "SubscriptLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "params"}, {"type": "Index", "children": [21]}, {"type": "Str", "value": "max_depth"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "algo"}, {"type": "SubscriptLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "params"}, {"type": "Index", "children": [27]}, {"type": "Str", "value": "algorithm"}, {"type": "Assign", "children": [29, 30]}, {"type": "NameStore", "value": "estimators"}, {"type": "SubscriptLoad", "children": [31, 32]}, {"type": "NameLoad", "value": "params"}, {"type": "Index", "children": [33]}, {"type": "Str", "value": "n_estimators"}, {"type": "Assign", "children": [35, 36]}, {"type": "NameStore", "value": "bdt"}, {"type": "Call", "children": [37, 38, 42, 44]}, {"type": "NameLoad", "value": "AdaBoostClassifier"}, {"type": "Call", "children": [39, 40]}, {"type": "NameLoad", "value": "DecisionTreeClassifier"}, {"type": "keyword", "children": [41], "value": "max_depth"}, {"type": "NameLoad", "value": "depth"}, {"type": "keyword", "children": [43], "value": "algorithm"}, {"type": "NameLoad", "value": "algo"}, {"type": "keyword", "children": [45], "value": "n_estimators"}, {"type": "NameLoad", "value": "estimators"}, {"type": "Expr", "children": [47]}, {"type": "Call", "children": [48, 51, 52]}, {"type": "AttributeLoad", "children": [49, 50]}, {"type": "NameLoad", "value": "bdt"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "train"}, {"type": "NameLoad", "value": "YTrain"}, {"type": "Assign", "children": [54, 55]}, {"type": "NameStore", "value": "YPred"}, {"type": "Call", "children": [56, 59]}, {"type": "AttributeLoad", "children": [57, 58]}, {"type": "NameLoad", "value": "bdt"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "test"}, {"type": "Expr", "children": [61]}, {"type": "Call", "children": [62, 63]}, {"type": "NameLoad", "value": "UseChallenge3Predictions"}, {"type": "NameLoad", "value": "YPred"}], "stage": null, "id": 1004684, "neighbor_cells": [1004683], "header": "", "annotation": []}
{"target_lineno": 94, "file": "/projects/bdata/jupyter/target/nb_919299.py", "context": "\n\ndef get_clean_wordlist(series):\n    '\\n    input: a pandas Series containing the abstract wordlist (df.wordlist) where each row is a string representation of a list\\n    returns: the list representation of a wordlist, which is required for gensim.\\n    '\n    texts = list(series)\n    clean_texts = []\n    for text in texts:\n        text = text[2:(- 2)].split(\"', '\")\n        clean_texts.append(text)\n    return clean_texts\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "value": "get_clean_wordlist", "children": [2, 6, 41]}, {"type": "arguments", "children": [3, 5]}, {"type": "args", "children": [4]}, {"type": "arg"}, {"type": "defaults"}, {"type": "body", "children": [7, 9, 14, 17, 39]}, {"type": "Expr", "children": [8]}, {"type": "Str", "value": "\n    input: a pandas Series containing the abstract wordlist (df.wordlist) where each row is a string representation of a list\n    returns: the list representation of a wordlist, which is required for gensim.\n    "}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "texts"}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "list"}, {"type": "NameLoad", "value": "series"}, {"type": "Assign", "children": [15, 16]}, {"type": "NameStore", "value": "clean_texts"}, {"type": "ListLoad"}, {"type": "For", "children": [18, 19, 20]}, {"type": "NameStore", "value": "text"}, {"type": "NameLoad", "value": "texts"}, {"type": "body", "children": [21, 33]}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "text"}, {"type": "Call", "children": [24, 32]}, {"type": "AttributeLoad", "children": [25, 31]}, {"type": "SubscriptLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "text"}, {"type": "Slice", "children": [28, 29]}, {"type": "Num", "value": "2"}, {"type": "UnaryOpUSub", "children": [30]}, {"type": "Num", "value": "2"}, {"type": "attr", "value": "split"}, {"type": "Str", "value": "', '"}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 38]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "clean_texts"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "text"}, {"type": "Return", "children": [40]}, {"type": "NameLoad", "value": "clean_texts"}, {"type": "decorator_list"}], "funcs": ["list", "split", "append"], "neighbor_cells": [748251], "id": 748252, "header": "", "annotation": [" This looks much better 1995 looks potentially concerning and I d have to go back to the 1995 abstracts to see whether a huge chunk of them were missing or not but I m just not going to worry about it for now ", " Get document term matrix", " ", " The first time I did this I actually did this manually because I wanted to go through the process and understand how things were actually done instead of zipping through some pre made functions Yes it is reinventing the wheel a little bit but it helps me learn ", " ", " Most of the work is easily done using the gensim package which I highly recommend "]}
{"funcs": ["sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.fbeta_score", "sklearn.metrics.fbeta_score"], "file": "/projects/bdata/jupyter/target/nb_647811.py", "target_func": "none_func", "context": "\nprint 'Accuracy: ', met.accuracy_score(test[['is sexual predator']], prediction)\n\nprint 'Precision: ', met.precision_score(test[['is sexual predator']], prediction)\n\nprint 'Recall:', met.recall_score(test[['is sexual predator']], prediction)\n\nprint 'F1:', met.fbeta_score(test[['is sexual predator']], prediction, 1)\n\nprint 'F0.5:', met.fbeta_score(test[['is sexual predator']], prediction, 0.5)\n", "target_lineno": 316, "nodes": [{"type": "Module", "children": [1, 13, 25, 37, 50]}, {"type": "Print", "children": [2, 3]}, {"type": "Str", "value": "Accuracy: "}, {"type": "Call", "children": [4, 7, 12]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "met"}, {"type": "attr", "value": "accuracy_score"}, {"type": "SubscriptLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [10]}, {"type": "ListLoad", "children": [11]}, {"type": "Str", "value": "is sexual predator"}, {"type": "NameLoad", "value": "prediction"}, {"type": "Print", "children": [14, 15]}, {"type": "Str", "value": "Precision: "}, {"type": "Call", "children": [16, 19, 24]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "met"}, {"type": "attr", "value": "precision_score"}, {"type": "SubscriptLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [22]}, {"type": "ListLoad", "children": [23]}, {"type": "Str", "value": "is sexual predator"}, {"type": "NameLoad", "value": "prediction"}, {"type": "Print", "children": [26, 27]}, {"type": "Str", "value": "Recall:"}, {"type": "Call", "children": [28, 31, 36]}, {"type": "AttributeLoad", "children": [29, 30]}, {"type": "NameLoad", "value": "met"}, {"type": "attr", "value": "recall_score"}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [34]}, {"type": "ListLoad", "children": [35]}, {"type": "Str", "value": "is sexual predator"}, {"type": "NameLoad", "value": "prediction"}, {"type": "Print", "children": [38, 39]}, {"type": "Str", "value": "F1:"}, {"type": "Call", "children": [40, 43, 48, 49]}, {"type": "AttributeLoad", "children": [41, 42]}, {"type": "NameLoad", "value": "met"}, {"type": "attr", "value": "fbeta_score"}, {"type": "SubscriptLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [46]}, {"type": "ListLoad", "children": [47]}, {"type": "Str", "value": "is sexual predator"}, {"type": "NameLoad", "value": "prediction"}, {"type": "Num", "value": "1"}, {"type": "Print", "children": [51, 52]}, {"type": "Str", "value": "F0.5:"}, {"type": "Call", "children": [53, 56, 61, 62]}, {"type": "AttributeLoad", "children": [54, 55]}, {"type": "NameLoad", "value": "met"}, {"type": "attr", "value": "fbeta_score"}, {"type": "SubscriptLoad", "children": [57, 58]}, {"type": "NameLoad", "value": "test"}, {"type": "Index", "children": [59]}, {"type": "ListLoad", "children": [60]}, {"type": "Str", "value": "is sexual predator"}, {"type": "NameLoad", "value": "prediction"}, {"type": "Num", "value": "0.5"}], "stage": null, "id": 240946, "neighbor_cells": [240945], "header": "", "annotation": []}
{"target_lineno": 25, "file": "/projects/bdata/jupyter/target/nb_604519.py", "context": "\ntips.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "tips"}, {"type": "attr", "value": "head"}], "funcs": ["seaborn.load_dataset.head"], "neighbor_cells": [250968], "id": 250969, "header": "", "annotation": []}
{"target_lineno": 260, "file": "/projects/bdata/jupyter/target/nb_166995.py", "context": "\nmyDict = {\n    \n}\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "myDict"}, {"type": "Dict"}], "funcs": [], "neighbor_cells": [340422], "id": 340423, "header": "", "annotation": []}
{"funcs": ["scipy.misc.imread", "scipy.misc.imsave"], "file": "/projects/bdata/jupyter/target/nb_24221.py", "target_func": "none_func", "context": "\nfor f in mismatch:\n    raw_im = misc.imread((mismatch_file_path + f))\n    misc.imsave((mismatch_output_path + f), raw_im)\n", "target_lineno": 124, "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 3, 4]}, {"type": "NameStore", "value": "f"}, {"type": "NameLoad", "value": "mismatch"}, {"type": "body", "children": [5, 14]}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "raw_im"}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "misc"}, {"type": "attr", "value": "imread"}, {"type": "BinOpAdd", "children": [12, 13]}, {"type": "NameLoad", "value": "mismatch_file_path"}, {"type": "NameLoad", "value": "f"}, {"type": "Expr", "children": [15]}, {"type": "Call", "children": [16, 19, 22]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "misc"}, {"type": "attr", "value": "imsave"}, {"type": "BinOpAdd", "children": [20, 21]}, {"type": "NameLoad", "value": "mismatch_output_path"}, {"type": "NameLoad", "value": "f"}, {"type": "NameLoad", "value": "raw_im"}], "stage": null, "id": 836530, "neighbor_cells": [836529], "header": "", "annotation": []}
{"funcs": ["pandas.merge.child_on_acc_pre_school.isnull", "map", "int", "x.replace", "pandas.merge.child_on_acc_pre_school.isnull"], "file": "/projects/bdata/jupyter/target/nb_142026.py", "target_func": "none_func", "context": "\ndf.loc[((df.child_on_acc_pre_school.isnull() != True), 'child_on_acc_pre_school')] = map((lambda x: int(x.replace(',', ''))), df.loc[((df.child_on_acc_pre_school.isnull() != True), 'child_on_acc_pre_school')])\n", "target_lineno": 955, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 17]}, {"type": "SubscriptStore", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "loc"}, {"type": "Index", "children": [7]}, {"type": "TupleLoad", "children": [8, 16]}, {"type": "CompareNotEq", "children": [9, 15]}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "child_on_acc_pre_school"}, {"type": "attr", "value": "isnull"}, {"type": "NameLoad", "value": "True"}, {"type": "Str", "value": "child_on_acc_pre_school"}, {"type": "Call", "children": [18, 19, 32]}, {"type": "NameLoad", "value": "map"}, {"type": "Lambda", "children": [20, 24]}, {"type": "arguments", "children": [21, 23]}, {"type": "args", "children": [22]}, {"type": "NameParam", "value": "x"}, {"type": "defaults"}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "int"}, {"type": "Call", "children": [27, 30, 31]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "x"}, {"type": "attr", "value": "replace"}, {"type": "Str", "value": ","}, {"type": "Str", "value": ""}, {"type": "SubscriptLoad", "children": [33, 36]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "loc"}, {"type": "Index", "children": [37]}, {"type": "TupleLoad", "children": [38, 46]}, {"type": "CompareNotEq", "children": [39, 45]}, {"type": "Call", "children": [40]}, {"type": "AttributeLoad", "children": [41, 44]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "child_on_acc_pre_school"}, {"type": "attr", "value": "isnull"}, {"type": "NameLoad", "value": "True"}, {"type": "Str", "value": "child_on_acc_pre_school"}], "stage": null, "id": 102122, "neighbor_cells": [102121], "header": "", "annotation": []}
{"funcs": ["numpy.linspace", "fun.max", "fun"], "file": "/projects/bdata/jupyter/target/nb_847579.py", "target_func": "none_func", "context": "\nt = np.linspace(0, (2 * np.pi))\n\nfor fun in list_of_functions:\n    print 'The maximum of ', fun.__name__, ' is ', fun(t).max()\n", "target_lineno": 467, "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "t"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "linspace"}, {"type": "Num", "value": "0"}, {"type": "BinOpMult", "children": [9, 10]}, {"type": "Num", "value": "2"}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "pi"}, {"type": "For", "children": [14, 15, 16]}, {"type": "NameStore", "value": "fun"}, {"type": "NameLoad", "value": "list_of_functions"}, {"type": "body", "children": [17]}, {"type": "Print", "children": [18, 19, 22, 23]}, {"type": "Str", "value": "The maximum of "}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "fun"}, {"type": "attr", "value": "__name__"}, {"type": "Str", "value": " is "}, {"type": "Call", "children": [24]}, {"type": "AttributeLoad", "children": [25, 28]}, {"type": "Call", "children": [26, 27]}, {"type": "NameLoad", "value": "fun"}, {"type": "NameLoad", "value": "t"}, {"type": "attr", "value": "max"}], "stage": null, "id": 1102061, "neighbor_cells": [1102060], "header": "", "annotation": []}
{"target_lineno": 841, "file": "/projects/bdata/jupyter/target/nb_714007.py", "context": "\ntrain_x.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "train_x"}, {"type": "attr", "value": "head"}], "funcs": ["pandas.read_csv.drop.head"], "neighbor_cells": [22858], "id": 22859, "header": "", "annotation": []}
{"target_lineno": 158, "file": "/projects/bdata/jupyter/target/nb_118503.py", "context": "\nrfr.fit(X_train, y_train)\n\nprint('Test Accuracy: {:.2f}'.format(rfr.score(X_test, y_test)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "rfr"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "Str", "value": "Test Accuracy: {:.2f}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [16, 19, 20]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "rfr"}, {"type": "attr", "value": "score"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_test"}], "funcs": ["sklearn.ensemble.RandomForestRegressor.fit", "print", "format", "sklearn.ensemble.RandomForestRegressor.score"], "neighbor_cells": [1030711], "id": 1030712, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_498254.py", "target_func": "none_func", "context": "\nestimator.best_params_\n", "target_lineno": 183, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "estimator"}, {"type": "attr", "value": "best_params_"}], "stage": null, "id": 591587, "neighbor_cells": [591586], "header": "", "annotation": []}
{"target_lineno": 467, "file": "/projects/bdata/jupyter/target/nb_933482.py", "context": "\nprint(('Mean Squared Error on all zero model: %.2f' % (np.mean(((model_allzero - test_encoded_Y) ** 2)) * 100)))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [5, 6]}, {"type": "Str", "value": "Mean Squared Error on all zero model: %.2f"}, {"type": "BinOpMult", "children": [7, 16]}, {"type": "Call", "children": [8, 11]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "mean"}, {"type": "BinOpPow", "children": [12, 15]}, {"type": "BinOpSub", "children": [13, 14]}, {"type": "NameLoad", "value": "model_allzero"}, {"type": "NameLoad", "value": "test_encoded_Y"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "100"}], "funcs": ["print", "numpy.mean"], "neighbor_cells": [219117], "id": 219118, "header": "", "annotation": []}
{"target_lineno": 460, "file": "/projects/bdata/jupyter/target/nb_845248.py", "context": "\nresult.resid.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "result"}, {"type": "attr", "value": "resid"}, {"type": "attr", "value": "head"}], "funcs": ["statsmodels.formula.api.ols.fit.resid.head"], "neighbor_cells": [695291], "id": 695292, "header": "", "annotation": []}
{"target_lineno": 90, "file": "/projects/bdata/jupyter/target/nb_46465.py", "context": "\nlen(finalTrainUse)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "finalTrainUse"}], "funcs": ["len"], "neighbor_cells": [334677], "id": 334678, "header": "", "annotation": []}
{"target_lineno": 41, "file": "/projects/bdata/jupyter/target/nb_259329.py", "context": "\n'\\n    For Supervised Learning Problems\\n        Split Data into Training and Testing Set\\n'\n\nfrom sklearn.cross_validation import train_test_split\n\n(X_train, X_test, y_train, y_test) = train_test_split(X, y, test_size=0.2, random_state=40)\n\nprint(X_train)\n\nprint(X_test)\n\nprint(y_train)\n\nprint(y_test)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3, 5, 19, 23, 27, 31]}, {"type": "Expr", "children": [2]}, {"type": "Str", "value": "\n    For Supervised Learning Problems\n        Split Data into Training and Testing Set\n"}, {"type": "ImportFrom", "value": "sklearn.cross_validation", "children": [4]}, {"type": "alias", "value": "train_test_split"}, {"type": "Assign", "children": [6, 11]}, {"type": "TupleStore", "children": [7, 8, 9, 10]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [12, 13, 14, 15, 17]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "value": "test_size", "children": [16]}, {"type": "Num", "value": "0.2"}, {"type": "keyword", "value": "random_state", "children": [18]}, {"type": "Num", "value": "40"}, {"type": "Expr", "children": [20]}, {"type": "Call", "children": [21, 22]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "X_train"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 30]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 34]}, {"type": "NameLoad", "value": "print"}, {"type": "NameLoad", "value": "y_test"}], "funcs": ["sklearn.cross_validation.train_test_split", "print", "print", "print", "print"], "neighbor_cells": [977534], "id": 977535, "header": "", "annotation": []}
{"target_lineno": 205, "file": "/projects/bdata/jupyter/target/nb_634633.py", "context": "\n(np.diff(test2.y) / np.diff(test2.x))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpDiv", "children": [3, 10]}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "diff"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "test2"}, {"type": "attr", "value": "y"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "diff"}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "test2"}, {"type": "attr", "value": "x"}], "funcs": ["np.diff", "np.diff"], "neighbor_cells": [16891], "id": 16892, "header": "", "annotation": []}
{"funcs": ["astype"], "file": "/projects/bdata/jupyter/target/nb_620954.py", "target_func": "none_func", "context": "\nairports['lat'] = airports['lat'].astype(int)\n", "target_lineno": 645, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "airports"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "lat"}, {"type": "Call", "children": [7, 13]}, {"type": "AttributeLoad", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "airports"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "lat"}, {"type": "attr", "value": "astype"}, {"type": "NameLoad", "value": "int"}], "stage": null, "id": 85688, "neighbor_cells": [85687], "header": "", "annotation": []}
{"funcs": ["sys.setrecursionlimit", "transform_6", "get_ipython.magic", "get_ipython", "open", "cPickle.dump"], "file": "/projects/bdata/jupyter/target/nb_881944.py", "target_func": "none_func", "context": "\nimport sys\n\nsys.setrecursionlimit(10000)\n\n(X_6, y_6) = transform_6(x, y)\n\nget_ipython().magic(u'time net7.fit(X_6, y_6)')\n\nimport cPickle as pickle\n\nwith open('Lasagne_7th_test1_0.pickle', 'wb') as f:\n    pickle.dump(net7, f, (-1))\n", "target_lineno": 355, "nodes": [{"type": "Module", "children": [1, 3, 9, 17, 24, 27]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "sys"}, {"type": "Expr", "children": [4]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "sys"}, {"type": "attr", "value": "setrecursionlimit"}, {"type": "Num", "value": "10000"}, {"type": "Assign", "children": [10, 13]}, {"type": "TupleStore", "children": [11, 12]}, {"type": "NameStore", "value": "X_6"}, {"type": "NameStore", "value": "y_6"}, {"type": "Call", "children": [14, 15, 16]}, {"type": "NameLoad", "value": "transform_6"}, {"type": "NameLoad", "value": "x"}, {"type": "NameLoad", "value": "y"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 23]}, {"type": "AttributeLoad", "children": [20, 22]}, {"type": "Call", "children": [21]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "time net7.fit(X_6, y_6)"}, {"type": "Import", "children": [25]}, {"type": "alias", "children": [26], "value": "cPickle"}, {"type": "identifier", "value": "pickle"}, {"type": "With", "children": [28, 32, 33]}, {"type": "Call", "children": [29, 30, 31]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "Lasagne_7th_test1_0.pickle"}, {"type": "Str", "value": "wb"}, {"type": "NameStore", "value": "f"}, {"type": "body", "children": [34]}, {"type": "Expr", "children": [35]}, {"type": "Call", "children": [36, 39, 40, 41]}, {"type": "AttributeLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "dump"}, {"type": "NameLoad", "value": "net7"}, {"type": "NameLoad", "value": "f"}, {"type": "Num", "value": "-1"}], "stage": null, "id": 533226, "neighbor_cells": [533225], "header": "", "annotation": []}
{"funcs": ["sklearn.linear_model.LinearRegression", "sklearn.linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression", "sklearn.linear_model.LinearRegression.score"], "file": "/projects/bdata/jupyter/target/nb_271013.py", "target_func": "none_func", "context": "\nfeature_cols = ['AGST', 'HarvestRain', 'WinterRain']\n\nX = wine[feature_cols]\n\ny = wine.Price\n\nmodel5 = LinearRegression()\n\nmodel5.fit(X, y)\n\nLinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)\n\nprint model5.intercept_\n\nprint model5.coef_\n\nprint model5.score(X, y)\n", "target_lineno": 126, "nodes": [{"type": "Module", "children": [1, 7, 13, 18, 22, 29, 40, 44, 48]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "feature_cols"}, {"type": "ListLoad", "children": [4, 5, 6]}, {"type": "Str", "value": "AGST"}, {"type": "Str", "value": "HarvestRain"}, {"type": "Str", "value": "WinterRain"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "X"}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "wine"}, {"type": "Index", "children": [12]}, {"type": "NameLoad", "value": "feature_cols"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "y"}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "wine"}, {"type": "attr", "value": "Price"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "model5"}, {"type": "Call", "children": [21]}, {"type": "NameLoad", "value": "LinearRegression"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 27, 28]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "model5"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "Expr", "children": [30]}, {"type": "Call", "children": [31, 32, 34, 36, 38]}, {"type": "NameLoad", "value": "LinearRegression"}, {"type": "keyword", "children": [33], "value": "copy_X"}, {"type": "NameLoad", "value": "True"}, {"type": "keyword", "children": [35], "value": "fit_intercept"}, {"type": "NameLoad", "value": "True"}, {"type": "keyword", "children": [37], "value": "n_jobs"}, {"type": "Num", "value": "1"}, {"type": "keyword", "children": [39], "value": "normalize"}, {"type": "NameLoad", "value": "False"}, {"type": "Print", "children": [41]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "model5"}, {"type": "attr", "value": "intercept_"}, {"type": "Print", "children": [45]}, {"type": "AttributeLoad", "children": [46, 47]}, {"type": "NameLoad", "value": "model5"}, {"type": "attr", "value": "coef_"}, {"type": "Print", "children": [49]}, {"type": "Call", "children": [50, 53, 54]}, {"type": "AttributeLoad", "children": [51, 52]}, {"type": "NameLoad", "value": "model5"}, {"type": "attr", "value": "score"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}], "stage": null, "id": 378804, "neighbor_cells": [378803], "header": "", "annotation": [" Remove Age and FrancePop", " model5 lm Price AGST HarvestRain WinterRain data wine ", " summary model5 "]}
{"target_lineno": 215, "file": "/projects/bdata/jupyter/target/nb_929554.py", "context": "\nprint(confusion_matrix(y_test, grid_predictions))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 6, 7]}, {"type": "NameLoad", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "grid_predictions"}], "funcs": ["print", "sklearn.metrics.confusion_matrix"], "neighbor_cells": [1289050], "id": 1289051, "header": "", "annotation": []}
{"target_lineno": 363, "file": "/projects/bdata/jupyter/target/nb_619775.py", "context": "\na = [1, 2]\n\nb = [3, 4]\n\nprint(a.extend(b))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 6, 11]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "a"}, {"type": "ListLoad", "children": [4, 5]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "2"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "b"}, {"type": "ListLoad", "children": [9, 10]}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "4"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "a"}, {"type": "attr", "value": "extend"}, {"type": "NameLoad", "value": "b"}], "funcs": ["print", "extend"], "neighbor_cells": [1050873], "id": 1050874, "header": " Show some samples", "annotation": [" Show some samples"]}
{"target_lineno": 364, "file": "/projects/bdata/jupyter/target/nb_610037.py", "context": "\n(perehod.shape[0] / len(otvet))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpDiv", "children": [3, 9]}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "perehod"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [8]}, {"type": "Num", "value": "0"}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "otvet"}], "funcs": ["len"], "neighbor_cells": [78363], "id": 78364, "header": "", "annotation": []}
{"target_lineno": 144, "file": "/projects/bdata/jupyter/target/nb_55402.py", "context": "\nnumpy.set_printoptions(precision=3)\n\nprint(binaryX[0:5, :])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "numpy"}, {"type": "attr", "value": "set_printoptions"}, {"type": "keyword", "value": "precision", "children": [7]}, {"type": "Num", "value": "3"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "binaryX"}, {"type": "ExtSlice", "children": [14, 17]}, {"type": "Slice", "children": [15, 16]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "5"}, {"type": "Slice"}], "funcs": ["numpy.set_printoptions", "print"], "neighbor_cells": [1295723], "id": 1295724, "header": "", "annotation": []}
{"funcs": ["build_filter_iterator", "numpy.random.random", "range", "build_filter_iterator"], "file": "/projects/bdata/jupyter/target/nb_874083.py", "target_func": "none_func", "context": "\nloss_fn = build_filter_iterator(model, 3, 0)\n\ninput_img_data = np.random.random((1, 1, 28, 28))\n\nstep = 0.1\n\nfor i in range(20):\n    (loss_value, grads_value) = loss_fn([input_img_data, 0])\n    input_img_data += (grads_value * step)\n", "target_lineno": 71, "nodes": [{"type": "Module", "children": [1, 8, 21, 24]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "loss_fn"}, {"type": "Call", "children": [4, 5, 6, 7]}, {"type": "NameLoad", "value": "build_filter_iterator"}, {"type": "NameLoad", "value": "model"}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "input_img_data"}, {"type": "Call", "children": [11, 16]}, {"type": "AttributeLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "random"}, {"type": "attr", "value": "random"}, {"type": "TupleLoad", "children": [17, 18, 19, 20]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "28"}, {"type": "Num", "value": "28"}, {"type": "Assign", "children": [22, 23]}, {"type": "NameStore", "value": "step"}, {"type": "Num", "value": "0.1"}, {"type": "For", "children": [25, 26, 29]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [27, 28]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "20"}, {"type": "body", "children": [30, 39]}, {"type": "Assign", "children": [31, 34]}, {"type": "TupleStore", "children": [32, 33]}, {"type": "NameStore", "value": "loss_value"}, {"type": "NameStore", "value": "grads_value"}, {"type": "Call", "children": [35, 36]}, {"type": "NameLoad", "value": "loss_fn"}, {"type": "ListLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "input_img_data"}, {"type": "Num", "value": "0"}, {"type": "AugAssignAdd", "children": [40, 41]}, {"type": "NameStore", "value": "input_img_data"}, {"type": "BinOpMult", "children": [42, 43]}, {"type": "NameLoad", "value": "grads_value"}, {"type": "NameLoad", "value": "step"}], "stage": null, "id": 130476, "neighbor_cells": [-1], "header": "", "annotation": [" Below we select the layer and filter Then we generate a random image as a starting point and do 20 steps of gradient ascent to maximize the activation of the selected filter "]}
{"funcs": ["numpy.poly1d", "range", "len", "lagrangep"], "file": "/projects/bdata/jupyter/target/nb_775924.py", "target_func": "none_func", "context": "\n\ndef interlagr(absc, orde):\n    poly = np.poly1d([0])\n    for i in range(len(absc)):\n        poly += (orde[i] * lagrangep(absc, i))\n    return poly\n", "target_lineno": 45, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 7, 37], "value": "interlagr"}, {"type": "arguments", "children": [3, 6]}, {"type": "args", "children": [4, 5]}, {"type": "NameParam", "value": "absc"}, {"type": "NameParam", "value": "orde"}, {"type": "defaults"}, {"type": "body", "children": [8, 16, 35]}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "poly"}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "poly1d"}, {"type": "ListLoad", "children": [15]}, {"type": "Num", "value": "0"}, {"type": "For", "children": [17, 18, 23]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "range"}, {"type": "Call", "children": [21, 22]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "absc"}, {"type": "body", "children": [24]}, {"type": "AugAssignAdd", "children": [25, 26]}, {"type": "NameStore", "value": "poly"}, {"type": "BinOpMult", "children": [27, 31]}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "orde"}, {"type": "Index", "children": [30]}, {"type": "NameLoad", "value": "i"}, {"type": "Call", "children": [32, 33, 34]}, {"type": "NameLoad", "value": "lagrangep"}, {"type": "NameLoad", "value": "absc"}, {"type": "NameLoad", "value": "i"}, {"type": "Return", "children": [36]}, {"type": "NameLoad", "value": "poly"}, {"type": "decorator_list"}], "stage": null, "id": 640596, "neighbor_cells": [640595], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_440049.py", "target_func": "none_func", "context": "\nmlh = (pred.hpred - pred.lpred)\n\navgmp = ((pred.mpred + mlh) / 2)\n", "target_lineno": 1979, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mlh"}, {"type": "BinOpSub", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pred"}, {"type": "attr", "value": "hpred"}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "pred"}, {"type": "attr", "value": "lpred"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "avgmp"}, {"type": "BinOpDiv", "children": [13, 18]}, {"type": "BinOpAdd", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "pred"}, {"type": "attr", "value": "mpred"}, {"type": "NameLoad", "value": "mlh"}, {"type": "Num", "value": "2"}], "stage": null, "id": 399237, "neighbor_cells": [399236], "header": "", "annotation": []}
{"funcs": ["pandas.read_csv.asfreq.asfreq"], "file": "/projects/bdata/jupyter/target/nb_854018.py", "target_func": "none_func", "context": "\ntemps = temps.asfreq('60Min', method='ffill')\n\nprint temps[:3]\n", "target_lineno": 60, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "temps"}, {"type": "Call", "children": [4, 7, 8]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "temps"}, {"type": "attr", "value": "asfreq"}, {"type": "Str", "value": "60Min"}, {"type": "keyword", "children": [9], "value": "method"}, {"type": "Str", "value": "ffill"}, {"type": "Print", "children": [11]}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "temps"}, {"type": "Slice", "children": [14]}, {"type": "Num", "value": "3"}], "stage": null, "id": 655237, "neighbor_cells": [655236], "header": "", "annotation": []}
{"funcs": ["matplotlib.pyplot.errorbar", "range", "len", "matplotlib.pyplot.title"], "file": "/projects/bdata/jupyter/target/nb_808547.py", "target_func": "none_func", "context": "\nplt.errorbar(range(len(df)), df['Mean'], yerr=df['Std'])\n\nplt.title('Error Bar Example')\n", "target_lineno": 327, "nodes": [{"type": "Module", "children": [1, 20]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 11, 15]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "errorbar"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "range"}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "df"}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [14]}, {"type": "Str", "value": "Mean"}, {"type": "keyword", "children": [16], "value": "yerr"}, {"type": "SubscriptLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "df"}, {"type": "Index", "children": [19]}, {"type": "Str", "value": "Std"}, {"type": "Expr", "children": [21]}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "title"}, {"type": "Str", "value": "Error Bar Example"}], "stage": null, "id": 575504, "neighbor_cells": [575503], "header": "", "annotation": []}
{"funcs": ["head"], "file": "/projects/bdata/jupyter/target/nb_87088.py", "target_func": "none_func", "context": "\nind_depths_pass = ind_depths[[(xx == 1) for xx in ind_depths['AllFilters']]]\n\nind_depths_pass.head()\n", "target_lineno": 427, "nodes": [{"type": "Module", "children": [1, 16]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "ind_depths_pass"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "ind_depths"}, {"type": "Index", "children": [6]}, {"type": "ListComp", "children": [7, 10]}, {"type": "CompareEq", "children": [8, 9]}, {"type": "NameLoad", "value": "xx"}, {"type": "Num", "value": "1"}, {"type": "comprehension", "children": [11, 12]}, {"type": "NameStore", "value": "xx"}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "ind_depths"}, {"type": "Index", "children": [15]}, {"type": "Str", "value": "AllFilters"}, {"type": "Expr", "children": [17]}, {"type": "Call", "children": [18]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "ind_depths_pass"}, {"type": "attr", "value": "head"}], "stage": null, "id": 733138, "neighbor_cells": [733137], "header": "", "annotation": []}
{"funcs": ["scipy.stats.chi2_contingency"], "file": "/projects/bdata/jupyter/target/nb_261159.py", "target_func": "none_func", "context": "\nfrom scipy.stats import chi2_contingency\n\n(chi2, p, dof, expected) = chi2_contingency([[349, (1012 - 349)], [320, (995 - 320)]], correction=False)\n\nprint p, (p / 2)\n", "target_lineno": 271, "nodes": [{"type": "Module", "children": [1, 3, 24]}, {"type": "ImportFrom", "children": [2], "value": "scipy.stats"}, {"type": "alias", "value": "chi2_contingency"}, {"type": "Assign", "children": [4, 9]}, {"type": "TupleStore", "children": [5, 6, 7, 8]}, {"type": "NameStore", "value": "chi2"}, {"type": "NameStore", "value": "p"}, {"type": "NameStore", "value": "dof"}, {"type": "NameStore", "value": "expected"}, {"type": "Call", "children": [10, 11, 22]}, {"type": "NameLoad", "value": "chi2_contingency"}, {"type": "ListLoad", "children": [12, 17]}, {"type": "ListLoad", "children": [13, 14]}, {"type": "Num", "value": "349"}, {"type": "BinOpSub", "children": [15, 16]}, {"type": "Num", "value": "1012"}, {"type": "Num", "value": "349"}, {"type": "ListLoad", "children": [18, 19]}, {"type": "Num", "value": "320"}, {"type": "BinOpSub", "children": [20, 21]}, {"type": "Num", "value": "995"}, {"type": "Num", "value": "320"}, {"type": "keyword", "children": [23], "value": "correction"}, {"type": "NameLoad", "value": "False"}, {"type": "Print", "children": [25, 26]}, {"type": "NameLoad", "value": "p"}, {"type": "BinOpDiv", "children": [27, 28]}, {"type": "NameLoad", "value": "p"}, {"type": "Num", "value": "2"}], "stage": null, "id": 39296, "neighbor_cells": [39295], "header": "", "annotation": []}
{"target_lineno": 483, "file": "/projects/bdata/jupyter/target/nb_757272.py", "context": "\ndata_path = 'C:/Users/brian/Documents/DSG2K17/0. Data/'\n\ntrain_path = (data_path + 'train.csv')\n\ntest_path = (data_path + 'test.csv')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 9]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data_path"}, {"type": "Str", "value": "C:/Users/brian/Documents/DSG2K17/0. Data/"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "train_path"}, {"type": "BinOpAdd", "children": [7, 8]}, {"type": "NameLoad", "value": "data_path"}, {"type": "Str", "value": "train.csv"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "test_path"}, {"type": "BinOpAdd", "children": [12, 13]}, {"type": "NameLoad", "value": "data_path"}, {"type": "Str", "value": "test.csv"}], "funcs": [], "neighbor_cells": [688026], "id": 688027, "header": "", "annotation": []}
{"target_lineno": 150, "file": "/projects/bdata/jupyter/target/nb_926128.py", "context": "\nprint(('There are %d documents in this collection.' % (index.maximum_document() - index.document_base())))\n\nprint(index.maximum_document())\n\nprint(index.document_base())\n\nprint\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 15, 22, 29]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [5, 6]}, {"type": "Str", "value": "There are %d documents in this collection."}, {"type": "BinOpSub", "children": [7, 11]}, {"type": "Call", "children": [8]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "index"}, {"type": "attr", "value": "maximum_document"}, {"type": "Call", "children": [12]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "index"}, {"type": "attr", "value": "document_base"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 18]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [19]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "index"}, {"type": "attr", "value": "maximum_document"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24, 25]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [26]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "index"}, {"type": "attr", "value": "document_base"}, {"type": "Expr", "children": [30]}, {"type": "NameLoad", "value": "print"}], "funcs": ["print", "pyndri.Index.maximum_document", "pyndri.Index.document_base", "print", "pyndri.Index.maximum_document", "print", "pyndri.Index.document_base"], "neighbor_cells": [112755], "id": 112756, "header": "", "annotation": [" The loaded index can be used to access a collection of documents in an easy manner We ll give you some examples to get some idea of what it can do it is up to you to figure out how to use it for the remainder of the assignment ", " ", " First let s look at the number of documents since Pyndri indexes the documents using incremental identifiers we can simply take the lowest index and the maximum document and consider the difference "]}
{"funcs": ["numpy.matrix", "scipy.signal.convolve", "pylab.imshow"], "file": "/projects/bdata/jupyter/target/nb_598739.py", "target_func": "none_func", "context": "\nconvol = [[0, 0, 1], [(-100), 1, 0], [1, (-1), 6]]\n\nprint np.matrix(convol)\n\nimg_3 = sg.convolve(img, convol)\n\nplt.imshow(img_3, cmap='Greys_r')\n", "target_lineno": 57, "nodes": [{"type": "Module", "children": [1, 16, 22, 30]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "convol"}, {"type": "ListLoad", "children": [4, 8, 12]}, {"type": "ListLoad", "children": [5, 6, 7]}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "ListLoad", "children": [9, 10, 11]}, {"type": "Num", "value": "-100"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "ListLoad", "children": [13, 14, 15]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "-1"}, {"type": "Num", "value": "6"}, {"type": "Print", "children": [17]}, {"type": "Call", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "matrix"}, {"type": "NameLoad", "value": "convol"}, {"type": "Assign", "children": [23, 24]}, {"type": "NameStore", "value": "img_3"}, {"type": "Call", "children": [25, 28, 29]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "sg"}, {"type": "attr", "value": "convolve"}, {"type": "NameLoad", "value": "img"}, {"type": "NameLoad", "value": "convol"}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32, 35, 36]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "NameLoad", "value": "img_3"}, {"type": "keyword", "children": [37], "value": "cmap"}, {"type": "Str", "value": "Greys_r"}], "stage": null, "id": 543316, "neighbor_cells": [543315], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_142698.py", "target_func": "none_func", "context": "\ngs.best_estimator_.coef_\n", "target_lineno": 167, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "gs"}, {"type": "attr", "value": "best_estimator_"}, {"type": "attr", "value": "coef_"}], "stage": null, "id": 105218, "neighbor_cells": [105217], "header": "", "annotation": []}
{"funcs": ["sklearn.cross_validation.train_test_split"], "file": "/projects/bdata/jupyter/target/nb_977203.py", "target_func": "none_func", "context": "\n(train_X, test_X, train_Y, test_Y) = sklearn.cross_validation.train_test_split(X, Y, test_size=0.1)\n", "target_lineno": 98, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 7]}, {"type": "TupleStore", "children": [3, 4, 5, 6]}, {"type": "NameStore", "value": "train_X"}, {"type": "NameStore", "value": "test_X"}, {"type": "NameStore", "value": "train_Y"}, {"type": "NameStore", "value": "test_Y"}, {"type": "Call", "children": [8, 13, 14, 15]}, {"type": "AttributeLoad", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "sklearn"}, {"type": "attr", "value": "cross_validation"}, {"type": "attr", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "Y"}, {"type": "keyword", "children": [16], "value": "test_size"}, {"type": "Num", "value": "0.1"}], "stage": null, "id": 615503, "neighbor_cells": [615502], "header": "", "annotation": []}
{"target_lineno": 32, "file": "/projects/bdata/jupyter/target/nb_692683.py", "context": "\ndata = pd.io.stata.read_stata('data/us_job_market_discrimination.dta')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "data"}, {"type": "Call", "children": [4, 11]}, {"type": "AttributeLoad", "children": [5, 10]}, {"type": "AttributeLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "io"}, {"type": "attr", "value": "stata"}, {"type": "attr", "value": "read_stata"}, {"type": "Str", "value": "data/us_job_market_discrimination.dta"}], "funcs": ["pandas.io.stata.read_stata"], "neighbor_cells": [1044024], "id": 1044025, "header": "", "annotation": []}
{"target_lineno": 438, "file": "/projects/bdata/jupyter/target/nb_819160.py", "context": "\nprint(reduced_data.shape)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "reduced_data"}, {"type": "attr", "value": "shape"}], "funcs": ["print"], "neighbor_cells": [1235692], "id": 1235693, "header": "", "annotation": []}
{"target_lineno": 941, "file": "/projects/bdata/jupyter/target/nb_3233.py", "context": "\nerror = nnet.categorical_crossentropy(v_y, t_outp).sum()\n\ng_all = T.grad(error, w_all)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "error"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 11]}, {"type": "Call", "children": [6, 9, 10]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "nnet"}, {"type": "attr", "value": "categorical_crossentropy"}, {"type": "NameLoad", "value": "v_y"}, {"type": "NameLoad", "value": "t_outp"}, {"type": "attr", "value": "sum"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "g_all"}, {"type": "Call", "children": [15, 18, 19]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "T"}, {"type": "attr", "value": "grad"}, {"type": "NameLoad", "value": "error"}, {"type": "NameLoad", "value": "w_all"}], "funcs": ["nnet.categorical_crossentropy.sum", "nnet.categorical_crossentropy", "T.grad"], "neighbor_cells": [1093514], "id": 1093515, "header": "", "annotation": [" We can now calculate our loss function and all of our gradients with just a couple of lines of code "]}
{"target_lineno": 182, "file": "/projects/bdata/jupyter/target/nb_199384.py", "context": "\ntest_cases_text = pd.read_csv('./data/test_cases_text.csv')\n\npred = []\n\nfor (index, row) in test_cases_text.iterrows():\n    inp = [row['in_0'], row['in_1']]\n    tmp = get_next(inp)\n    pred.append(tmp)\n\ntest_cases_text['predicted'] = pred\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8, 11, 42]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "test_cases_text"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "./data/test_cases_text.csv"}, {"type": "Assign", "children": [9, 10]}, {"type": "NameStore", "value": "pred"}, {"type": "ListLoad"}, {"type": "For", "children": [12, 15, 19]}, {"type": "TupleStore", "children": [13, 14]}, {"type": "NameStore", "value": "index"}, {"type": "NameStore", "value": "row"}, {"type": "Call", "children": [16]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "test_cases_text"}, {"type": "attr", "value": "iterrows"}, {"type": "body", "children": [20, 31, 36]}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "inp"}, {"type": "ListLoad", "children": [23, 27]}, {"type": "SubscriptLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "row"}, {"type": "Index", "children": [26]}, {"type": "Str", "value": "in_0"}, {"type": "SubscriptLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "row"}, {"type": "Index", "children": [30]}, {"type": "Str", "value": "in_1"}, {"type": "Assign", "children": [32, 33]}, {"type": "NameStore", "value": "tmp"}, {"type": "Call", "children": [34, 35]}, {"type": "NameLoad", "value": "get_next"}, {"type": "NameLoad", "value": "inp"}, {"type": "Expr", "children": [37]}, {"type": "Call", "children": [38, 41]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "pred"}, {"type": "attr", "value": "append"}, {"type": "NameLoad", "value": "tmp"}, {"type": "Assign", "children": [43, 47]}, {"type": "SubscriptStore", "children": [44, 45]}, {"type": "NameLoad", "value": "test_cases_text"}, {"type": "Index", "children": [46]}, {"type": "Str", "value": "predicted"}, {"type": "NameLoad", "value": "pred"}], "funcs": ["pandas.read_csv", "pandas.read_csv.iterrows", "get_next", "append"], "neighbor_cells": [922474], "id": 922475, "header": "", "annotation": []}
{"target_lineno": 90, "file": "/projects/bdata/jupyter/target/nb_891145.py", "context": "\ny = mushrooms['mr_class']\n\ny.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "mushrooms"}, {"type": "Index", "children": [6]}, {"type": "Str", "value": "mr_class"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "y"}, {"type": "attr", "value": "head"}], "funcs": ["head"], "neighbor_cells": [178024], "id": 178025, "header": "", "annotation": []}
{"funcs": ["pandas.merge.head"], "file": "/projects/bdata/jupyter/target/nb_175139.py", "target_func": "none_func", "context": "\nstats_table.head(5)\n", "target_lineno": 127, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "stats_table"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "5"}], "stage": null, "id": 508097, "neighbor_cells": [508096], "header": "", "annotation": []}
{"funcs": ["make_Xy_shift", "train_test_split_clf_plot"], "file": "/projects/bdata/jupyter/target/nb_244165.py", "target_func": "none_func", "context": "\n(dfX, y, yBin) = make_Xy_shift(df_b, 'snp_close', 30)\n\ntrain_test_split_clf_plot(dfX, yBin)\n", "target_lineno": 977, "nodes": [{"type": "Module", "children": [1, 11]}, {"type": "Assign", "children": [2, 6]}, {"type": "TupleStore", "children": [3, 4, 5]}, {"type": "NameStore", "value": "dfX"}, {"type": "NameStore", "value": "y"}, {"type": "NameStore", "value": "yBin"}, {"type": "Call", "children": [7, 8, 9, 10]}, {"type": "NameLoad", "value": "make_Xy_shift"}, {"type": "NameLoad", "value": "df_b"}, {"type": "Str", "value": "snp_close"}, {"type": "Num", "value": "30"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 14, 15]}, {"type": "NameLoad", "value": "train_test_split_clf_plot"}, {"type": "NameLoad", "value": "dfX"}, {"type": "NameLoad", "value": "yBin"}], "stage": null, "id": 868409, "neighbor_cells": [868408], "header": "", "annotation": []}
{"target_lineno": 116, "file": "/projects/bdata/jupyter/target/nb_47889.py", "context": "\nkobe[(kobe.shot_made_flag == 0)].shot_distance.hist(bins=np.arange(0, 70, 1), alpha=0.4, log=True)\n\nkobe[(kobe.shot_made_flag == 1)].shot_distance.hist(bins=np.arange(0, 70, 1), alpha=0.4, log=True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 27]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 15, 23, 25]}, {"type": "AttributeLoad", "children": [4, 14]}, {"type": "AttributeLoad", "children": [5, 13]}, {"type": "SubscriptLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "kobe"}, {"type": "Index", "children": [8]}, {"type": "CompareEq", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "kobe"}, {"type": "attr", "value": "shot_made_flag"}, {"type": "Num", "value": "0"}, {"type": "attr", "value": "shot_distance"}, {"type": "attr", "value": "hist"}, {"type": "keyword", "value": "bins", "children": [16]}, {"type": "Call", "children": [17, 20, 21, 22]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "70"}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "alpha", "children": [24]}, {"type": "Num", "value": "0.4"}, {"type": "keyword", "value": "log", "children": [26]}, {"type": "NameConstant"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 41, 49, 51]}, {"type": "AttributeLoad", "children": [30, 40]}, {"type": "AttributeLoad", "children": [31, 39]}, {"type": "SubscriptLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "kobe"}, {"type": "Index", "children": [34]}, {"type": "CompareEq", "children": [35, 38]}, {"type": "AttributeLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "kobe"}, {"type": "attr", "value": "shot_made_flag"}, {"type": "Num", "value": "1"}, {"type": "attr", "value": "shot_distance"}, {"type": "attr", "value": "hist"}, {"type": "keyword", "value": "bins", "children": [42]}, {"type": "Call", "children": [43, 46, 47, 48]}, {"type": "AttributeLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "70"}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "alpha", "children": [50]}, {"type": "Num", "value": "0.4"}, {"type": "keyword", "value": "log", "children": [52]}, {"type": "NameConstant"}], "funcs": ["shot_distance.hist", "numpy.arange", "shot_distance.hist", "numpy.arange"], "neighbor_cells": [1067913], "id": 1067914, "header": "", "annotation": [" The graph above looks at the shot distance in histogram See a large amount of shots made by the hoop 1600 missed out of nearly 3000 "]}
{"funcs": ["r2"], "file": "/projects/bdata/jupyter/target/nb_164388.py", "target_func": "none_func", "context": "\nrf_r2_2 = r2(rf_pred2, y_test2)\n\nprint ('r2 = %.2f' % rf_r2_2)\n", "target_lineno": 2603, "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "rf_r2_2"}, {"type": "Call", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "r2"}, {"type": "NameLoad", "value": "rf_pred2"}, {"type": "NameLoad", "value": "y_test2"}, {"type": "Print", "children": [8]}, {"type": "BinOpMod", "children": [9, 10]}, {"type": "Str", "value": "r2 = %.2f"}, {"type": "NameLoad", "value": "rf_r2_2"}], "stage": null, "id": 1067754, "neighbor_cells": [1067753], "header": "", "annotation": [" The average difference between prediction and observation is 2 1 days which is relatively low ", " R sup 2 sup Coefficient of Determination", " R sup 2 sup quantifies the goodness of fit of the linear model More specifically it depicts the predictive power of the model ", " ", " Range 0 1 "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_787064.py", "target_func": "none_func", "context": "\ndf_Jan_Mar2015 = (((mask_2015['Month'] == 1) | (mask_2015['Month'] == 2)) | (mask_2015['Month'] == 3))\n", "target_lineno": 380, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "df_Jan_Mar2015"}, {"type": "BinOpBitOr", "children": [4, 17]}, {"type": "BinOpBitOr", "children": [5, 11]}, {"type": "CompareEq", "children": [6, 10]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "mask_2015"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "Month"}, {"type": "Num", "value": "1"}, {"type": "CompareEq", "children": [12, 16]}, {"type": "SubscriptLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "mask_2015"}, {"type": "Index", "children": [15]}, {"type": "Str", "value": "Month"}, {"type": "Num", "value": "2"}, {"type": "CompareEq", "children": [18, 22]}, {"type": "SubscriptLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "mask_2015"}, {"type": "Index", "children": [21]}, {"type": "Str", "value": "Month"}, {"type": "Num", "value": "3"}], "stage": null, "id": 375166, "neighbor_cells": [375165], "header": "", "annotation": []}
{"funcs": ["numpy.array"], "file": "/projects/bdata/jupyter/target/nb_520375.py", "target_func": "none_func", "context": "\nvector = np.array([1.0, 2, 3])\n\nprint 'vector mixing floats and integers', vector\n\nprint 'data type', vector.dtype\n", "target_lineno": 114, "nodes": [{"type": "Module", "children": [1, 11, 14]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "vector"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [8, 9, 10]}, {"type": "Num", "value": "1.0"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "3"}, {"type": "Print", "children": [12, 13]}, {"type": "Str", "value": "vector mixing floats and integers"}, {"type": "NameLoad", "value": "vector"}, {"type": "Print", "children": [15, 16]}, {"type": "Str", "value": "data type"}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "vector"}, {"type": "attr", "value": "dtype"}], "stage": null, "id": 1001256, "neighbor_cells": [1001255], "header": "", "annotation": [" vector is not a list ", " it s a special kind of object called an N dimensional array or ndarray ", " When we ask for its shape ", " we get back a tuple showing how large it is along each axis ", " In this case ", " that tuple only has the value 3", " because our vector has three elements along the first axis ", " The property vector dtype tells us that the elements of the vector are all 64 bit integers ", " We ll take a look at the end of this section at why all the array s elements must be of the same type ", " We can create arrays whose elements have a different data type by providing initial values of that type ", " If we provide a mix of types ", " NumPy converts everything to the most general of those types ", " For example ", " if we provide a mix of integers and floats ", " we get an array of floats "]}
{"target_lineno": 220, "file": "/projects/bdata/jupyter/target/nb_395385.py", "context": "\nand_ = np.array([[1, 0, 0, 0], [1, 0, 1, 0], [1, 1, 0, 0], [1, 1, 1, 1]])\n\nand_\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 28]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "and_"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "array"}, {"type": "ListLoad", "children": [8, 13, 18, 23]}, {"type": "ListLoad", "children": [9, 10, 11, 12]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "ListLoad", "children": [14, 15, 16, 17]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "ListLoad", "children": [19, 20, 21, 22]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "0"}, {"type": "ListLoad", "children": [24, 25, 26, 27]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [29]}, {"type": "NameLoad", "value": "and_"}], "funcs": ["numpy.array"], "neighbor_cells": [608048], "id": 608049, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_515895.py", "target_func": "none_func", "context": "\nfh_cl = fh_cl[(fh_cl.CL != 'NaN')]\n", "target_lineno": 536, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "fh_cl"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "fh_cl"}, {"type": "Index", "children": [6]}, {"type": "CompareNotEq", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "fh_cl"}, {"type": "attr", "value": "CL"}, {"type": "Str", "value": "NaN"}], "stage": null, "id": 1013477, "neighbor_cells": [1013476], "header": "", "annotation": []}
{"target_lineno": 21, "file": "/projects/bdata/jupyter/target/nb_384426.py", "context": "\nfrom gensim import corpora\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "value": "gensim", "children": [2]}, {"type": "alias", "value": "corpora"}], "funcs": [], "neighbor_cells": [1277030], "id": 1277031, "header": "", "annotation": [" if you want to see logging events ", " ", " From Strings to Vectors", " ", " This time let s start from documents represented as strings "]}
{"target_lineno": 115, "file": "/projects/bdata/jupyter/target/nb_176788.py", "context": "\nparam['w'] = [[param['word_id'][documents[d][i]] for i in range(param['N'][d])] for d in range(param['D'])]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 6]}, {"type": "SubscriptStore", "children": [3, 4]}, {"type": "NameLoad", "value": "param"}, {"type": "Index", "children": [5]}, {"type": "Str", "value": "w"}, {"type": "ListComp", "children": [7, 32]}, {"type": "ListComp", "children": [8, 21]}, {"type": "SubscriptLoad", "children": [9, 13]}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "param"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "word_id"}, {"type": "Index", "children": [14]}, {"type": "SubscriptLoad", "children": [15, 19]}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "documents"}, {"type": "Index", "children": [18]}, {"type": "NameLoad", "value": "d"}, {"type": "Index", "children": [20]}, {"type": "NameLoad", "value": "i"}, {"type": "comprehension", "children": [22, 23]}, {"type": "NameStore", "value": "i"}, {"type": "Call", "children": [24, 25]}, {"type": "NameLoad", "value": "range"}, {"type": "SubscriptLoad", "children": [26, 30]}, {"type": "SubscriptLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "param"}, {"type": "Index", "children": [29]}, {"type": "Str", "value": "N"}, {"type": "Index", "children": [31]}, {"type": "NameLoad", "value": "d"}, {"type": "comprehension", "children": [33, 34]}, {"type": "NameStore", "value": "d"}, {"type": "Call", "children": [35, 36]}, {"type": "NameLoad", "value": "range"}, {"type": "SubscriptLoad", "children": [37, 38]}, {"type": "NameLoad", "value": "param"}, {"type": "Index", "children": [39]}, {"type": "Str", "value": "D"}], "funcs": ["range", "range"], "neighbor_cells": [992404], "id": 992405, "header": "", "annotation": []}
{"funcs": ["matplotlib.pyplot.figure", "seaborn.countplot"], "file": "/projects/bdata/jupyter/target/nb_488510.py", "target_func": "none_func", "context": "\nplt.figure(figsize=(12, 6))\n\nsns.countplot(x='Neighborhood', data=df_train)\n", "target_lineno": 400, "nodes": [{"type": "Module", "children": [1, 10]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "figure"}, {"type": "keyword", "children": [7], "value": "figsize"}, {"type": "TupleLoad", "children": [8, 9]}, {"type": "Num", "value": "12"}, {"type": "Num", "value": "6"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15, 17]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "countplot"}, {"type": "keyword", "children": [16], "value": "x"}, {"type": "Str", "value": "Neighborhood"}, {"type": "keyword", "children": [18], "value": "data"}, {"type": "NameLoad", "value": "df_train"}], "stage": null, "id": 1125401, "neighbor_cells": [1125400], "header": "", "annotation": []}
{"target_lineno": 509, "file": "/projects/bdata/jupyter/target/nb_196339.py", "context": "\nimport numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nget_ipython().magic('matplotlib inline')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4, 7, 10]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy", "children": [3]}, {"type": "identifier", "value": "np"}, {"type": "Import", "children": [5]}, {"type": "alias", "value": "pandas", "children": [6]}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "matplotlib.pyplot", "children": [9]}, {"type": "identifier", "value": "plt"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 16]}, {"type": "AttributeLoad", "children": [13, 15]}, {"type": "Call", "children": [14]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}], "funcs": ["get_ipython.magic", "get_ipython"], "neighbor_cells": [1271227], "id": 1271228, "header": "", "annotation": [" 4 Reproducing some insights about the Election", " ", " Nate not a genius just a Bayesian Silver writes often about polls and their utility of predicting elections One of the things he emphasized during the 2016 campaign is that even large polls of people with a consistent lead for one candidate will show wild swings in any given window in time ", " ", " Problem 1 Using Pandas and numpy try to reproduce this plot from a Nate Silve Tweet qualitatively using the same assumptions ", " ", " img src https www evernote com l AUU KkH3Z lBdKokzCzVIUe53YZLQ9e AuMB image png ", " ", " https twitter com NateSilver538 status 769565612955824128"]}
{"target_lineno": 147, "file": "/projects/bdata/jupyter/target/nb_673809.py", "context": "\nclf.fit(vec_Xtrain, y_train)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "vec_Xtrain"}, {"type": "NameLoad", "value": "y_train"}], "funcs": ["sklearn.linear_model.LinearRegression.fit"], "neighbor_cells": [575378], "id": 575379, "header": "", "annotation": []}
{"target_lineno": 572, "file": "/projects/bdata/jupyter/target/nb_592129.py", "context": "\nidx = 0\n\nfor (lst, val) in ttps:\n    print('Topic {0}'.format(idx))\n    print((35 * '-'))\n    idx += 1\n    for (i, z) in lst:\n        print('    {0:20s}: {1:5.4f}'.format(z, i))\n    print((35 * '-'))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "idx"}, {"type": "Num", "value": "0"}, {"type": "For", "children": [5, 8, 9]}, {"type": "TupleStore", "children": [6, 7]}, {"type": "NameStore", "value": "lst"}, {"type": "NameStore", "value": "val"}, {"type": "NameLoad", "value": "ttps"}, {"type": "body", "children": [10, 18, 24, 27, 42]}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "Str", "value": "Topic {0}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "idx"}, {"type": "Expr", "children": [19]}, {"type": "Call", "children": [20, 21]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMult", "children": [22, 23]}, {"type": "Num", "value": "35"}, {"type": "Str", "value": "-"}, {"type": "AugAssignAdd", "children": [25, 26]}, {"type": "NameStore", "value": "idx"}, {"type": "Num", "value": "1"}, {"type": "For", "children": [28, 31, 32]}, {"type": "TupleStore", "children": [29, 30]}, {"type": "NameStore", "value": "i"}, {"type": "NameStore", "value": "z"}, {"type": "NameLoad", "value": "lst"}, {"type": "body", "children": [33]}, {"type": "Expr", "children": [34]}, {"type": "Call", "children": [35, 36]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [37, 40, 41]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "Str", "value": "    {0:20s}: {1:5.4f}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "z"}, {"type": "NameLoad", "value": "i"}, {"type": "Expr", "children": [43]}, {"type": "Call", "children": [44, 45]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMult", "children": [46, 47]}, {"type": "Num", "value": "35"}, {"type": "Str", "value": "-"}], "funcs": ["print", "format", "print", "print", "format", "print"], "neighbor_cells": [1209581], "id": 1209582, "header": "", "annotation": []}
{"funcs": ["len"], "file": "/projects/bdata/jupyter/target/nb_334048.py", "target_func": "none_func", "context": "\nlen(movie_data[(movie_data['DOMESTIC_OPENING'] == 0)])\n", "target_lineno": 399, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "len"}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "movie_data"}, {"type": "Index", "children": [7]}, {"type": "CompareEq", "children": [8, 12]}, {"type": "SubscriptLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "movie_data"}, {"type": "Index", "children": [11]}, {"type": "Str", "value": "DOMESTIC_OPENING"}, {"type": "Num", "value": "0"}], "stage": null, "id": 323964, "neighbor_cells": [323963], "header": " Check Domestic Openings", "annotation": [" Check the data for missing values and other weird things", " ", " Impute what I can into the raw data", " Check Domestic Openings"]}
{"target_lineno": 33, "file": "/projects/bdata/jupyter/target/nb_538075.py", "context": "\nmodel = svm.SVC(kernel='poly')\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "svm"}, {"type": "attr", "value": "SVC"}, {"type": "keyword", "value": "kernel", "children": [8]}, {"type": "Str", "value": "poly"}], "funcs": ["sklearn.svm.SVC"], "neighbor_cells": [1134688], "id": 1134689, "header": "", "annotation": []}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_123379.py", "target_func": "none_func", "context": "\nimport numpy\n\nimport pylab\n\nimport numpy.random\n\nimport sklearn.datasets\n\nimport sklearn.decomposition\n\nimport sklearn.cross_validation as cv\n\nimport sklearn.svm\n\nimport pandas as pd\n\nimport matplotlib as plt\n\nfrom sklearn import metrics, datasets\n\nfrom sklearn.cross_validation import train_test_split\n\nget_ipython().magic(u'pylab inline')\n", "target_lineno": 5, "nodes": [{"type": "Module", "children": [1, 3, 5, 7, 9, 11, 14, 16, 19, 22, 25, 27]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "numpy"}, {"type": "Import", "children": [4]}, {"type": "alias", "value": "pylab"}, {"type": "Import", "children": [6]}, {"type": "alias", "value": "numpy.random"}, {"type": "Import", "children": [8]}, {"type": "alias", "value": "sklearn.datasets"}, {"type": "Import", "children": [10]}, {"type": "alias", "value": "sklearn.decomposition"}, {"type": "Import", "children": [12]}, {"type": "alias", "children": [13], "value": "sklearn.cross_validation"}, {"type": "identifier", "value": "cv"}, {"type": "Import", "children": [15]}, {"type": "alias", "value": "sklearn.svm"}, {"type": "Import", "children": [17]}, {"type": "alias", "children": [18], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Import", "children": [20]}, {"type": "alias", "children": [21], "value": "matplotlib"}, {"type": "identifier", "value": "plt"}, {"type": "ImportFrom", "children": [23, 24], "value": "sklearn"}, {"type": "alias", "value": "metrics"}, {"type": "alias", "value": "datasets"}, {"type": "ImportFrom", "children": [26], "value": "sklearn.cross_validation"}, {"type": "alias", "value": "train_test_split"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29, 33]}, {"type": "AttributeLoad", "children": [30, 32]}, {"type": "Call", "children": [31]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "pylab inline"}], "stage": null, "id": 23899, "neighbor_cells": [-1], "header": " ", "annotation": [" coding utf 8", " "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_464518.py", "target_func": "none_func", "context": "\n(a + 1)\n", "target_lineno": 415, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "BinOpAdd", "children": [3, 4]}, {"type": "NameLoad", "value": "a"}, {"type": "Num", "value": "1"}], "stage": null, "id": 1128759, "neighbor_cells": [1128758], "header": "", "annotation": []}
{"funcs": ["sklearn.grid_search.GridSearchCV.predict_proba"], "file": "/projects/bdata/jupyter/target/nb_58437.py", "target_func": "none_func", "context": "\nsubmission_pred = clf.predict_proba(x_test)[:, 1]\n", "target_lineno": 681, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "submission_pred"}, {"type": "SubscriptLoad", "children": [4, 9]}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "predict_proba"}, {"type": "NameLoad", "value": "x_test"}, {"type": "ExtSlice", "children": [10, 11]}, {"type": "Slice"}, {"type": "Index", "children": [12]}, {"type": "Num", "value": "1"}], "stage": null, "id": 1002432, "neighbor_cells": [1002431], "header": "", "annotation": []}
{"target_lineno": 347, "file": "/projects/bdata/jupyter/target/nb_364326.py", "context": "\nnp.random.randint(low=50, high=100, size=(3, 7))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 8, 10, 12]}, {"type": "AttributeLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "random"}, {"type": "attr", "value": "randint"}, {"type": "keyword", "value": "low", "children": [9]}, {"type": "Num", "value": "50"}, {"type": "keyword", "value": "high", "children": [11]}, {"type": "Num", "value": "100"}, {"type": "keyword", "value": "size", "children": [13]}, {"type": "TupleLoad", "children": [14, 15]}, {"type": "Num", "value": "3"}, {"type": "Num", "value": "7"}], "funcs": ["numpy.random.randint"], "neighbor_cells": [935388], "id": 935389, "header": "", "annotation": []}
{"funcs": ["get_ipython.run_line_magic", "get_ipython", "pandas.DataFrame.transpose", "pandas.DataFrame", "pandas.DataFrame.transpose.describe"], "file": "/projects/bdata/jupyter/target/nb_402009.py", "target_func": "none_func", "context": "\nget_ipython().run_line_magic('time', 'DATACrawl = pickle.load( open( \"v1.4\\\\DATA_CRAWL-v4a.p\", \"rb\" ) )')\n\ncrawlIndicator = pd.DataFrame([DATACrawl.crawlMem, DATACrawl.crawlTime]).transpose()\n\ncrawlIndicator.describe()\n", "target_lineno": 21, "nodes": [{"type": "Module", "children": [1, 9, 25]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "time"}, {"type": "Str", "value": "DATACrawl = pickle.load( open( \"v1.4\\DATA_CRAWL-v4a.p\", \"rb\" ) )"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "crawlIndicator"}, {"type": "Call", "children": [12]}, {"type": "AttributeLoad", "children": [13, 24]}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "ListLoad", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "DATACrawl"}, {"type": "attr", "value": "crawlMem"}, {"type": "AttributeLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "DATACrawl"}, {"type": "attr", "value": "crawlTime"}, {"type": "attr", "value": "transpose"}, {"type": "Expr", "children": [26]}, {"type": "Call", "children": [27]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "crawlIndicator"}, {"type": "attr", "value": "describe"}], "stage": null, "id": 515078, "neighbor_cells": [515077], "header": " 1 Evaluating Crawling Indicator", "annotation": [" 1 Evaluating Crawling Indicator"]}
{"funcs": ["sklearn.ensemble.RandomForestClassifier", "time.time", "sklearn.ensemble.RandomForestClassifier.fit", "time.time", "sklearn.ensemble.RandomForestClassifier.predict", "sklearn.metrics.accuracy_score", "sklearn.metrics.classification_report"], "file": "/projects/bdata/jupyter/target/nb_219214.py", "target_func": "none_func", "context": "\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf_dt_RF = RandomForestClassifier()\n\nstart_time = time.time()\n\nclf_dt_RF.fit(X_train, y_train)\n\nprint ('The time for training Decision Tree is  %s seconds ' % (time.time() - start_time))\n\ny_pred = clf_dt_RF.predict(X_test)\n\nprint '\\n==================================================================='\n\nprint 'The accuracy on validation dataset of RF : \\t', metrics.accuracy_score(y_test, y_pred)\n\nprint '==================================================================='\n\nprint metrics.classification_report(y_test, y_pred, target_names=['1', '2', '3', '5', '6', '7'])\n", "target_lineno": 440, "nodes": [{"type": "Module", "children": [1, 3, 7, 13, 20, 29, 36, 38, 46, 48]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.ensemble"}, {"type": "alias", "value": "RandomForestClassifier"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "clf_dt_RF"}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "RandomForestClassifier"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "start_time"}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "time"}, {"type": "attr", "value": "time"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 18, 19]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "clf_dt_RF"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "Print", "children": [21]}, {"type": "BinOpMod", "children": [22, 23]}, {"type": "Str", "value": "The time for training Decision Tree is  %s seconds "}, {"type": "BinOpSub", "children": [24, 28]}, {"type": "Call", "children": [25]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "time"}, {"type": "attr", "value": "time"}, {"type": "NameLoad", "value": "start_time"}, {"type": "Assign", "children": [30, 31]}, {"type": "NameStore", "value": "y_pred"}, {"type": "Call", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "clf_dt_RF"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Print", "children": [37]}, {"type": "Str", "value": "\n==================================================================="}, {"type": "Print", "children": [39, 40]}, {"type": "Str", "value": "The accuracy on validation dataset of RF : \t"}, {"type": "Call", "children": [41, 44, 45]}, {"type": "AttributeLoad", "children": [42, 43]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred"}, {"type": "Print", "children": [47]}, {"type": "Str", "value": "==================================================================="}, {"type": "Print", "children": [49]}, {"type": "Call", "children": [50, 53, 54, 55]}, {"type": "AttributeLoad", "children": [51, 52]}, {"type": "NameLoad", "value": "metrics"}, {"type": "attr", "value": "classification_report"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred"}, {"type": "keyword", "children": [56], "value": "target_names"}, {"type": "ListLoad", "children": [57, 58, 59, 60, 61, 62]}, {"type": "Str", "value": "1"}, {"type": "Str", "value": "2"}, {"type": "Str", "value": "3"}, {"type": "Str", "value": "5"}, {"type": "Str", "value": "6"}, {"type": "Str", "value": "7"}], "stage": null, "id": 662915, "neighbor_cells": [662914], "header": "", "annotation": [" Random Forest", " DT with gini "]}
{"target_lineno": 511, "file": "/projects/bdata/jupyter/target/nb_603840.py", "context": "\nX.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "X"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [1076604], "id": 1076605, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_570945.py", "target_func": "none_func", "context": "\n\ndef collapse7(arr):\n    arr[(arr == 10)] = 7\n    arr[(arr == 11)] = 9\n    return arr\n", "target_lineno": 219, "nodes": [{"type": "Module", "children": [1]}, {"type": "FunctionDef", "children": [2, 6, 25], "value": "collapse7"}, {"type": "arguments", "children": [3, 5]}, {"type": "args", "children": [4]}, {"type": "NameParam", "value": "arr"}, {"type": "defaults"}, {"type": "body", "children": [7, 15, 23]}, {"type": "Assign", "children": [8, 14]}, {"type": "SubscriptStore", "children": [9, 10]}, {"type": "NameLoad", "value": "arr"}, {"type": "Index", "children": [11]}, {"type": "CompareEq", "children": [12, 13]}, {"type": "NameLoad", "value": "arr"}, {"type": "Num", "value": "10"}, {"type": "Num", "value": "7"}, {"type": "Assign", "children": [16, 22]}, {"type": "SubscriptStore", "children": [17, 18]}, {"type": "NameLoad", "value": "arr"}, {"type": "Index", "children": [19]}, {"type": "CompareEq", "children": [20, 21]}, {"type": "NameLoad", "value": "arr"}, {"type": "Num", "value": "11"}, {"type": "Num", "value": "9"}, {"type": "Return", "children": [24]}, {"type": "NameLoad", "value": "arr"}, {"type": "decorator_list"}], "stage": null, "id": 1159997, "neighbor_cells": [1159996], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_783079.py", "target_func": "none_func", "context": "\nfilenames\n", "target_lineno": 85, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "NameLoad", "value": "filenames"}], "stage": null, "id": 521369, "neighbor_cells": [521368], "header": "", "annotation": []}
{"target_lineno": 85, "file": "/projects/bdata/jupyter/target/nb_793105.py", "context": "\ncustom_tokenize = (lambda x: x.split(';'))\n\ncustom_tokenize(clean_train_words[1])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "custom_tokenize"}, {"type": "Lambda", "children": [4, 8]}, {"type": "arguments", "children": [5, 7]}, {"type": "args", "children": [6]}, {"type": "arg"}, {"type": "defaults"}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "x"}, {"type": "attr", "value": "split"}, {"type": "Str", "value": ";"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15, 16]}, {"type": "NameLoad", "value": "custom_tokenize"}, {"type": "SubscriptLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "clean_train_words"}, {"type": "Index", "children": [19]}, {"type": "Num", "value": "1"}], "funcs": ["x.split"], "neighbor_cells": [232601], "id": 232602, "header": "", "annotation": []}
{"target_lineno": 302, "file": "/projects/bdata/jupyter/target/nb_188870.py", "context": "\nmodel_cv_score.sort_values('r2_mean', ascending=False)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "model_cv_score"}, {"type": "attr", "value": "sort_values"}, {"type": "Str", "value": "r2_mean"}, {"type": "keyword", "value": "ascending", "children": [8]}, {"type": "NameConstant"}], "funcs": ["pandas.DataFrame.sort_values"], "neighbor_cells": [1319511], "id": 1319512, "header": "", "annotation": []}
{"funcs": ["pandas.read_csv", "range", "pandas.read_csv.head"], "file": "/projects/bdata/jupyter/target/nb_223167.py", "target_func": "none_func", "context": "\nimport pandas as pd\n\nr_cols = ['user_id', 'movie_id', 'rating']\n\nratings = pd.read_csv('e:/sundog-consult/udemy/datascience/ml-100k/u.data', sep='\\t', names=r_cols, usecols=range(3))\n\nratings.head()\n", "target_lineno": 11, "nodes": [{"type": "Module", "children": [1, 4, 10, 25]}, {"type": "Import", "children": [2]}, {"type": "alias", "children": [3], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "r_cols"}, {"type": "ListLoad", "children": [7, 8, 9]}, {"type": "Str", "value": "user_id"}, {"type": "Str", "value": "movie_id"}, {"type": "Str", "value": "rating"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "ratings"}, {"type": "Call", "children": [13, 16, 17, 19, 21]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "Str", "value": "e:/sundog-consult/udemy/datascience/ml-100k/u.data"}, {"type": "keyword", "children": [18], "value": "sep"}, {"type": "Str", "value": "\t"}, {"type": "keyword", "children": [20], "value": "names"}, {"type": "NameLoad", "value": "r_cols"}, {"type": "keyword", "children": [22], "value": "usecols"}, {"type": "Call", "children": [23, 24]}, {"type": "NameLoad", "value": "range"}, {"type": "Num", "value": "3"}, {"type": "Expr", "children": [26]}, {"type": "Call", "children": [27]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "NameLoad", "value": "ratings"}, {"type": "attr", "value": "head"}], "stage": null, "id": 828119, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8", " KNN K Nearest Neighbors ", " KNN is a simple concept define some distance metric between the items in your dataset and find the K closest items You can then use those items to predict some property of a test item by having them somehow vote on it ", " ", " As an example let s look at the MovieLens data We ll try to guess the rating of a movie by looking at the 10 movies that are closest to it in terms of genres and popularity ", " ", " To start we ll load up every rating in the data set into a Pandas DataFrame "]}
{"funcs": ["matplotlib.pyplot.plot", "matplotlib.pyplot.hold", "matplotlib.pyplot.plot", "matplotlib.pyplot.legend", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel"], "file": "/projects/bdata/jupyter/target/nb_203435.py", "target_func": "none_func", "context": "\nplt.plot(x, label='x')\n\nplt.hold(True)\n\nplt.plot(y, label='y')\n\nplt.legend(loc='upper left')\n\nplt.xlabel('Row number')\n\nplt.ylabel('Displacement (m)')\n", "target_lineno": 148, "nodes": [{"type": "Module", "children": [1, 9, 15, 23, 30, 36]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "x"}, {"type": "keyword", "children": [8], "value": "label"}, {"type": "Str", "value": "x"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "hold"}, {"type": "NameLoad", "value": "True"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 20, 21]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "plot"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "children": [22], "value": "label"}, {"type": "Str", "value": "y"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 28]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "legend"}, {"type": "keyword", "children": [29], "value": "loc"}, {"type": "Str", "value": "upper left"}, {"type": "Expr", "children": [31]}, {"type": "Call", "children": [32, 35]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "Row number"}, {"type": "Expr", "children": [37]}, {"type": "Call", "children": [38, 41]}, {"type": "AttributeLoad", "children": [39, 40]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "Displacement (m)"}], "stage": null, "id": 187826, "neighbor_cells": [187825], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_359778.py", "target_func": "none_func", "context": "\nbank['contact'][(bank['contact'] == 'cellular')] = 1\n\nbank['contact'][(bank['contact'] != 1)] = 0\n", "target_lineno": 119, "nodes": [{"type": "Module", "children": [1, 15]}, {"type": "Assign", "children": [2, 14]}, {"type": "SubscriptStore", "children": [3, 7]}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "bank"}, {"type": "Index", "children": [6]}, {"type": "Str", "value": "contact"}, {"type": "Index", "children": [8]}, {"type": "CompareEq", "children": [9, 13]}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "bank"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "contact"}, {"type": "Str", "value": "cellular"}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [16, 28]}, {"type": "SubscriptStore", "children": [17, 21]}, {"type": "SubscriptLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "bank"}, {"type": "Index", "children": [20]}, {"type": "Str", "value": "contact"}, {"type": "Index", "children": [22]}, {"type": "CompareNotEq", "children": [23, 27]}, {"type": "SubscriptLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "bank"}, {"type": "Index", "children": [26]}, {"type": "Str", "value": "contact"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "0"}], "stage": null, "id": 69299, "neighbor_cells": [69298], "header": "", "annotation": []}
{"target_lineno": 160, "file": "/projects/bdata/jupyter/target/nb_263009.py", "context": "\nprint('How many rows are there in events?: {:,}'.format(len(events_og)))\n\nprint('How many users are there?: {:,}'.format(len(events_og.uuid.unique())))\n\nprint('How many documents are there?: {:,}'.format(len(events_og.document_id.unique())))\n\nprint('How many displays are there?: {:,}'.format(len(events_og.display_id.unique())))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 11, 26, 41]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 8]}, {"type": "AttributeLoad", "children": [6, 7]}, {"type": "Str", "value": "How many rows are there in events?: {:,}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [9, 10]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "events_og"}, {"type": "Expr", "children": [12]}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [15, 18]}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "Str", "value": "How many users are there?: {:,}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [19, 20]}, {"type": "NameLoad", "value": "len"}, {"type": "Call", "children": [21]}, {"type": "AttributeLoad", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "events_og"}, {"type": "attr", "value": "uuid"}, {"type": "attr", "value": "unique"}, {"type": "Expr", "children": [27]}, {"type": "Call", "children": [28, 29]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [30, 33]}, {"type": "AttributeLoad", "children": [31, 32]}, {"type": "Str", "value": "How many documents are there?: {:,}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [34, 35]}, {"type": "NameLoad", "value": "len"}, {"type": "Call", "children": [36]}, {"type": "AttributeLoad", "children": [37, 40]}, {"type": "AttributeLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "events_og"}, {"type": "attr", "value": "document_id"}, {"type": "attr", "value": "unique"}, {"type": "Expr", "children": [42]}, {"type": "Call", "children": [43, 44]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [45, 48]}, {"type": "AttributeLoad", "children": [46, 47]}, {"type": "Str", "value": "How many displays are there?: {:,}"}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [49, 50]}, {"type": "NameLoad", "value": "len"}, {"type": "Call", "children": [51]}, {"type": "AttributeLoad", "children": [52, 55]}, {"type": "AttributeLoad", "children": [53, 54]}, {"type": "NameLoad", "value": "events_og"}, {"type": "attr", "value": "display_id"}, {"type": "attr", "value": "unique"}], "funcs": ["print", "format", "len", "print", "format", "len", "pandas.read_csv.uuid.unique", "print", "format", "len", "pandas.read_csv.document_id.unique", "print", "format", "len", "pandas.read_csv.display_id.unique"], "neighbor_cells": [830501], "id": 830502, "header": "", "annotation": []}
{"funcs": ["sklearn.tree.DecisionTreeClassifier.fit.predict", "sklearn.metrics.accuracy_score"], "file": "/projects/bdata/jupyter/target/nb_468824.py", "target_func": "none_func", "context": "\ndec = dt.predict(X_test)\n\nprint (' accuracy is ', accuracy_score(y_test, dec))\n", "target_lineno": 84, "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dec"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "dt"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test"}, {"type": "Print", "children": [9]}, {"type": "TupleLoad", "children": [10, 11]}, {"type": "Str", "value": " accuracy is "}, {"type": "Call", "children": [12, 13, 14]}, {"type": "NameLoad", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "dec"}], "stage": null, "id": 30070, "neighbor_cells": [30069], "header": "", "annotation": []}
{"target_lineno": 592, "file": "/projects/bdata/jupyter/target/nb_147992.py", "context": "\ndisplay_adj_cm(cv_conf, facies_labels, adjacent_facies, display_metrics=True, hide_zeros=True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 5, 6, 7, 9]}, {"type": "NameLoad", "value": "display_adj_cm"}, {"type": "NameLoad", "value": "cv_conf"}, {"type": "NameLoad", "value": "facies_labels"}, {"type": "NameLoad", "value": "adjacent_facies"}, {"type": "keyword", "value": "display_metrics", "children": [8]}, {"type": "NameConstant"}, {"type": "keyword", "value": "hide_zeros", "children": [10]}, {"type": "NameConstant"}], "funcs": ["classification_utilities.display_adj_cm"], "neighbor_cells": [110638], "id": 110639, "header": "", "annotation": [" To interpret these results consider facies SS In our test set if a sample was labeled SS the probability the sample was correct is 0 8 precision If we know a sample has facies SS then the probability it will be correctly labeled by the classifier is 0 78 recall It is desirable to have high values for both precision and recall but often when an algorithm is tuned to increase one the other decreases The F1 score https en wikipedia org wiki Precision and recall F measure combines both to give a single measure of relevancy of the classifier results ", " ", " These results can help guide intuition for how to improve the classifier results For example for a sample with facies MS or mudstone it is only classified correctly 57 of the time recall Perhaps this could be improved by introducing more training samples Sample quality could also play a role Facies BS or bafflestone has the best F1 score and relatively few training examples But this data was handpicked from other wells to provide training examples to identify this facies ", " ", " We can also consider the classification metrics when we consider misclassifying an adjacent facies as correct ", " "]}
{"funcs": ["sklearn.model_selection.train_test_split", "shuffle_split_data"], "file": "/projects/bdata/jupyter/target/nb_812219.py", "target_func": "none_func", "context": "\nfrom sklearn.model_selection import train_test_split\n\nX = housing_features\n\ny = housing_prices\n\n\ndef shuffle_split_data(X, y):\n    ' Shuffles and splits data into 70% training and 30% testing subsets,\\n        then returns the training and testing subsets. '\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, train_size=0.7)\n    return (X_train, y_train, X_test, y_test)\n\ntry:\n    (X_train, y_train, X_test, y_test) = shuffle_split_data(housing_features, housing_prices)\n    print 'Successfully shuffled and split the data!'\nexcept:\n    print 'Something went wrong with shuffling and splitting the data.'\n", "target_lineno": 127, "nodes": [{"type": "Module", "children": [1, 3, 6, 9, 37]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.model_selection"}, {"type": "alias", "value": "train_test_split"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "X"}, {"type": "NameLoad", "value": "housing_features"}, {"type": "Assign", "children": [7, 8]}, {"type": "NameStore", "value": "y"}, {"type": "NameLoad", "value": "housing_prices"}, {"type": "FunctionDef", "children": [10, 15, 36], "value": "shuffle_split_data"}, {"type": "arguments", "children": [11, 14]}, {"type": "args", "children": [12, 13]}, {"type": "NameParam", "value": "X"}, {"type": "NameParam", "value": "y"}, {"type": "defaults"}, {"type": "body", "children": [16, 18, 30]}, {"type": "Expr", "children": [17]}, {"type": "Str", "value": " Shuffles and splits data into 70% training and 30% testing subsets,\n        then returns the training and testing subsets. "}, {"type": "Assign", "children": [19, 24]}, {"type": "TupleStore", "children": [20, 21, 22, 23]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [25, 26, 27, 28]}, {"type": "NameLoad", "value": "train_test_split"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "keyword", "children": [29], "value": "train_size"}, {"type": "Num", "value": "0.7"}, {"type": "Return", "children": [31]}, {"type": "TupleLoad", "children": [32, 33, 34, 35]}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "y_train"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_test"}, {"type": "decorator_list"}, {"type": "TryExcept", "children": [38, 51]}, {"type": "body", "children": [39, 49]}, {"type": "Assign", "children": [40, 45]}, {"type": "TupleStore", "children": [41, 42, 43, 44]}, {"type": "NameStore", "value": "X_train"}, {"type": "NameStore", "value": "y_train"}, {"type": "NameStore", "value": "X_test"}, {"type": "NameStore", "value": "y_test"}, {"type": "Call", "children": [46, 47, 48]}, {"type": "NameLoad", "value": "shuffle_split_data"}, {"type": "NameLoad", "value": "housing_features"}, {"type": "NameLoad", "value": "housing_prices"}, {"type": "Print", "children": [50]}, {"type": "Str", "value": "Successfully shuffled and split the data!"}, {"type": "handlers", "children": [52]}, {"type": "ExceptHandler", "children": [53]}, {"type": "body", "children": [54]}, {"type": "Print", "children": [55]}, {"type": "Str", "value": "Something went wrong with shuffling and splitting the data."}], "stage": null, "id": 895396, "neighbor_cells": [895395], "header": "", "annotation": [" Answer For the dwelling the current client is looking at this corresponds to values of", " ", " 1 CRIM 11 95 ", " 2 RM 5 609 ", " 3 AGE 90 0 ", " Evaluating Model Performance", " In this second section of the project you will begin to develop the tools necessary for a model to make a prediction Being able to accurately evaluate each model s performance through the use of these tools helps to greatly reinforce the confidence in your predictions ", " Step 2", " In the code block below you will need to implement code so that the shuffle split data function does the following ", " Randomly shuffle the input data X and target labels housing values y ", " Split the data into training and testing subsets holding 30 of the data for testing ", " ", " If you use any functions not already acessible from the imported libraries above remember to include your import statement below as well ", " Ensure that you have executed the code block once you are done You ll know if the shuffle split data function is working if the statement Successfully shuffled and split the data is printed "]}
{"funcs": ["get_ipython.run_line_magic", "get_ipython", "pandas.read_csv"], "file": "/projects/bdata/jupyter/target/nb_767244.py", "target_func": "none_func", "context": "\nget_ipython().run_line_magic('matplotlib', 'inline')\n\nimport pandas as pd\n\npath = '../data/'\n\nurl = (path + 'bikeshare.csv')\n\nbikes = pd.read_csv(url, index_col='datetime', parse_dates=True)\n", "target_lineno": 32, "nodes": [{"type": "Module", "children": [1, 9, 12, 15, 20]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7, 8]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "run_line_magic"}, {"type": "Str", "value": "matplotlib"}, {"type": "Str", "value": "inline"}, {"type": "Import", "children": [10]}, {"type": "alias", "children": [11], "value": "pandas"}, {"type": "identifier", "value": "pd"}, {"type": "Assign", "children": [13, 14]}, {"type": "NameStore", "value": "path"}, {"type": "Str", "value": "../data/"}, {"type": "Assign", "children": [16, 17]}, {"type": "NameStore", "value": "url"}, {"type": "BinOpAdd", "children": [18, 19]}, {"type": "NameLoad", "value": "path"}, {"type": "Str", "value": "bikeshare.csv"}, {"type": "Assign", "children": [21, 22]}, {"type": "NameStore", "value": "bikes"}, {"type": "Call", "children": [23, 26, 27, 29]}, {"type": "AttributeLoad", "children": [24, 25]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "read_csv"}, {"type": "NameLoad", "value": "url"}, {"type": "keyword", "children": [28], "value": "index_col"}, {"type": "Str", "value": "datetime"}, {"type": "keyword", "children": [30], "value": "parse_dates"}, {"type": "NameLoad", "value": "True"}], "stage": null, "id": 92240, "neighbor_cells": [-1], "header": "", "annotation": [" usr bin env python", " coding utf 8", " Linear Regression", " Agenda", " ", " 1 Introducing the bikeshare dataset", " Reading in the data", " Visualizing the data", " 2 Linear regression basics", " Form of linear regression", " Building a linear regression model", " Using the model for prediction", " Does the scale of the features matter ", " 3 Working with multiple features", " Visualizing the data part 2 ", " Adding more features to the model", " 4 Choosing between models", " Feature selection", " Evaluation metrics for regression problems", " Comparing models with train test split and RMSE", " Comparing testing RMSE with null RMSE", " 5 Creating features", " Handling categorical features", " Feature engineering", " 6 Comparing linear regression with other models", " Reading in the data", " ", " We ll be working with a dataset from Capital Bikeshare that was used in a Kaggle competition data dictionary https www kaggle com c bike sharing demand data "]}
{"target_lineno": 170, "file": "/projects/bdata/jupyter/target/nb_289500.py", "context": "\ntokenizer3.n_features\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "tokenizer3"}, {"type": "attr", "value": "n_features"}], "funcs": [], "neighbor_cells": [248085], "id": 248086, "header": "", "annotation": []}
{"target_lineno": 379, "file": "/projects/bdata/jupyter/target/nb_553685.py", "context": "\nestimator_dt = DecisionTreeClassifier(class_weight={\n    True: 2000,\n})\n\ntuned_parameters = {\n    'criterion': ['gini', 'entropy'],\n    'max_depth': [None, 5, 10],\n    'min_samples_leaf': [1, 5, 10],\n}\n\nscores = ['recall']\n\ntrained_estimator_df = train_model_by_grid_search_cv(X_train, X_test, y_train, y_test, estimator_dt, tuned_parameters, ts_iterable, scores)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 26, 30]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "estimator_dt"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "DecisionTreeClassifier"}, {"type": "keyword", "value": "class_weight", "children": [6]}, {"type": "Dict", "children": [7, 8]}, {"type": "NameConstant"}, {"type": "Num", "value": "2000"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "tuned_parameters"}, {"type": "Dict", "children": [12, 13, 14, 15, 18, 22]}, {"type": "Str", "value": "criterion"}, {"type": "Str", "value": "max_depth"}, {"type": "Str", "value": "min_samples_leaf"}, {"type": "ListLoad", "children": [16, 17]}, {"type": "Str", "value": "gini"}, {"type": "Str", "value": "entropy"}, {"type": "ListLoad", "children": [19, 20, 21]}, {"type": "NameConstant"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "10"}, {"type": "ListLoad", "children": [23, 24, 25]}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "5"}, {"type": "Num", "value": "10"}, {"type": "Assign", "children": [27, 28]}, {"type": "NameStore", "value": "scores"}, {"type": "ListLoad", "children": [29]}, {"type": "Str", "value": "recall"}, {"type": "Assign", "children": [31, 32]}, {"type": "NameStore", "value": "trained_estimator_df"}, {"type": "Call", "children": [33, 34, 35, 36, 37, 38, 39, 40, 41]}, {"type": "NameLoad", "value": "train_model_by_grid_search_cv"}, {"type": "NameLoad", "value": "X_train"}, {"type": "NameLoad", "value": "X_test"}, {"type": "NameLoad", "value": "y_train"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "estimator_dt"}, {"type": "NameLoad", "value": "tuned_parameters"}, {"type": "NameLoad", "value": "ts_iterable"}, {"type": "NameLoad", "value": "scores"}], "funcs": ["sklearn.tree.DecisionTreeClassifier", "train_model_by_grid_search_cv"], "neighbor_cells": [1121478], "id": 1121479, "header": " Decision Tree Objective recall Class Weight 2000", "annotation": [" Decision Tree Objective recall Class Weight 2000"]}
{"target_lineno": 40, "file": "/projects/bdata/jupyter/target/nb_958989.py", "context": "\npd.qcut(iris['sepal length (cm)'], 5).value_counts().sort_index()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 16]}, {"type": "Call", "children": [5]}, {"type": "AttributeLoad", "children": [6, 15]}, {"type": "Call", "children": [7, 10, 14]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "qcut"}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "iris"}, {"type": "Index", "children": [13]}, {"type": "Str", "value": "sepal length (cm)"}, {"type": "Num", "value": "5"}, {"type": "attr", "value": "value_counts"}, {"type": "attr", "value": "sort_index"}], "funcs": ["pandas.qcut.value_counts.sort_index", "pandas.qcut.value_counts", "pandas.qcut"], "neighbor_cells": [280283], "id": 280284, "header": "", "annotation": []}
{"target_lineno": 46, "file": "/projects/bdata/jupyter/target/nb_490010.py", "context": "\nframes = [df2, df3, df1_1]\n\ndf_combined = pd.concat(frames, axis=0, ignore_index=True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "frames"}, {"type": "ListLoad", "children": [4, 5, 6]}, {"type": "NameLoad", "value": "df2"}, {"type": "NameLoad", "value": "df3"}, {"type": "NameLoad", "value": "df1_1"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "df_combined"}, {"type": "Call", "children": [10, 13, 14, 16]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "concat"}, {"type": "NameLoad", "value": "frames"}, {"type": "keyword", "value": "axis", "children": [15]}, {"type": "Num", "value": "0"}, {"type": "keyword", "value": "ignore_index", "children": [17]}, {"type": "NameConstant"}], "funcs": ["pandas.concat"], "neighbor_cells": [926495], "id": 926496, "header": "", "annotation": []}
{"target_lineno": 53, "file": "/projects/bdata/jupyter/target/nb_140456.py", "context": "\nfinal.reset_index(inplace=True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "final"}, {"type": "attr", "value": "reset_index"}, {"type": "keyword", "value": "inplace", "children": [7]}, {"type": "NameConstant"}], "funcs": ["pandas.DataFrame.reset_index"], "neighbor_cells": [533661], "id": 533662, "header": "", "annotation": []}
{"funcs": ["seaborn.pairplot", "seaborn.plt.show"], "file": "/projects/bdata/jupyter/target/nb_482267.py", "target_func": "none_func", "context": "\nsns.pairplot(iris, hue='species')\n\nsns.plt.show()\n", "target_lineno": 40, "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 7]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "pairplot"}, {"type": "NameLoad", "value": "iris"}, {"type": "keyword", "children": [8], "value": "hue"}, {"type": "Str", "value": "species"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11]}, {"type": "AttributeLoad", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "sns"}, {"type": "attr", "value": "plt"}, {"type": "attr", "value": "show"}], "stage": null, "id": 508717, "neighbor_cells": [508716], "header": "", "annotation": []}
{"target_lineno": 104, "file": "/projects/bdata/jupyter/target/nb_251397.py", "context": "\nmodel = LogisticRegression()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "model"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "LogisticRegression"}], "funcs": ["sklearn.linear_model.LogisticRegression"], "neighbor_cells": [235290], "id": 235291, "header": "", "annotation": []}
{"funcs": ["as_matrix.as_matrix"], "file": "/projects/bdata/jupyter/target/nb_431615.py", "target_func": "none_func", "context": "\ntrainData_out_hum = trainData_out_hum.as_matrix(columns=None)\n\ntrainData_out_hum[:10]\n", "target_lineno": 960, "nodes": [{"type": "Module", "children": [1, 9]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "trainData_out_hum"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "trainData_out_hum"}, {"type": "attr", "value": "as_matrix"}, {"type": "keyword", "children": [8], "value": "columns"}, {"type": "NameLoad", "value": "None"}, {"type": "Expr", "children": [10]}, {"type": "SubscriptLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "trainData_out_hum"}, {"type": "Slice", "children": [13]}, {"type": "Num", "value": "10"}], "stage": null, "id": 832530, "neighbor_cells": [832529], "header": "", "annotation": []}
{"funcs": ["numpy.arange", "numpy.log", "numpy.log", "numpy.exp"], "file": "/projects/bdata/jupyter/target/nb_410619.py", "target_func": "none_func", "context": "\nw = np.arange(0, 2, 0.05)\n\npw = np.log(w)\n\npw_2 = np.log((1 / w))\n\npw_3 = np.exp(w)\n", "target_lineno": 1059, "nodes": [{"type": "Module", "children": [1, 10, 17, 26]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "w"}, {"type": "Call", "children": [4, 7, 8, 9]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "arange"}, {"type": "Num", "value": "0"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "0.05"}, {"type": "Assign", "children": [11, 12]}, {"type": "NameStore", "value": "pw"}, {"type": "Call", "children": [13, 16]}, {"type": "AttributeLoad", "children": [14, 15]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "log"}, {"type": "NameLoad", "value": "w"}, {"type": "Assign", "children": [18, 19]}, {"type": "NameStore", "value": "pw_2"}, {"type": "Call", "children": [20, 23]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "log"}, {"type": "BinOpDiv", "children": [24, 25]}, {"type": "Num", "value": "1"}, {"type": "NameLoad", "value": "w"}, {"type": "Assign", "children": [27, 28]}, {"type": "NameStore", "value": "pw_3"}, {"type": "Call", "children": [29, 32]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "exp"}, {"type": "NameLoad", "value": "w"}], "stage": null, "id": 456741, "neighbor_cells": [456740], "header": "", "annotation": []}
{"target_lineno": 1012, "file": "/projects/bdata/jupyter/target/nb_426869.py", "context": "\nwith open('data/super_best_estimators.pickle', 'wb') as f:\n    pickle.dump(best_estimators, f)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "With", "children": [2, 9]}, {"type": "items", "children": [3]}, {"type": "withitem", "children": [4, 8]}, {"type": "Call", "children": [5, 6, 7]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "data/super_best_estimators.pickle"}, {"type": "Str", "value": "wb"}, {"type": "NameStore", "value": "f"}, {"type": "body", "children": [10]}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15, 16]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "pickle"}, {"type": "attr", "value": "dump"}, {"type": "NameLoad", "value": "best_estimators"}, {"type": "NameLoad", "value": "f"}], "funcs": ["open", "pickle.dump"], "neighbor_cells": [1010584], "id": 1010585, "header": "", "annotation": []}
{"target_lineno": 128, "file": "/projects/bdata/jupyter/target/nb_694180.py", "context": "\nprint(titanic['Sex'].head(10))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [5, 11]}, {"type": "AttributeLoad", "children": [6, 10]}, {"type": "SubscriptLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "titanic"}, {"type": "Index", "children": [9]}, {"type": "Str", "value": "Sex"}, {"type": "attr", "value": "head"}, {"type": "Num", "value": "10"}], "funcs": ["print", "head"], "neighbor_cells": [799740], "id": 799741, "header": "", "annotation": []}
{"target_lineno": 304, "file": "/projects/bdata/jupyter/target/nb_610647.py", "context": "\nimgplot = plt.imshow(trans_image4)\n\nplt.show()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "imgplot"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "NameLoad", "value": "trans_image4"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "funcs": ["matplotlib.pyplot.imshow", "matplotlib.pyplot.show"], "neighbor_cells": [1172302], "id": 1172303, "header": "", "annotation": []}
{"target_lineno": 229, "file": "/projects/bdata/jupyter/target/nb_79027.py", "context": "\nmss_num_df_nonan = mss_num_df.dropna()\n\nmss_num_df_nonan2 = mss_num_df2.dropna()\n\nmss_num_df_nonan.isnull().sum()\n\nmss_num_df_nonan2.isnull().sum()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 13, 21]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "mss_num_df_nonan"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "mss_num_df"}, {"type": "attr", "value": "dropna"}, {"type": "Assign", "children": [8, 9]}, {"type": "NameStore", "value": "mss_num_df_nonan2"}, {"type": "Call", "children": [10]}, {"type": "AttributeLoad", "children": [11, 12]}, {"type": "NameLoad", "value": "mss_num_df2"}, {"type": "attr", "value": "dropna"}, {"type": "Expr", "children": [14]}, {"type": "Call", "children": [15]}, {"type": "AttributeLoad", "children": [16, 20]}, {"type": "Call", "children": [17]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "mss_num_df_nonan"}, {"type": "attr", "value": "isnull"}, {"type": "attr", "value": "sum"}, {"type": "Expr", "children": [22]}, {"type": "Call", "children": [23]}, {"type": "AttributeLoad", "children": [24, 28]}, {"type": "Call", "children": [25]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "mss_num_df_nonan2"}, {"type": "attr", "value": "isnull"}, {"type": "attr", "value": "sum"}], "funcs": ["pandas.concat.apply.dropna", "pandas.concat.apply.dropna", "pandas.concat.apply.dropna.isnull.sum", "pandas.concat.apply.dropna.isnull", "pandas.concat.apply.dropna.isnull.sum", "pandas.concat.apply.dropna.isnull"], "neighbor_cells": [128933], "id": 128934, "header": "", "annotation": []}
{"funcs": ["y_test.value_counts"], "file": "/projects/bdata/jupyter/target/nb_196291.py", "target_func": "none_func", "context": "\ny_test.value_counts()\n", "target_lineno": 533, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "y_test"}, {"type": "attr", "value": "value_counts"}], "stage": null, "id": 870622, "neighbor_cells": [870621], "header": "", "annotation": []}
{"target_lineno": 105, "file": "/projects/bdata/jupyter/target/nb_255585.py", "context": "\nveclsiCat = lsiCat[vecPhrase]\n\nsorted(veclsiCat, key=itemgetter(1), reverse=True)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "veclsiCat"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "lsiCat"}, {"type": "Index", "children": [6]}, {"type": "NameLoad", "value": "vecPhrase"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 10, 11, 15]}, {"type": "NameLoad", "value": "sorted"}, {"type": "NameLoad", "value": "veclsiCat"}, {"type": "keyword", "value": "key", "children": [12]}, {"type": "Call", "children": [13, 14]}, {"type": "NameLoad", "value": "itemgetter"}, {"type": "Num", "value": "1"}, {"type": "keyword", "value": "reverse", "children": [16]}, {"type": "NameConstant"}], "funcs": ["sorted", "operator.itemgetter"], "neighbor_cells": [116080], "id": 116081, "header": "", "annotation": []}
{"target_lineno": 141, "file": "/projects/bdata/jupyter/target/nb_929039.py", "context": "\nfor (i, img) in enumerate(imgset):\n    rgbimg = img_as_float(color.gray2rgb(img))\n    plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.imshow(img)\n    plt.subplot(1, 2, 2)\n    plt.imshow(plot_slic_segmentation(rgbimg))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 5, 8]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "i"}, {"type": "NameStore", "value": "img"}, {"type": "Call", "children": [6, 7]}, {"type": "NameLoad", "value": "enumerate"}, {"type": "NameLoad", "value": "imgset"}, {"type": "body", "children": [9, 18, 23, 31, 37, 45]}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "rgbimg"}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "img_as_float"}, {"type": "Call", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "color"}, {"type": "attr", "value": "gray2rgb"}, {"type": "NameLoad", "value": "img"}, {"type": "Expr", "children": [19]}, {"type": "Call", "children": [20]}, {"type": "AttributeLoad", "children": [21, 22]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "figure"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 28, 29, 30]}, {"type": "AttributeLoad", "children": [26, 27]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "subplot"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "1"}, {"type": "Expr", "children": [32]}, {"type": "Call", "children": [33, 36]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "NameLoad", "value": "img"}, {"type": "Expr", "children": [38]}, {"type": "Call", "children": [39, 42, 43, 44]}, {"type": "AttributeLoad", "children": [40, 41]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "subplot"}, {"type": "Num", "value": "1"}, {"type": "Num", "value": "2"}, {"type": "Num", "value": "2"}, {"type": "Expr", "children": [46]}, {"type": "Call", "children": [47, 50]}, {"type": "AttributeLoad", "children": [48, 49]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "imshow"}, {"type": "Call", "children": [51, 52]}, {"type": "NameLoad", "value": "plot_slic_segmentation"}, {"type": "NameLoad", "value": "rgbimg"}], "funcs": ["enumerate", "skimage.img_as_float", "skimage.color.gray2rgb", "matplotlib.pyplot.figure", "matplotlib.pyplot.subplot", "matplotlib.pyplot.imshow", "matplotlib.pyplot.subplot", "matplotlib.pyplot.imshow", "plot_slic_segmentation"], "neighbor_cells": [496757], "id": 496758, "header": "", "annotation": []}
{"funcs": ["open"], "file": "/projects/bdata/jupyter/target/nb_906283.py", "target_func": "none_func", "context": "\nimport csv\n\nwith open('example.csv', 'rb') as f:\n    for line in reader:\n        print line[1]\n", "target_lineno": 160, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "Import", "children": [2]}, {"type": "alias", "value": "csv"}, {"type": "With", "children": [4, 8, 9]}, {"type": "Call", "children": [5, 6, 7]}, {"type": "NameLoad", "value": "open"}, {"type": "Str", "value": "example.csv"}, {"type": "Str", "value": "rb"}, {"type": "NameStore", "value": "f"}, {"type": "body", "children": [10]}, {"type": "For", "children": [11, 12, 13]}, {"type": "NameStore", "value": "line"}, {"type": "NameLoad", "value": "reader"}, {"type": "body", "children": [14]}, {"type": "Print", "children": [15]}, {"type": "SubscriptLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "line"}, {"type": "Index", "children": [18]}, {"type": "Num", "value": "1"}], "stage": null, "id": 1084646, "neighbor_cells": [1084645], "header": " Sentence Splitter", "annotation": [" A partir de ahora haremos un preprocesamiento m s exhaustivo utilzando las t cnicas de tokenization stemming lemmatization and stop word removal Todo esto se encuentra dentro de las t cnicas de wrangling que nos proporciona NLTK ", " Sentence Splitter"]}
{"funcs": ["sklearn.datasets.load_boston"], "file": "/projects/bdata/jupyter/target/nb_486534.py", "target_func": "none_func", "context": "\nfrom sklearn import datasets\n\nboston = datasets.load_boston()\n", "target_lineno": 54, "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "children": [2], "value": "sklearn"}, {"type": "alias", "value": "datasets"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "boston"}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "datasets"}, {"type": "attr", "value": "load_boston"}], "stage": null, "id": 59271, "neighbor_cells": [59270], "header": " Load the data", "annotation": [" https ga dash s3 amazonaws com production assets logo 9f88ae6c9c3871690e33280fcf557f33 png br Regularization Cross Validation Implementation in Scikit Learn", " ", " Week 3 Day 4", " LEARNING OBJECTIVES", " After this lesson you will be able to ", " Implement LASSO and Ridge regressions in sklearn", " Explain the importance of hold out data", " Explain the different cross val strategies", " Perform cross validation scoring", " Make cross validation predictions", " Regularization Recap", " ", " What is regularization ", " Why do we use it ", " Key Takeaway ", " br ", " A model that fits well is not necessarily a model that predicts well ", " ", " Regularization ensures we don t overfit our training data ", " Our ultimate goal in modeling is to be able to predict using new future data without the labels ", " Example Modeling a chair", " ", " Partner up and create a model of a chair", " Do not use the internet to do this just your mental model of a chair", " Your model should include a checklist of positive attributes 3 ", " If an example passes 50 of these it will be considered a chair", " If it fails that it will not be considered a chair", " I will provide a test set and we will see which team builds the best model", " Modeling success predictive success", " ", " To ensure this we do a couple of things ", " ", " Regularization enforces simple models by penalizing complexity as measured by beta magnitudes ", " ", " Cross Validation ensures our model performs well on unseen data", " We re now going to see how we can implement both regularization and cross validation in sklearn", " Load the data"]}
{"funcs": ["fit_plot"], "file": "/projects/bdata/jupyter/target/nb_145340.py", "target_func": "none_func", "context": "\nfit_plot(sales['sqft_living'], 3, sales['price'])\n", "target_lineno": 93, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4, 8, 9]}, {"type": "NameLoad", "value": "fit_plot"}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "sales"}, {"type": "Index", "children": [7]}, {"type": "Str", "value": "sqft_living"}, {"type": "Num", "value": "3"}, {"type": "SubscriptLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "sales"}, {"type": "Index", "children": [12]}, {"type": "Str", "value": "price"}], "stage": null, "id": 463828, "neighbor_cells": [463827], "header": "", "annotation": []}
{"funcs": ["sklearn.grid_search.GridSearchCV", "sklearn.grid_search.GridSearchCV.fit"], "file": "/projects/bdata/jupyter/target/nb_797875.py", "target_func": "none_func", "context": "\ngs = GridSearchCV(pipe, param_grid, n_jobs=7)\n\ngs.fit(X, y)\n\nprint 'Best CV score', gs.best_score_\n\nprint gs.best_params_\n", "target_lineno": 611, "nodes": [{"type": "Module", "children": [1, 9, 16, 21]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "gs"}, {"type": "Call", "children": [4, 5, 6, 7]}, {"type": "NameLoad", "value": "GridSearchCV"}, {"type": "NameLoad", "value": "pipe"}, {"type": "NameLoad", "value": "param_grid"}, {"type": "keyword", "children": [8], "value": "n_jobs"}, {"type": "Num", "value": "7"}, {"type": "Expr", "children": [10]}, {"type": "Call", "children": [11, 14, 15]}, {"type": "AttributeLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "gs"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "NameLoad", "value": "y"}, {"type": "Print", "children": [17, 18]}, {"type": "Str", "value": "Best CV score"}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "gs"}, {"type": "attr", "value": "best_score_"}, {"type": "Print", "children": [22]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "gs"}, {"type": "attr", "value": "best_params_"}], "stage": null, "id": 873914, "neighbor_cells": [873913], "header": "", "annotation": []}
{"funcs": ["plot_tree"], "file": "/projects/bdata/jupyter/target/nb_143848.py", "target_func": "none_func", "context": "\nplot_tree(clf_crazy)\n", "target_lineno": 433, "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "plot_tree"}, {"type": "NameLoad", "value": "clf_crazy"}], "stage": null, "id": 309000, "neighbor_cells": [308999], "header": "", "annotation": [" Our accuracy is 100 on the training set Our model has perfectly memorized the data including all the noise in it "]}
{"funcs": ["drop.plot", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.show"], "file": "/projects/bdata/jupyter/target/nb_651284.py", "target_func": "none_func", "context": "\nrtn500.plot(style='.', label='S & P 500')\n\nplt.xlabel('date')\n\nplt.ylabel('adj closed')\n\nplt.legend()\n\nplt.show()\n", "target_lineno": 191, "nodes": [{"type": "Module", "children": [1, 10, 16, 22, 27]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 6, 8]}, {"type": "AttributeLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "rtn500"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "children": [7], "value": "style"}, {"type": "Str", "value": "."}, {"type": "keyword", "children": [9], "value": "label"}, {"type": "Str", "value": "S & P 500"}, {"type": "Expr", "children": [11]}, {"type": "Call", "children": [12, 15]}, {"type": "AttributeLoad", "children": [13, 14]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "xlabel"}, {"type": "Str", "value": "date"}, {"type": "Expr", "children": [17]}, {"type": "Call", "children": [18, 21]}, {"type": "AttributeLoad", "children": [19, 20]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "ylabel"}, {"type": "Str", "value": "adj closed"}, {"type": "Expr", "children": [23]}, {"type": "Call", "children": [24]}, {"type": "AttributeLoad", "children": [25, 26]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "legend"}, {"type": "Expr", "children": [28]}, {"type": "Call", "children": [29]}, {"type": "AttributeLoad", "children": [30, 31]}, {"type": "NameLoad", "value": "plt"}, {"type": "attr", "value": "show"}], "stage": null, "id": 1055073, "neighbor_cells": [1055072], "header": "", "annotation": [" The scatter plot of s p 500 index"]}
{"target_lineno": 161, "file": "/projects/bdata/jupyter/target/nb_455328.py", "context": "\nfeatures = dataCatAll.columns[0:]\n\ncats = [feature for feature in features if feature.startswith('cat')]\n\nfor feat in cats:\n    dataCatAll[feat] = pd.factorize(dataCatAll[feat], sort=True)[0]\n\ndataCatAll.head()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 9, 21, 43]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "features"}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "dataCatAll"}, {"type": "attr", "value": "columns"}, {"type": "Slice", "children": [8]}, {"type": "Num", "value": "0"}, {"type": "Assign", "children": [10, 11]}, {"type": "NameStore", "value": "cats"}, {"type": "ListComp", "children": [12, 13]}, {"type": "NameLoad", "value": "feature"}, {"type": "comprehension", "children": [14, 15, 16]}, {"type": "NameStore", "value": "feature"}, {"type": "NameLoad", "value": "features"}, {"type": "Call", "children": [17, 20]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "feature"}, {"type": "attr", "value": "startswith"}, {"type": "Str", "value": "cat"}, {"type": "For", "children": [22, 23, 24]}, {"type": "NameStore", "value": "feat"}, {"type": "NameLoad", "value": "cats"}, {"type": "body", "children": [25]}, {"type": "Assign", "children": [26, 30]}, {"type": "SubscriptStore", "children": [27, 28]}, {"type": "NameLoad", "value": "dataCatAll"}, {"type": "Index", "children": [29]}, {"type": "NameLoad", "value": "feat"}, {"type": "SubscriptLoad", "children": [31, 41]}, {"type": "Call", "children": [32, 35, 39]}, {"type": "AttributeLoad", "children": [33, 34]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "factorize"}, {"type": "SubscriptLoad", "children": [36, 37]}, {"type": "NameLoad", "value": "dataCatAll"}, {"type": "Index", "children": [38]}, {"type": "NameLoad", "value": "feat"}, {"type": "keyword", "value": "sort", "children": [40]}, {"type": "NameConstant"}, {"type": "Index", "children": [42]}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [44]}, {"type": "Call", "children": [45]}, {"type": "AttributeLoad", "children": [46, 47]}, {"type": "NameLoad", "value": "dataCatAll"}, {"type": "attr", "value": "head"}], "funcs": ["feature.startswith", "pandas.factorize", "pandas.concat.select_dtypes.applymap.head"], "neighbor_cells": [510140], "id": 510141, "header": "", "annotation": []}
{"funcs": ["sklearn.feature_extraction.text.TfidfTransformer.fit.transform"], "file": "/projects/bdata/jupyter/target/nb_468450.py", "target_func": "none_func", "context": "\nX_train_tf = tf_transformer.transform(X_train_counts)\n", "target_lineno": 113, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "X_train_tf"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "tf_transformer"}, {"type": "attr", "value": "transform"}, {"type": "NameLoad", "value": "X_train_counts"}], "stage": null, "id": 326420, "neighbor_cells": [326419], "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_11751.py", "target_func": "none_func", "context": "\nprint ridge_predictions\n", "target_lineno": 91, "nodes": [{"type": "Module", "children": [1]}, {"type": "Print", "children": [2]}, {"type": "NameLoad", "value": "ridge_predictions"}], "stage": null, "id": 859549, "neighbor_cells": [859548], "header": "", "annotation": []}
{"funcs": ["most_common", "format"], "file": "/projects/bdata/jupyter/target/nb_339190.py", "target_func": "none_func", "context": "\nkentucky_data = parole_data[(parole_data.state == 2)]\n\nmost_com_ken_val = most_common(kentucky_data.crime)\n\nmost_com_ken = ''\n\nif (most_com_ken_val == 2):\n    most_com_ken = 'Larceny'\nelif (most_com_ken_val == 3):\n    most_com_ken = 'Drug-related crime'\nelif (most_com_ken_val == 4):\n    most_com_ken = 'Driving-related crime'\nelse:\n    most_com_ken = 'Other crime'\n\nprint 'The Most common Crime in Kentucky is a {}'.format(most_com_ken)\n", "target_lineno": 199, "nodes": [{"type": "Module", "children": [1, 11, 18, 21, 51]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "kentucky_data"}, {"type": "SubscriptLoad", "children": [4, 5]}, {"type": "NameLoad", "value": "parole_data"}, {"type": "Index", "children": [6]}, {"type": "CompareEq", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "parole_data"}, {"type": "attr", "value": "state"}, {"type": "Num", "value": "2"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "most_com_ken_val"}, {"type": "Call", "children": [14, 15]}, {"type": "NameLoad", "value": "most_common"}, {"type": "AttributeLoad", "children": [16, 17]}, {"type": "NameLoad", "value": "kentucky_data"}, {"type": "attr", "value": "crime"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "most_com_ken"}, {"type": "Str", "value": ""}, {"type": "If", "children": [22, 25, 29]}, {"type": "CompareEq", "children": [23, 24]}, {"type": "NameLoad", "value": "most_com_ken_val"}, {"type": "Num", "value": "2"}, {"type": "body", "children": [26]}, {"type": "Assign", "children": [27, 28]}, {"type": "NameStore", "value": "most_com_ken"}, {"type": "Str", "value": "Larceny"}, {"type": "orelse", "children": [30]}, {"type": "If", "children": [31, 34, 38]}, {"type": "CompareEq", "children": [32, 33]}, {"type": "NameLoad", "value": "most_com_ken_val"}, {"type": "Num", "value": "3"}, {"type": "body", "children": [35]}, {"type": "Assign", "children": [36, 37]}, {"type": "NameStore", "value": "most_com_ken"}, {"type": "Str", "value": "Drug-related crime"}, {"type": "orelse", "children": [39]}, {"type": "If", "children": [40, 43, 47]}, {"type": "CompareEq", "children": [41, 42]}, {"type": "NameLoad", "value": "most_com_ken_val"}, {"type": "Num", "value": "4"}, {"type": "body", "children": [44]}, {"type": "Assign", "children": [45, 46]}, {"type": "NameStore", "value": "most_com_ken"}, {"type": "Str", "value": "Driving-related crime"}, {"type": "orelse", "children": [48]}, {"type": "Assign", "children": [49, 50]}, {"type": "NameStore", "value": "most_com_ken"}, {"type": "Str", "value": "Other crime"}, {"type": "Print", "children": [52]}, {"type": "Call", "children": [53, 56]}, {"type": "AttributeLoad", "children": [54, 55]}, {"type": "Str", "value": "The Most common Crime in Kentucky is a {}"}, {"type": "attr", "value": "format"}, {"type": "NameLoad", "value": "most_com_ken"}], "stage": null, "id": 578436, "neighbor_cells": [578435], "header": "", "annotation": [" Computing the most frequent crime in Kentucky ", " crime values are numerically coded as this ", " 2 is larceny ", " 3 is drug related crime ", " 4 is driving related crime ", " and 1 is any other crime ", " "]}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_940181.py", "target_func": "none_func", "context": "\nfrom sklearn.linear_model import LinearRegression\n", "target_lineno": 132, "nodes": [{"type": "Module", "children": [1]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.linear_model"}, {"type": "alias", "value": "LinearRegression"}], "stage": null, "id": 262497, "neighbor_cells": [262496], "header": "", "annotation": [" "]}
{"target_lineno": 43, "file": "/projects/bdata/jupyter/target/nb_640089.py", "context": "\nregr = linear_model.LinearRegression()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "regr"}, {"type": "Call", "children": [4]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "linear_model"}, {"type": "attr", "value": "LinearRegression"}], "funcs": ["sklearn.linear_model.LinearRegression"], "neighbor_cells": [730432], "id": 730433, "header": "", "annotation": []}
{"target_lineno": 66, "file": "/projects/bdata/jupyter/target/nb_895938.py", "context": "\nfor (train_idx, validation_idx) in ss.split(X):\n    train_df = df.iloc[train_idx]\n    validation_df = df.iloc[validation_idx]\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "For", "children": [2, 5, 10]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "train_idx"}, {"type": "NameStore", "value": "validation_idx"}, {"type": "Call", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "ss"}, {"type": "attr", "value": "split"}, {"type": "NameLoad", "value": "X"}, {"type": "body", "children": [11, 19]}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "train_df"}, {"type": "SubscriptLoad", "children": [14, 17]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "iloc"}, {"type": "Index", "children": [18]}, {"type": "NameLoad", "value": "train_idx"}, {"type": "Assign", "children": [20, 21]}, {"type": "NameStore", "value": "validation_df"}, {"type": "SubscriptLoad", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "df"}, {"type": "attr", "value": "iloc"}, {"type": "Index", "children": [26]}, {"type": "NameLoad", "value": "validation_idx"}], "funcs": ["sklearn.model_selection.ShuffleSplit.split"], "neighbor_cells": [17638], "id": 17639, "header": "", "annotation": []}
{"funcs": ["classify"], "file": "/projects/bdata/jupyter/target/nb_498050.py", "target_func": "none_func", "context": "\nrcols = ['Year', 'Corn_Price', 'CP_%_Change', 'Inflation', 'I_CP', 'Sorghum_Price', 'SP_%_Change', 'I_SP', 'Wheat_Price', 'WP_%_Change', '1_P', '2_P', '3_P', '4_P', '5_P', '6_P', '7_P', '8_P', '9_P', '10_P', '1_D', '2_D', '3_D', '4_D', '5_D', '6_D', '7_D', '8_D', '9_D', '10_D']\n\nXmatrix_2 = dftouse[rcols].values\n\nclassify(Xmatrix_2, Yresp, plotit=False)\n", "target_lineno": 1804, "nodes": [{"type": "Module", "children": [1, 34, 42]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "rcols"}, {"type": "ListLoad", "children": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]}, {"type": "Str", "value": "Year"}, {"type": "Str", "value": "Corn_Price"}, {"type": "Str", "value": "CP_%_Change"}, {"type": "Str", "value": "Inflation"}, {"type": "Str", "value": "I_CP"}, {"type": "Str", "value": "Sorghum_Price"}, {"type": "Str", "value": "SP_%_Change"}, {"type": "Str", "value": "I_SP"}, {"type": "Str", "value": "Wheat_Price"}, {"type": "Str", "value": "WP_%_Change"}, {"type": "Str", "value": "1_P"}, {"type": "Str", "value": "2_P"}, {"type": "Str", "value": "3_P"}, {"type": "Str", "value": "4_P"}, {"type": "Str", "value": "5_P"}, {"type": "Str", "value": "6_P"}, {"type": "Str", "value": "7_P"}, {"type": "Str", "value": "8_P"}, {"type": "Str", "value": "9_P"}, {"type": "Str", "value": "10_P"}, {"type": "Str", "value": "1_D"}, {"type": "Str", "value": "2_D"}, {"type": "Str", "value": "3_D"}, {"type": "Str", "value": "4_D"}, {"type": "Str", "value": "5_D"}, {"type": "Str", "value": "6_D"}, {"type": "Str", "value": "7_D"}, {"type": "Str", "value": "8_D"}, {"type": "Str", "value": "9_D"}, {"type": "Str", "value": "10_D"}, {"type": "Assign", "children": [35, 36]}, {"type": "NameStore", "value": "Xmatrix_2"}, {"type": "AttributeLoad", "children": [37, 41]}, {"type": "SubscriptLoad", "children": [38, 39]}, {"type": "NameLoad", "value": "dftouse"}, {"type": "Index", "children": [40]}, {"type": "NameLoad", "value": "rcols"}, {"type": "attr", "value": "values"}, {"type": "Expr", "children": [43]}, {"type": "Call", "children": [44, 45, 46, 47]}, {"type": "NameLoad", "value": "classify"}, {"type": "NameLoad", "value": "Xmatrix_2"}, {"type": "NameLoad", "value": "Yresp"}, {"type": "keyword", "children": [48], "value": "plotit"}, {"type": "NameLoad", "value": "False"}], "stage": null, "id": 840603, "neighbor_cells": [840602], "header": "", "annotation": []}
{"target_lineno": 597, "file": "/projects/bdata/jupyter/target/nb_196734.py", "context": "\n(delayed_flights_60_min.weekday_dep.value_counts() / len(delayed_flights_60_min)).plot(figsize=(12, 8))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 15]}, {"type": "AttributeLoad", "children": [4, 14]}, {"type": "BinOpDiv", "children": [5, 11]}, {"type": "Call", "children": [6]}, {"type": "AttributeLoad", "children": [7, 10]}, {"type": "AttributeLoad", "children": [8, 9]}, {"type": "NameLoad", "value": "delayed_flights_60_min"}, {"type": "attr", "value": "weekday_dep"}, {"type": "attr", "value": "value_counts"}, {"type": "Call", "children": [12, 13]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "delayed_flights_60_min"}, {"type": "attr", "value": "plot"}, {"type": "keyword", "value": "figsize", "children": [16]}, {"type": "TupleLoad", "children": [17, 18]}, {"type": "Num", "value": "12"}, {"type": "Num", "value": "8"}], "funcs": ["weekday_dep.value_counts", "len", "plot", "weekday_dep.value_counts", "len"], "neighbor_cells": [502995], "id": 502996, "header": "", "annotation": []}
{"target_lineno": 106, "file": "/projects/bdata/jupyter/target/nb_579541.py", "context": "\ncvarex = np.cumsum(varExpl)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "cvarex"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "cumsum"}, {"type": "NameLoad", "value": "varExpl"}], "funcs": ["numpy.cumsum"], "neighbor_cells": [431029], "id": 431030, "header": "", "annotation": [" Now calculate the explained variance and the Cumulative explained variance"]}
{"target_lineno": 54, "file": "/projects/bdata/jupyter/target/nb_323951.py", "context": "\n(X, y) = make_classification(n_samples=200, n_features=5, n_informative=3, n_classes=2, weights=[0.9, 0.1], shuffle=True, random_state=seed)\n\nprint('There are {} positive instances.'.format(y.sum()))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 23]}, {"type": "Assign", "children": [2, 5]}, {"type": "TupleStore", "children": [3, 4]}, {"type": "NameStore", "value": "X"}, {"type": "NameStore", "value": "y"}, {"type": "Call", "children": [6, 7, 9, 11, 13, 15, 19, 21]}, {"type": "NameLoad", "value": "make_classification"}, {"type": "keyword", "value": "n_samples", "children": [8]}, {"type": "Num", "value": "200"}, {"type": "keyword", "value": "n_features", "children": [10]}, {"type": "Num", "value": "5"}, {"type": "keyword", "value": "n_informative", "children": [12]}, {"type": "Num", "value": "3"}, {"type": "keyword", "value": "n_classes", "children": [14]}, {"type": "Num", "value": "2"}, {"type": "keyword", "value": "weights", "children": [16]}, {"type": "ListLoad", "children": [17, 18]}, {"type": "Num", "value": "0.9"}, {"type": "Num", "value": "0.1"}, {"type": "keyword", "value": "shuffle", "children": [20]}, {"type": "NameConstant"}, {"type": "keyword", "value": "random_state", "children": [22]}, {"type": "NameLoad", "value": "seed"}, {"type": "Expr", "children": [24]}, {"type": "Call", "children": [25, 26]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [27, 30]}, {"type": "AttributeLoad", "children": [28, 29]}, {"type": "Str", "value": "There are {} positive instances."}, {"type": "attr", "value": "format"}, {"type": "Call", "children": [31]}, {"type": "AttributeLoad", "children": [32, 33]}, {"type": "NameLoad", "value": "y"}, {"type": "attr", "value": "sum"}], "funcs": ["sklearn.datasets.make_classification", "print", "format", "sum"], "neighbor_cells": [903871], "id": 903872, "header": "", "annotation": [" We ll use a function to generate dataset for binary classification To assure that it s imbalanced use weights parameter In this case there will be 200 samples each described by 5 features but only 10 of them about 20 samples will be positive That makes the problem harder "]}
{"target_lineno": 25, "file": "/projects/bdata/jupyter/target/nb_11609.py", "context": "\ny = RawDataF\n\nn = len(y)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 4]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y"}, {"type": "NameLoad", "value": "RawDataF"}, {"type": "Assign", "children": [5, 6]}, {"type": "NameStore", "value": "n"}, {"type": "Call", "children": [7, 8]}, {"type": "NameLoad", "value": "len"}, {"type": "NameLoad", "value": "y"}], "funcs": ["len"], "neighbor_cells": [295186], "id": 295187, "header": "", "annotation": []}
{"target_lineno": 139, "file": "/projects/bdata/jupyter/target/nb_499009.py", "context": "\npca = PCA(n_components=7)\n\npca.fit(X)\n\nX1 = pca.fit_transform(X)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 7, 13]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "pca"}, {"type": "Call", "children": [4, 5]}, {"type": "NameLoad", "value": "PCA"}, {"type": "keyword", "value": "n_components", "children": [6]}, {"type": "Num", "value": "7"}, {"type": "Expr", "children": [8]}, {"type": "Call", "children": [9, 12]}, {"type": "AttributeLoad", "children": [10, 11]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "X"}, {"type": "Assign", "children": [14, 15]}, {"type": "NameStore", "value": "X1"}, {"type": "Call", "children": [16, 19]}, {"type": "AttributeLoad", "children": [17, 18]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "fit_transform"}, {"type": "NameLoad", "value": "X"}], "funcs": ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "sklearn.decomposition.PCA.fit_transform"], "neighbor_cells": [974101], "id": 974102, "header": "", "annotation": []}
{"target_lineno": 100, "file": "/projects/bdata/jupyter/target/nb_90894.py", "context": "\nprint(clf.best_params_)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "best_params_"}], "funcs": ["print"], "neighbor_cells": [1292299], "id": 1292300, "header": "", "annotation": []}
{"funcs": [], "file": "/projects/bdata/jupyter/target/nb_363146.py", "target_func": "none_func", "context": "\ngenotypes = data_gt.ix[:, [x for x in data_gt.columns if ('-' in x)]]\n", "target_lineno": 218, "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "genotypes"}, {"type": "SubscriptLoad", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "data_gt"}, {"type": "attr", "value": "ix"}, {"type": "ExtSlice", "children": [8, 9]}, {"type": "Slice"}, {"type": "Index", "children": [10]}, {"type": "ListComp", "children": [11, 12]}, {"type": "NameLoad", "value": "x"}, {"type": "comprehension", "children": [13, 14, 17]}, {"type": "NameStore", "value": "x"}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "data_gt"}, {"type": "attr", "value": "columns"}, {"type": "CompareIn", "children": [18, 19]}, {"type": "Str", "value": "-"}, {"type": "NameLoad", "value": "x"}], "stage": null, "id": 1090087, "neighbor_cells": [1090086], "header": "", "annotation": [" Sometimes it s nice to have genotype data all by itself Let s filter our data down to just that by using the naming pattern in the columns of data gt ", " ", " Run these cells to create the DataFrame view a bit of it and then save it to disk "]}
{"target_lineno": 62, "file": "/projects/bdata/jupyter/target/nb_888619.py", "context": "\ny_pred = ppn.predict(X_test_std)\n\nprint(('Misclassified samples: %d' % (y_test != y_pred).sum()))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "y_pred"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "ppn"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "X_test_std"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "print"}, {"type": "BinOpMod", "children": [12, 13]}, {"type": "Str", "value": "Misclassified samples: %d"}, {"type": "Call", "children": [14]}, {"type": "AttributeLoad", "children": [15, 18]}, {"type": "CompareNotEq", "children": [16, 17]}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "y_pred"}, {"type": "attr", "value": "sum"}], "funcs": ["sklearn.linear_model.Perceptron.predict", "print", "sum"], "neighbor_cells": [1089729], "id": 1089730, "header": "", "annotation": []}
{"funcs": ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit", "sklearn.decomposition.PCA.transform", "visuals.pca_results", "cumsum"], "file": "/projects/bdata/jupyter/target/nb_265719.py", "target_func": "none_func", "context": "\nfrom sklearn.decomposition import PCA\n\nn_features = good_data.shape[1]\n\npca = PCA(n_components=n_features)\n\npca.fit(good_data)\n\npca_samples = pca.transform(log_samples)\n\npca_results = vs.pca_results(good_data, pca)\n\nprint 'Cumulative proportion of variance explained by PCs:.'\n\nprint pca_results['Explained Variance'].cumsum()\n", "target_lineno": 307, "nodes": [{"type": "Module", "children": [1, 3, 11, 17, 23, 30, 38, 40]}, {"type": "ImportFrom", "children": [2], "value": "sklearn.decomposition"}, {"type": "alias", "value": "PCA"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "n_features"}, {"type": "SubscriptLoad", "children": [6, 9]}, {"type": "AttributeLoad", "children": [7, 8]}, {"type": "NameLoad", "value": "good_data"}, {"type": "attr", "value": "shape"}, {"type": "Index", "children": [10]}, {"type": "Num", "value": "1"}, {"type": "Assign", "children": [12, 13]}, {"type": "NameStore", "value": "pca"}, {"type": "Call", "children": [14, 15]}, {"type": "NameLoad", "value": "PCA"}, {"type": "keyword", "children": [16], "value": "n_components"}, {"type": "NameLoad", "value": "n_features"}, {"type": "Expr", "children": [18]}, {"type": "Call", "children": [19, 22]}, {"type": "AttributeLoad", "children": [20, 21]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "fit"}, {"type": "NameLoad", "value": "good_data"}, {"type": "Assign", "children": [24, 25]}, {"type": "NameStore", "value": "pca_samples"}, {"type": "Call", "children": [26, 29]}, {"type": "AttributeLoad", "children": [27, 28]}, {"type": "NameLoad", "value": "pca"}, {"type": "attr", "value": "transform"}, {"type": "NameLoad", "value": "log_samples"}, {"type": "Assign", "children": [31, 32]}, {"type": "NameStore", "value": "pca_results"}, {"type": "Call", "children": [33, 36, 37]}, {"type": "AttributeLoad", "children": [34, 35]}, {"type": "NameLoad", "value": "vs"}, {"type": "attr", "value": "pca_results"}, {"type": "NameLoad", "value": "good_data"}, {"type": "NameLoad", "value": "pca"}, {"type": "Print", "children": [39]}, {"type": "Str", "value": "Cumulative proportion of variance explained by PCs:."}, {"type": "Print", "children": [41]}, {"type": "Call", "children": [42]}, {"type": "AttributeLoad", "children": [43, 47]}, {"type": "SubscriptLoad", "children": [44, 45]}, {"type": "NameLoad", "value": "pca_results"}, {"type": "Index", "children": [46]}, {"type": "Str", "value": "Explained Variance"}, {"type": "attr", "value": "cumsum"}], "stage": null, "id": 764162, "neighbor_cells": [764161], "header": "", "annotation": [" Question 4", " Are there any data points considered outliers for more than one feature based on the definition above Should these data points be removed from the dataset If any data points were added to the outliers list to be removed explain why ", " Answer As indicated by the above analysis there were 42 data points with an outlier feature but", " only 5 with two outlier features only 1 with three outlier features half of the features and none", " with more than three From this it doesn t really seem like there is a danger of noise from data points", " that are general outliers outliers across all or most features So I m not doing to drop any points from", " the dataset ", " Feature Transformation", " In this section you will use principal component analysis PCA to draw conclusions about the underlying structure of the wholesale customer data Since using PCA on a dataset calculates the dimensions which best maximize variance we will find which compound combinations of features best describe customers ", " Implementation PCA", " ", " Now that the data has been scaled to a more normal distribution and has had any necessary outliers removed we can now apply PCA to the good data to discover which dimensions about the data best maximize the variance of features involved In addition to finding these dimensions PCA will also report the explained variance ratio of each dimension how much variance within the data is explained by that dimension alone Note that a component dimension from PCA can be considered a new feature of the space however it is a composition of the original features present in the data ", " ", " In the code block below you will need to implement the following ", " Import sklearn decomposition PCA and assign the results of fitting PCA in six dimensions with good data to pca ", " Apply a PCA transformation of the sample log data log samples using pca transform and assign the results to pca samples "]}
{"funcs": ["cv_and_fit", "numpy.logspace", "pandas.crosstab", "cv_and_fit.predict"], "file": "/projects/bdata/jupyter/target/nb_615844.py", "target_func": "none_func", "context": "\nlogreg5 = cv_and_fit(train_x, train_y, np.logspace((-4), 3, num=100))\n\npd.crosstab(test_y, logreg5.predict(test_x), rownames=['Actual'], colnames=['Predicted'])\n", "target_lineno": 944, "nodes": [{"type": "Module", "children": [1, 15]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "logreg5"}, {"type": "Call", "children": [4, 5, 6, 7]}, {"type": "NameLoad", "value": "cv_and_fit"}, {"type": "NameLoad", "value": "train_x"}, {"type": "NameLoad", "value": "train_y"}, {"type": "Call", "children": [8, 11, 12, 13]}, {"type": "AttributeLoad", "children": [9, 10]}, {"type": "NameLoad", "value": "np"}, {"type": "attr", "value": "logspace"}, {"type": "Num", "value": "-4"}, {"type": "Num", "value": "3"}, {"type": "keyword", "children": [14], "value": "num"}, {"type": "Num", "value": "100"}, {"type": "Expr", "children": [16]}, {"type": "Call", "children": [17, 20, 21, 26, 29]}, {"type": "AttributeLoad", "children": [18, 19]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "crosstab"}, {"type": "NameLoad", "value": "test_y"}, {"type": "Call", "children": [22, 25]}, {"type": "AttributeLoad", "children": [23, 24]}, {"type": "NameLoad", "value": "logreg5"}, {"type": "attr", "value": "predict"}, {"type": "NameLoad", "value": "test_x"}, {"type": "keyword", "children": [27], "value": "rownames"}, {"type": "ListLoad", "children": [28]}, {"type": "Str", "value": "Actual"}, {"type": "keyword", "children": [30], "value": "colnames"}, {"type": "ListLoad", "children": [31]}, {"type": "Str", "value": "Predicted"}], "stage": null, "id": 997680, "neighbor_cells": [997679], "header": "", "annotation": []}
{"funcs": ["get_ipython.magic", "get_ipython"], "file": "/projects/bdata/jupyter/target/nb_862856.py", "target_func": "none_func", "context": "\nget_ipython().magic(u'matplotlib inline')\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\nfrom astropy.modeling import models\n\nfrom astropy import units as u\n\nfrom astropy import nddata\n\nfrom astropy.io import fits\n\nimport re\n\nimport os\n", "target_lineno": 26, "nodes": [{"type": "Module", "children": [1, 8, 11, 14, 16, 19, 21, 23, 25]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 7]}, {"type": "AttributeLoad", "children": [4, 6]}, {"type": "Call", "children": [5]}, {"type": "NameLoad", "value": "get_ipython"}, {"type": "attr", "value": "magic"}, {"type": "Str", "value": "matplotlib inline"}, {"type": "Import", "children": [9]}, {"type": "alias", "children": [10], "value": "matplotlib.pyplot"}, {"type": "identifier", "value": "plt"}, {"type": "Import", "children": [12]}, {"type": "alias", "children": [13], "value": "numpy"}, {"type": "identifier", "value": "np"}, {"type": "ImportFrom", "children": [15], "value": "astropy.modeling"}, {"type": "alias", "value": "models"}, {"type": "ImportFrom", "children": [17], "value": "astropy"}, {"type": "alias", "children": [18], "value": "units"}, {"type": "identifier", "value": "u"}, {"type": "ImportFrom", "children": [20], "value": "astropy"}, {"type": "alias", "value": "nddata"}, {"type": "ImportFrom", "children": [22], "value": "astropy.io"}, {"type": "alias", "value": "fits"}, {"type": "Import", "children": [24]}, {"type": "alias", "value": "re"}, {"type": "Import", "children": [26]}, {"type": "alias", "value": "os"}], "stage": null, "id": 839778, "neighbor_cells": [839777], "header": "", "annotation": []}
{"target_lineno": 65, "file": "/projects/bdata/jupyter/target/nb_422392.py", "context": "\nt.shape\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Expr", "children": [2]}, {"type": "AttributeLoad", "children": [3, 4]}, {"type": "NameLoad", "value": "t"}, {"type": "attr", "value": "shape"}], "funcs": [], "neighbor_cells": [466789], "id": 466790, "header": "", "annotation": []}
{"funcs": ["imdbpie.Imdb", "imdbpie.Imdb"], "file": "/projects/bdata/jupyter/target/nb_535938.py", "target_func": "none_func", "context": "\nimdb = Imdb()\n\nimdb = Imdb(anonymize=True)\n", "target_lineno": 61, "nodes": [{"type": "Module", "children": [1, 5]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "imdb"}, {"type": "Call", "children": [4]}, {"type": "NameLoad", "value": "Imdb"}, {"type": "Assign", "children": [6, 7]}, {"type": "NameStore", "value": "imdb"}, {"type": "Call", "children": [8, 9]}, {"type": "NameLoad", "value": "Imdb"}, {"type": "keyword", "children": [10], "value": "anonymize"}, {"type": "NameLoad", "value": "True"}], "stage": null, "id": 882020, "neighbor_cells": [882019], "header": " 1 Connect to the IMDB API", "annotation": [" ", " ", " Part 1 Acquire the Data", " ", " You will connect to the IMDB API to query for movies ", " ", " See here for documentation on how to use the package ", " ", " https github com richardasaurus imdb pie", " 1 Connect to the IMDB API"]}
{"target_lineno": 779, "file": "/projects/bdata/jupyter/target/nb_414751.py", "context": "\nprint(x[0])\n\nprint(x[1])\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 8]}, {"type": "Expr", "children": [2]}, {"type": "Call", "children": [3, 4]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "x"}, {"type": "Index", "children": [7]}, {"type": "Num", "value": "0"}, {"type": "Expr", "children": [9]}, {"type": "Call", "children": [10, 11]}, {"type": "NameLoad", "value": "print"}, {"type": "SubscriptLoad", "children": [12, 13]}, {"type": "NameLoad", "value": "x"}, {"type": "Index", "children": [14]}, {"type": "Num", "value": "1"}], "funcs": ["print", "print"], "neighbor_cells": [1242449], "id": 1242450, "header": "", "annotation": []}
{"target_lineno": 108, "file": "/projects/bdata/jupyter/target/nb_723071.py", "context": "\ndictionary = corpora.Dictionary(X)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "dictionary"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "corpora"}, {"type": "attr", "value": "Dictionary"}, {"type": "NameLoad", "value": "X"}], "funcs": ["gensim.corpora.Dictionary"], "neighbor_cells": [496793], "id": 496794, "header": "", "annotation": []}
{"target_lineno": 172, "file": "/projects/bdata/jupyter/target/nb_27142.py", "context": "\nsubmission = pd.DataFrame({\n    'id': idx,\n    'prediction': preds,\n})\n\nsubmission.to_csv('beating_the_benchmark_yet_again.csv', index=False)\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 12]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "submission"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "pd"}, {"type": "attr", "value": "DataFrame"}, {"type": "Dict", "children": [8, 9, 10, 11]}, {"type": "Str", "value": "id"}, {"type": "Str", "value": "prediction"}, {"type": "NameLoad", "value": "idx"}, {"type": "NameLoad", "value": "preds"}, {"type": "Expr", "children": [13]}, {"type": "Call", "children": [14, 17, 18]}, {"type": "AttributeLoad", "children": [15, 16]}, {"type": "NameLoad", "value": "submission"}, {"type": "attr", "value": "to_csv"}, {"type": "Str", "value": "beating_the_benchmark_yet_again.csv"}, {"type": "keyword", "value": "index", "children": [19]}, {"type": "NameConstant"}], "funcs": ["pandas.DataFrame", "pandas.DataFrame.to_csv"], "neighbor_cells": [789665], "id": 789666, "header": " Kaggle Score 0 53340", "annotation": [" Ok this is the baseline submission", " Kaggle Score 0 53340"]}
{"target_lineno": 173, "file": "/projects/bdata/jupyter/target/nb_446013.py", "context": "\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 3]}, {"type": "ImportFrom", "value": "sklearn.datasets", "children": [2]}, {"type": "alias", "value": "load_iris"}, {"type": "Assign", "children": [4, 5]}, {"type": "NameStore", "value": "iris"}, {"type": "Call", "children": [6]}, {"type": "NameLoad", "value": "load_iris"}], "funcs": ["sklearn.datasets.load_iris"], "neighbor_cells": [433523], "id": 433524, "header": "", "annotation": [" Quick Question ", " ", " If we want to design an algorithm to recognize iris species what might the data be ", " ", " Remember we need a 2D array of size n samples x n features ", " ", " What would the n samples refer to ", " ", " What might the n features refer to ", " ", " Remember that there must be a fixed number of features for each sample and feature", " number i must be a similar kind of quantity for each sample ", " Loading the Iris Data with Scikit Learn", " ", " Scikit learn has a very straightforward set of data on these iris species The data consist of", " the following ", " ", " Features in the Iris dataset ", " ", " 1 sepal length in cm", " 2 sepal width in cm", " 3 petal length in cm", " 4 petal width in cm", " ", " Target classes to predict ", " ", " 1 Iris Setosa", " 2 Iris Versicolour", " 3 Iris Virginica", " ", " scikit learn embeds a copy of the iris CSV file along with a helper function to load it into numpy arrays "]}
{"target_lineno": 445, "file": "/projects/bdata/jupyter/target/nb_900732.py", "context": "\nyhat = clf.predict(input_fn=(lambda : process_input(df_test, None, categorical_headers_ints, numeric_headers)))\n\nyhat = [x['incomes'] for x in yhat]\n\nprint(confusion_matrix(y_test, yhat), accuracy_score(y_test, yhat))\n", "target_func": "none_func", "nodes": [{"type": "Module", "children": [1, 18, 28]}, {"type": "Assign", "children": [2, 3]}, {"type": "NameStore", "value": "yhat"}, {"type": "Call", "children": [4, 7]}, {"type": "AttributeLoad", "children": [5, 6]}, {"type": "NameLoad", "value": "clf"}, {"type": "attr", "value": "predict"}, {"type": "keyword", "value": "input_fn", "children": [8]}, {"type": "Lambda", "children": [9, 12]}, {"type": "arguments", "children": [10, 11]}, {"type": "args"}, {"type": "defaults"}, {"type": "Call", "children": [13, 14, 15, 16, 17]}, {"type": "NameLoad", "value": "process_input"}, {"type": "NameLoad", "value": "df_test"}, {"type": "NameConstant"}, {"type": "NameLoad", "value": "categorical_headers_ints"}, {"type": "NameLoad", "value": "numeric_headers"}, {"type": "Assign", "children": [19, 20]}, {"type": "NameStore", "value": "yhat"}, {"type": "ListComp", "children": [21, 25]}, {"type": "SubscriptLoad", "children": [22, 23]}, {"type": "NameLoad", "value": "x"}, {"type": "Index", "children": [24]}, {"type": "Str", "value": "incomes"}, {"type": "comprehension", "children": [26, 27]}, {"type": "NameStore", "value": "x"}, {"type": "NameLoad", "value": "yhat"}, {"type": "Expr", "children": [29]}, {"type": "Call", "children": [30, 31, 35]}, {"type": "NameLoad", "value": "print"}, {"type": "Call", "children": [32, 33, 34]}, {"type": "NameLoad", "value": "confusion_matrix"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "yhat"}, {"type": "Call", "children": [36, 37, 38]}, {"type": "NameLoad", "value": "accuracy_score"}, {"type": "NameLoad", "value": "y_test"}, {"type": "NameLoad", "value": "yhat"}], "funcs": ["clf.predict", "process_input", "print", "confusion_matrix", "accuracy_score"], "neighbor_cells": [842827], "id": 842828, "header": "", "annotation": []}
